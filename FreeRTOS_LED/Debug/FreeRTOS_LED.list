
FreeRTOS_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005db0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060e8  080060e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080060e8  080060e8  000160e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060f0  080060f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f0  080060f0  000160f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080060f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00014428  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014438  20014438  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010f7b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002b46  00000000  00000000  00030ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  00033b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d39  00000000  00000000  00034c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023491  00000000  00000000  000359b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013b3f  00000000  00000000  00058e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d6c09  00000000  00000000  0006c989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004774  00000000  00000000  00143594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d1  00000000  00000000  00147d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005f28 	.word	0x08005f28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005f28 	.word	0x08005f28

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e64 	.word	0x20012e64

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000566:	f000 fc27 	bl	8000db8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800056a:	f000 f889 	bl	8000680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800056e:	f000 f8f1 	bl	8000754 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	SEGGER_SYSVIEW_Conf();
 8000572:	f003 fb3f 	bl	8003bf4 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 8000576:	f004 feab 	bl	80052d0 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(Green_LED_handler, "Green led task", 200, NULL, 2,
 800057a:	4b35      	ldr	r3, [pc, #212]	; (8000650 <main+0xf0>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2302      	movs	r3, #2
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	22c8      	movs	r2, #200	; 0xc8
 8000586:	4933      	ldr	r1, [pc, #204]	; (8000654 <main+0xf4>)
 8000588:	4833      	ldr	r0, [pc, #204]	; (8000658 <main+0xf8>)
 800058a:	f001 ff23 	bl	80023d4 <xTaskCreate>
 800058e:	6178      	str	r0, [r7, #20]
			&Green_LED_handle);

	configASSERT(status == pdPASS);
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d00a      	beq.n	80005ac <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800059a:	f383 8811 	msr	BASEPRI, r3
 800059e:	f3bf 8f6f 	isb	sy
 80005a2:	f3bf 8f4f 	dsb	sy
 80005a6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005a8:	bf00      	nop
 80005aa:	e7fe      	b.n	80005aa <main+0x4a>
	Next_task_handle = Green_LED_handle;
 80005ac:	4b28      	ldr	r3, [pc, #160]	; (8000650 <main+0xf0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <main+0xfc>)
 80005b2:	6013      	str	r3, [r2, #0]
	status = xTaskCreate(Orange_LED_handler, "Orange led task", 200, NULL, 2,
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <main+0x100>)
 80005b6:	9301      	str	r3, [sp, #4]
 80005b8:	2302      	movs	r3, #2
 80005ba:	9300      	str	r3, [sp, #0]
 80005bc:	2300      	movs	r3, #0
 80005be:	22c8      	movs	r2, #200	; 0xc8
 80005c0:	4928      	ldr	r1, [pc, #160]	; (8000664 <main+0x104>)
 80005c2:	4829      	ldr	r0, [pc, #164]	; (8000668 <main+0x108>)
 80005c4:	f001 ff06 	bl	80023d4 <xTaskCreate>
 80005c8:	6178      	str	r0, [r7, #20]
			&Orange_LED_handle);

	configASSERT(status == pdPASS);
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	2b01      	cmp	r3, #1
 80005ce:	d00a      	beq.n	80005e6 <main+0x86>
        __asm volatile
 80005d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005d4:	f383 8811 	msr	BASEPRI, r3
 80005d8:	f3bf 8f6f 	isb	sy
 80005dc:	f3bf 8f4f 	dsb	sy
 80005e0:	60fb      	str	r3, [r7, #12]
    }
 80005e2:	bf00      	nop
 80005e4:	e7fe      	b.n	80005e4 <main+0x84>
	status = xTaskCreate(Red_LED_handler, "Green led task", 200, NULL, 2,
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <main+0x10c>)
 80005e8:	9301      	str	r3, [sp, #4]
 80005ea:	2302      	movs	r3, #2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	2300      	movs	r3, #0
 80005f0:	22c8      	movs	r2, #200	; 0xc8
 80005f2:	4918      	ldr	r1, [pc, #96]	; (8000654 <main+0xf4>)
 80005f4:	481e      	ldr	r0, [pc, #120]	; (8000670 <main+0x110>)
 80005f6:	f001 feed 	bl	80023d4 <xTaskCreate>
 80005fa:	6178      	str	r0, [r7, #20]
			&Red_LED_handle);

	configASSERT(status == pdPASS);
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00a      	beq.n	8000618 <main+0xb8>
        __asm volatile
 8000602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000606:	f383 8811 	msr	BASEPRI, r3
 800060a:	f3bf 8f6f 	isb	sy
 800060e:	f3bf 8f4f 	dsb	sy
 8000612:	60bb      	str	r3, [r7, #8]
    }
 8000614:	bf00      	nop
 8000616:	e7fe      	b.n	8000616 <main+0xb6>
	status = xTaskCreate(Button_handler, "Button Task", 200, NULL, 3,
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <main+0x114>)
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2303      	movs	r3, #3
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	22c8      	movs	r2, #200	; 0xc8
 8000624:	4914      	ldr	r1, [pc, #80]	; (8000678 <main+0x118>)
 8000626:	4815      	ldr	r0, [pc, #84]	; (800067c <main+0x11c>)
 8000628:	f001 fed4 	bl	80023d4 <xTaskCreate>
 800062c:	6178      	str	r0, [r7, #20]
			&Button_handle);
	configASSERT(status == pdPASS);
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d00a      	beq.n	800064a <main+0xea>
        __asm volatile
 8000634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000638:	f383 8811 	msr	BASEPRI, r3
 800063c:	f3bf 8f6f 	isb	sy
 8000640:	f3bf 8f4f 	dsb	sy
 8000644:	607b      	str	r3, [r7, #4]
    }
 8000646:	bf00      	nop
 8000648:	e7fe      	b.n	8000648 <main+0xe8>

	vTaskStartScheduler();
 800064a:	f002 f909 	bl	8002860 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800064e:	e7fe      	b.n	800064e <main+0xee>
 8000650:	2000002c 	.word	0x2000002c
 8000654:	08005f40 	.word	0x08005f40
 8000658:	08000a11 	.word	0x08000a11
 800065c:	2000003c 	.word	0x2000003c
 8000660:	20000030 	.word	0x20000030
 8000664:	08005f50 	.word	0x08005f50
 8000668:	08000a81 	.word	0x08000a81
 800066c:	20000034 	.word	0x20000034
 8000670:	08000af1 	.word	0x08000af1
 8000674:	20000038 	.word	0x20000038
 8000678:	08005f60 	.word	0x08005f60
 800067c:	08000b5d 	.word	0x08000b5d

08000680 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	2230      	movs	r2, #48	; 0x30
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 fc10 	bl	8005eb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	4b28      	ldr	r3, [pc, #160]	; (800074c <SystemClock_Config+0xcc>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	4a27      	ldr	r2, [pc, #156]	; (800074c <SystemClock_Config+0xcc>)
 80006ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b2:	6413      	str	r3, [r2, #64]	; 0x40
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c0:	2300      	movs	r3, #0
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xd0>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xd0>)
 80006ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006dc:	2302      	movs	r3, #2
 80006de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e4:	2310      	movs	r3, #16
 80006e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80006f0:	2308      	movs	r3, #8
 80006f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 50;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fc:	2307      	movs	r3, #7
 80006fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f000 fe4f 	bl	80013a8 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x94>
		Error_Handler();
 8000710:	f000 fa4c 	bl	8000bac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000720:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000724:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f001 f8b0 	bl	8001898 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
		Error_Handler();
 800073e:	f000 fa35 	bl	8000bac <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4ba2      	ldr	r3, [pc, #648]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4aa1      	ldr	r2, [pc, #644]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b9f      	ldr	r3, [pc, #636]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b9b      	ldr	r3, [pc, #620]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a9a      	ldr	r2, [pc, #616]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b98      	ldr	r3, [pc, #608]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b94      	ldr	r3, [pc, #592]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a93      	ldr	r2, [pc, #588]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b91      	ldr	r3, [pc, #580]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b8d      	ldr	r3, [pc, #564]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a8c      	ldr	r2, [pc, #560]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b8a      	ldr	r3, [pc, #552]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b86      	ldr	r3, [pc, #536]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a85      	ldr	r2, [pc, #532]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b83      	ldr	r3, [pc, #524]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b7f      	ldr	r3, [pc, #508]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a7e      	ldr	r2, [pc, #504]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b7c      	ldr	r3, [pc, #496]	; (80009f8 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	4879      	ldr	r0, [pc, #484]	; (80009fc <MX_GPIO_Init+0x2a8>)
 8000818:	f000 fd92 	bl	8001340 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	4877      	ldr	r0, [pc, #476]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 8000822:	f000 fd8d 	bl	8001340 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8000826:	2200      	movs	r2, #0
 8000828:	f24f 0110 	movw	r1, #61456	; 0xf010
 800082c:	4875      	ldr	r0, [pc, #468]	; (8000a04 <MX_GPIO_Init+0x2b0>)
 800082e:	f000 fd87 	bl	8001340 <HAL_GPIO_WritePin>
	LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000832:	2308      	movs	r3, #8
 8000834:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	486c      	ldr	r0, [pc, #432]	; (80009fc <MX_GPIO_Init+0x2a8>)
 800084a:	f000 fbc5 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800084e:	2301      	movs	r3, #1
 8000850:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4866      	ldr	r0, [pc, #408]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fbb7 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087a:	2305      	movs	r3, #5
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	485e      	ldr	r0, [pc, #376]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 8000886:	f000 fba7 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	485a      	ldr	r0, [pc, #360]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 80008a0:	f000 fb9a 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4852      	ldr	r0, [pc, #328]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 80008c0:	f000 fb8a 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 80008c4:	23e0      	movs	r3, #224	; 0xe0
 80008c6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d4:	2305      	movs	r3, #5
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	484a      	ldr	r0, [pc, #296]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 80008e0:	f000 fb7a 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80008e4:	2304      	movs	r3, #4
 80008e6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4845      	ldr	r0, [pc, #276]	; (8000a0c <MX_GPIO_Init+0x2b8>)
 80008f8:	f000 fb6e 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000900:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	483c      	ldr	r0, [pc, #240]	; (8000a0c <MX_GPIO_Init+0x2b8>)
 800091a:	f000 fb5d 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 800091e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000922:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4833      	ldr	r0, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x2b0>)
 8000938:	f000 fb4e 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 800093c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000940:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800094e:	2306      	movs	r3, #6
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4829      	ldr	r0, [pc, #164]	; (8000a00 <MX_GPIO_Init+0x2ac>)
 800095a:	f000 fb3d 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000962:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4825      	ldr	r0, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 8000974:	f000 fb30 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8000978:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800097c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800098a:	230a      	movs	r3, #10
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x2b4>)
 8000996:	f000 fb1f 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800099a:	2320      	movs	r3, #32
 800099c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4815      	ldr	r0, [pc, #84]	; (8000a04 <MX_GPIO_Init+0x2b0>)
 80009ae:	f000 fb13 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 80009b2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	480f      	ldr	r0, [pc, #60]	; (8000a0c <MX_GPIO_Init+0x2b8>)
 80009d0:	f000 fb02 	bl	8000fd8 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009d4:	2302      	movs	r3, #2
 80009d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009d8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0x2a8>)
 80009ea:	f000 faf5 	bl	8000fd8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40020800 	.word	0x40020800
 8000a04:	40020c00 	.word	0x40020c00
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <Green_LED_handler>:

/* USER CODE BEGIN 4 */
static void Green_LED_handler(void *parameters) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af02      	add	r7, sp, #8
 8000a16:	6078      	str	r0, [r7, #4]
	//const TickType_t frequency = 1000;
	//xlastwakeuptime = xTaskGetTickCount();

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Green LED TASK");
 8000a18:	4814      	ldr	r0, [pc, #80]	; (8000a6c <Green_LED_handler+0x5c>)
 8000a1a:	f005 f9cb 	bl	8005db4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_Green_Pin);
 8000a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a22:	4813      	ldr	r0, [pc, #76]	; (8000a70 <Green_LED_handler+0x60>)
 8000a24:	f000 fca5 	bl	8001372 <HAL_GPIO_TogglePin>
		//vTaskDelayUntil(&xlastwakeuptime,frequency);
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	2200      	movs	r2, #0
 8000a32:	2100      	movs	r1, #0
 8000a34:	2000      	movs	r0, #0
 8000a36:	f002 fa07 	bl	8002e48 <xTaskGenericNotifyWait>
 8000a3a:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d1ea      	bne.n	8000a18 <Green_LED_handler+0x8>
			vTaskSuspendAll();
 8000a42:	f001 ff69 	bl	8002918 <vTaskSuspendAll>
			Next_task_handle = Orange_LED_handle;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <Green_LED_handler+0x64>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <Green_LED_handler+0x68>)
 8000a4c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a4e:	f001 ff71 	bl	8002934 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_Green_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <Green_LED_handler+0x60>)
 8000a5a:	f000 fc71 	bl	8001340 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Green LED TASK");
 8000a5e:	4807      	ldr	r0, [pc, #28]	; (8000a7c <Green_LED_handler+0x6c>)
 8000a60:	f005 f9a8 	bl	8005db4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f001 fe19 	bl	800269c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Green LED TASK");
 8000a6a:	e7d5      	b.n	8000a18 <Green_LED_handler+0x8>
 8000a6c:	08005f6c 	.word	0x08005f6c
 8000a70:	40020c00 	.word	0x40020c00
 8000a74:	20000030 	.word	0x20000030
 8000a78:	2000003c 	.word	0x2000003c
 8000a7c:	08005f7c 	.word	0x08005f7c

08000a80 <Orange_LED_handler>:
		//vTaskDelay(pdMS_TO_TICKS(1000));

	}
}

static void Orange_LED_handler(void *parameters) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af02      	add	r7, sp, #8
 8000a86:	6078      	str	r0, [r7, #4]
	//TickType_t xlastwakeuptime;
	//const TickType_t frequency = 800;
	//xlastwakeuptime = xTaskGetTickCount();
	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Orange LED TASK");
 8000a88:	4814      	ldr	r0, [pc, #80]	; (8000adc <Orange_LED_handler+0x5c>)
 8000a8a:	f005 f993 	bl	8005db4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_Orange_Pin);
 8000a8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a92:	4813      	ldr	r0, [pc, #76]	; (8000ae0 <Orange_LED_handler+0x60>)
 8000a94:	f000 fc6d 	bl	8001372 <HAL_GPIO_TogglePin>

		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000a98:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f002 f9cf 	bl	8002e48 <xTaskGenericNotifyWait>
 8000aaa:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d1ea      	bne.n	8000a88 <Orange_LED_handler+0x8>
			vTaskSuspendAll();
 8000ab2:	f001 ff31 	bl	8002918 <vTaskSuspendAll>
			Next_task_handle = Red_LED_handle;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <Orange_LED_handler+0x64>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <Orange_LED_handler+0x68>)
 8000abc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000abe:	f001 ff39 	bl	8002934 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_Orange_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac8:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <Orange_LED_handler+0x60>)
 8000aca:	f000 fc39 	bl	8001340 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Orange LED TASK");
 8000ace:	4807      	ldr	r0, [pc, #28]	; (8000aec <Orange_LED_handler+0x6c>)
 8000ad0:	f005 f970 	bl	8005db4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f001 fde1 	bl	800269c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Orange LED TASK");
 8000ada:	e7d5      	b.n	8000a88 <Orange_LED_handler+0x8>
 8000adc:	08005f94 	.word	0x08005f94
 8000ae0:	40020c00 	.word	0x40020c00
 8000ae4:	20000034 	.word	0x20000034
 8000ae8:	2000003c 	.word	0x2000003c
 8000aec:	08005fa4 	.word	0x08005fa4

08000af0 <Red_LED_handler>:
		}
	}
}
static void Red_LED_handler(void *parameters) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
	//TickType_t xlastwakeuptime;
	//const TickType_t frequency = 400;

	BaseType_t status;
	while (1) {
		SEGGER_SYSVIEW_PrintfTarget("Orange LED TASK");
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <Red_LED_handler+0x5c>)
 8000afa:	f005 f95b 	bl	8005db4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_Red_Pin);
 8000afe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b02:	4813      	ldr	r0, [pc, #76]	; (8000b50 <Red_LED_handler+0x60>)
 8000b04:	f000 fc35 	bl	8001372 <HAL_GPIO_TogglePin>

		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b08:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2300      	movs	r3, #0
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f002 f997 	bl	8002e48 <xTaskGenericNotifyWait>
 8000b1a:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d1ea      	bne.n	8000af8 <Red_LED_handler+0x8>
			vTaskSuspendAll();
 8000b22:	f001 fef9 	bl	8002918 <vTaskSuspendAll>
			Next_task_handle = NULL;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <Red_LED_handler+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b2c:	f001 ff02 	bl	8002934 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, LED_Red_Pin, GPIO_PIN_RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	4806      	ldr	r0, [pc, #24]	; (8000b50 <Red_LED_handler+0x60>)
 8000b38:	f000 fc02 	bl	8001340 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Deleting Red LED TASK");
 8000b3c:	4806      	ldr	r0, [pc, #24]	; (8000b58 <Red_LED_handler+0x68>)
 8000b3e:	f005 f939 	bl	8005db4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f001 fdaa 	bl	800269c <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Orange LED TASK");
 8000b48:	e7d6      	b.n	8000af8 <Red_LED_handler+0x8>
 8000b4a:	bf00      	nop
 8000b4c:	08005f94 	.word	0x08005f94
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	2000003c 	.word	0x2000003c
 8000b58:	08005fc0 	.word	0x08005fc0

08000b5c <Button_handler>:
		}

	}
}
static void Button_handler(void *parameters) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	6078      	str	r0, [r7, #4]
	uint8_t button_read = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73bb      	strb	r3, [r7, #14]
	uint8_t previous_read = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	73fb      	strb	r3, [r7, #15]
	while (1) {
		button_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <Button_handler+0x48>)
 8000b70:	f000 fbce 	bl	8001310 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	73bb      	strb	r3, [r7, #14]
		if (button_read) {
 8000b78:	7bbb      	ldrb	r3, [r7, #14]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d00b      	beq.n	8000b96 <Button_handler+0x3a>
			if (!previous_read) {
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d108      	bne.n	8000b96 <Button_handler+0x3a>
				xTaskNotify(Next_task_handle, 0, eNoAction);
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <Button_handler+0x4c>)
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	9300      	str	r3, [sp, #0]
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	f002 f9e1 	bl	8002f58 <xTaskGenericNotify>

			}
		}
		previous_read = button_read;
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b9a:	200a      	movs	r0, #10
 8000b9c:	f001 fe28 	bl	80027f0 <vTaskDelay>
		button_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000ba0:	e7e4      	b.n	8000b6c <Button_handler+0x10>
 8000ba2:	bf00      	nop
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	2000003c 	.word	0x2000003c

08000bac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bb4:	e7fe      	b.n	8000bb4 <Error_Handler+0x8>
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	; (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000bf6:	f002 fc47 	bl	8003488 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	; 0x38
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	4b33      	ldr	r3, [pc, #204]	; (8000cec <HAL_InitTick+0xe4>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	4a32      	ldr	r2, [pc, #200]	; (8000cec <HAL_InitTick+0xe4>)
 8000c22:	f043 0308 	orr.w	r3, r3, #8
 8000c26:	6413      	str	r3, [r2, #64]	; 0x40
 8000c28:	4b30      	ldr	r3, [pc, #192]	; (8000cec <HAL_InitTick+0xe4>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c34:	f107 0210 	add.w	r2, r7, #16
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f836 	bl	8001cb0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c44:	6a3b      	ldr	r3, [r7, #32]
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d103      	bne.n	8000c56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c4e:	f001 f81b 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8000c52:	6378      	str	r0, [r7, #52]	; 0x34
 8000c54:	e004      	b.n	8000c60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c56:	f001 f817 	bl	8001c88 <HAL_RCC_GetPCLK1Freq>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c62:	4a23      	ldr	r2, [pc, #140]	; (8000cf0 <HAL_InitTick+0xe8>)
 8000c64:	fba2 2303 	umull	r2, r3, r2, r3
 8000c68:	0c9b      	lsrs	r3, r3, #18
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c70:	4a21      	ldr	r2, [pc, #132]	; (8000cf8 <HAL_InitTick+0xf0>)
 8000c72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c7a:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000c7c:	4a1d      	ldr	r2, [pc, #116]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c80:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000c94:	4817      	ldr	r0, [pc, #92]	; (8000cf4 <HAL_InitTick+0xec>)
 8000c96:	f001 f83d 	bl	8001d14 <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ca0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d11b      	bne.n	8000ce0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000ca8:	4812      	ldr	r0, [pc, #72]	; (8000cf4 <HAL_InitTick+0xec>)
 8000caa:	f001 f88d 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d111      	bne.n	8000ce0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000cbc:	2032      	movs	r0, #50	; 0x32
 8000cbe:	f000 f97d 	bl	8000fbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d808      	bhi.n	8000cda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	2032      	movs	r0, #50	; 0x32
 8000cce:	f000 f959 	bl	8000f84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <HAL_InitTick+0xf4>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	e002      	b.n	8000ce0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ce0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3738      	adds	r7, #56	; 0x38
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	20000040 	.word	0x20000040
 8000cf8:	40000c00 	.word	0x40000c00
 8000cfc:	20000004 	.word	0x20000004

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM5_IRQHandler+0x10>)
 8000d32:	f001 f8b9 	bl	8001ea8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000040 	.word	0x20000040

08000d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f005 f897 	bl	8005ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d96:	f7ff fbe3 	bl	8000560 <main>
  bx  lr    
 8000d9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000da8:	080060f8 	.word	0x080060f8
  ldr r2, =_sbss
 8000dac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000db0:	20014438 	.word	0x20014438

08000db4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC_IRQHandler>
	...

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f8c4 	bl	8000f6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff ff0e 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fee4 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000088 	.word	0x20000088

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4907      	ldr	r1, [pc, #28]	; (8000eb0 <__NVIC_EnableIRQ+0x38>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff4c 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f96:	f7ff ff61 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000f9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	6978      	ldr	r0, [r7, #20]
 8000fa2:	f7ff ffb1 	bl	8000f08 <NVIC_EncodePriority>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff80 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ff54 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	e16b      	b.n	80012cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	f040 815a 	bne.w	80012c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0303 	and.w	r3, r3, #3
 800101a:	2b01      	cmp	r3, #1
 800101c:	d005      	beq.n	800102a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001026:	2b02      	cmp	r3, #2
 8001028:	d130      	bne.n	800108c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	091b      	lsrs	r3, r3, #4
 8001076:	f003 0201 	and.w	r2, r3, #1
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b03      	cmp	r3, #3
 8001096:	d017      	beq.n	80010c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d123      	bne.n	800111c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	08da      	lsrs	r2, r3, #3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3208      	adds	r2, #8
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	691a      	ldr	r2, [r3, #16]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	08da      	lsrs	r2, r3, #3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3208      	adds	r2, #8
 8001116:	69b9      	ldr	r1, [r7, #24]
 8001118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0203 	and.w	r2, r3, #3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 80b4 	beq.w	80012c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a5f      	ldr	r2, [pc, #380]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <HAL_GPIO_Init+0x30c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117a:	4a5b      	ldr	r2, [pc, #364]	; (80012e8 <HAL_GPIO_Init+0x310>)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	3302      	adds	r3, #2
 8001182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a52      	ldr	r2, [pc, #328]	; (80012ec <HAL_GPIO_Init+0x314>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d02b      	beq.n	80011fe <HAL_GPIO_Init+0x226>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a51      	ldr	r2, [pc, #324]	; (80012f0 <HAL_GPIO_Init+0x318>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d025      	beq.n	80011fa <HAL_GPIO_Init+0x222>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a50      	ldr	r2, [pc, #320]	; (80012f4 <HAL_GPIO_Init+0x31c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01f      	beq.n	80011f6 <HAL_GPIO_Init+0x21e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	; (80012f8 <HAL_GPIO_Init+0x320>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x21a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4e      	ldr	r2, [pc, #312]	; (80012fc <HAL_GPIO_Init+0x324>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x216>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4d      	ldr	r2, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x328>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x212>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <HAL_GPIO_Init+0x32c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x20e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4b      	ldr	r2, [pc, #300]	; (8001308 <HAL_GPIO_Init+0x330>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x20a>
 80011de:	2307      	movs	r3, #7
 80011e0:	e00e      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011e2:	2308      	movs	r3, #8
 80011e4:	e00c      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e00a      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x228>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x310>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b3b      	ldr	r3, [pc, #236]	; (800130c <HAL_GPIO_Init+0x334>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a32      	ldr	r2, [pc, #200]	; (800130c <HAL_GPIO_Init+0x334>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <HAL_GPIO_Init+0x334>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <HAL_GPIO_Init+0x334>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_GPIO_Init+0x334>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1d      	ldr	r2, [pc, #116]	; (800130c <HAL_GPIO_Init+0x334>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_GPIO_Init+0x334>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a12      	ldr	r2, [pc, #72]	; (800130c <HAL_GPIO_Init+0x334>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f ae90 	bls.w	8000ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40021400 	.word	0x40021400
 8001304:	40021800 	.word	0x40021800
 8001308:	40021c00 	.word	0x40021c00
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	619a      	str	r2, [r3, #24]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001384:	887a      	ldrh	r2, [r7, #2]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4013      	ands	r3, r2
 800138a:	041a      	lsls	r2, r3, #16
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	43d9      	mvns	r1, r3
 8001390:	887b      	ldrh	r3, [r7, #2]
 8001392:	400b      	ands	r3, r1
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	619a      	str	r2, [r3, #24]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e267      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d075      	beq.n	80014b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013c6:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d00c      	beq.n	80013ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d2:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013da:	2b08      	cmp	r3, #8
 80013dc:	d112      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013ea:	d10b      	bne.n	8001404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d05b      	beq.n	80014b0 <HAL_RCC_OscConfig+0x108>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d157      	bne.n	80014b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e242      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d106      	bne.n	800141c <HAL_RCC_OscConfig+0x74>
 800140e:	4b76      	ldr	r3, [pc, #472]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a75      	ldr	r2, [pc, #468]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	e01d      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x98>
 8001426:	4b70      	ldr	r3, [pc, #448]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a6f      	ldr	r2, [pc, #444]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6c      	ldr	r2, [pc, #432]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0xb0>
 8001440:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a68      	ldr	r2, [pc, #416]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b66      	ldr	r3, [pc, #408]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a65      	ldr	r2, [pc, #404]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fccc 	bl	8000dfc <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fcc8 	bl	8000dfc <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	; 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e207      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147a:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d0f0      	beq.n	8001468 <HAL_RCC_OscConfig+0xc0>
 8001486:	e014      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcb8 	bl	8000dfc <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fcb4 	bl	8000dfc <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1f3      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a2:	4b51      	ldr	r3, [pc, #324]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0xe8>
 80014ae:	e000      	b.n	80014b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014be:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00b      	beq.n	80014e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014d2:	2b08      	cmp	r3, #8
 80014d4:	d11c      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d116      	bne.n	8001510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	4b41      	ldr	r3, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e1c7      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	691b      	ldr	r3, [r3, #16]
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150e:	e03a      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <HAL_RCC_OscConfig+0x244>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151e:	f7ff fc6d 	bl	8000dfc <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001526:	f7ff fc69 	bl	8000dfc <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e1a8      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4925      	ldr	r1, [pc, #148]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_OscConfig+0x244>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff fc4c 	bl	8000dfc <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001568:	f7ff fc48 	bl	8000dfc <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e187      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157a:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f0      	bne.n	8001568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0308 	and.w	r3, r3, #8
 800158e:	2b00      	cmp	r3, #0
 8001590:	d036      	beq.n	8001600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d016      	beq.n	80015c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_RCC_OscConfig+0x248>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fc2c 	bl	8000dfc <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fc28 	bl	8000dfc <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e167      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_OscConfig+0x240>)
 80015bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d0f0      	beq.n	80015a8 <HAL_RCC_OscConfig+0x200>
 80015c6:	e01b      	b.n	8001600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_RCC_OscConfig+0x248>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fc15 	bl	8000dfc <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	e00e      	b.n	80015f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fc11 	bl	8000dfc <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d907      	bls.n	80015f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e150      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
 80015e8:	40023800 	.word	0x40023800
 80015ec:	42470000 	.word	0x42470000
 80015f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f4:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1ea      	bne.n	80015d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	f000 8097 	beq.w	800173c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160e:	2300      	movs	r3, #0
 8001610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001612:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b74      	ldr	r3, [pc, #464]	; (800181c <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fbd1 	bl	8000dfc <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fbcd 	bl	8000dfc <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e10c      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b6a      	ldr	r3, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x474>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x2ea>
 8001684:	4b64      	ldr	r3, [pc, #400]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001688:	4a63      	ldr	r2, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6713      	str	r3, [r2, #112]	; 0x70
 8001690:	e01c      	b.n	80016cc <HAL_RCC_OscConfig+0x324>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x30c>
 800169a:	4b5f      	ldr	r3, [pc, #380]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a5e      	ldr	r2, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016aa:	4a5b      	ldr	r2, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6713      	str	r3, [r2, #112]	; 0x70
 80016b2:	e00b      	b.n	80016cc <HAL_RCC_OscConfig+0x324>
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	6713      	str	r3, [r2, #112]	; 0x70
 80016c0:	4b55      	ldr	r3, [pc, #340]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c4:	4a54      	ldr	r2, [pc, #336]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0304 	bic.w	r3, r3, #4
 80016ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d015      	beq.n	8001700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb92 	bl	8000dfc <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb8e 	bl	8000dfc <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e0cb      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	4b49      	ldr	r3, [pc, #292]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0ee      	beq.n	80016dc <HAL_RCC_OscConfig+0x334>
 80016fe:	e014      	b.n	800172a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001700:	f7ff fb7c 	bl	8000dfc <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001706:	e00a      	b.n	800171e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fb78 	bl	8000dfc <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	f241 3288 	movw	r2, #5000	; 0x1388
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e0b5      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ee      	bne.n	8001708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d105      	bne.n	800173c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a38      	ldr	r2, [pc, #224]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a1 	beq.w	8001888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b08      	cmp	r3, #8
 8001750:	d05c      	beq.n	800180c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d141      	bne.n	80017de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b31      	ldr	r3, [pc, #196]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fb4c 	bl	8000dfc <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fb48 	bl	8000dfc <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e087      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177a:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	019b      	lsls	r3, r3, #6
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	041b      	lsls	r3, r3, #16
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	491b      	ldr	r1, [pc, #108]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b6:	f7ff fb21 	bl	8000dfc <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017be:	f7ff fb1d 	bl	8000dfc <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e05c      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x416>
 80017dc:	e054      	b.n	8001888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x478>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb0a 	bl	8000dfc <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb06 	bl	8000dfc <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e045      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x470>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x444>
 800180a:	e03d      	b.n	8001888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e038      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
 8001818:	40023800 	.word	0x40023800
 800181c:	40007000 	.word	0x40007000
 8001820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x4ec>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d028      	beq.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d121      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d11a      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001854:	4013      	ands	r3, r2
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800185a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800185c:	4293      	cmp	r3, r2
 800185e:	d111      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	3b01      	subs	r3, #1
 800186e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d001      	beq.n	8001888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e0cc      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ac:	4b68      	ldr	r3, [pc, #416]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d90c      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b65      	ldr	r3, [pc, #404]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b63      	ldr	r3, [pc, #396]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0b8      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d020      	beq.n	8001922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018ec:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800190e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	494d      	ldr	r1, [pc, #308]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d044      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b47      	ldr	r3, [pc, #284]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d119      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e07f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b02      	cmp	r3, #2
 800194c:	d003      	beq.n	8001956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	2b03      	cmp	r3, #3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001956:	4b3f      	ldr	r3, [pc, #252]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d109      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001966:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e067      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f023 0203 	bic.w	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4934      	ldr	r1, [pc, #208]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001988:	f7ff fa38 	bl	8000dfc <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff fa34 	bl	8000dfc <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e04f      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	f003 020c 	and.w	r2, r3, #12
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1eb      	bne.n	8001990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d20c      	bcs.n	80019e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <HAL_RCC_ClockConfig+0x1b8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e032      	b.n	8001a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0304 	and.w	r3, r3, #4
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d008      	beq.n	80019fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4916      	ldr	r1, [pc, #88]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d009      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490e      	ldr	r1, [pc, #56]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a1e:	f000 f821 	bl	8001a64 <HAL_RCC_GetSysClockFreq>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	490a      	ldr	r1, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	5ccb      	ldrb	r3, [r1, r3]
 8001a32:	fa22 f303 	lsr.w	r3, r2, r3
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8e2 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023c00 	.word	0x40023c00
 8001a54:	40023800 	.word	0x40023800
 8001a58:	080060ac 	.word	0x080060ac
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b094      	sub	sp, #80	; 0x50
 8001a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a70:	2300      	movs	r3, #0
 8001a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a74:	2300      	movs	r3, #0
 8001a76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a7c:	4b79      	ldr	r3, [pc, #484]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d00d      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	f200 80e1 	bhi.w	8001c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d002      	beq.n	8001a98 <HAL_RCC_GetSysClockFreq+0x34>
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a96:	e0db      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b73      	ldr	r3, [pc, #460]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a9c:	e0db      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a9e:	4b73      	ldr	r3, [pc, #460]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8001aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aa2:	e0d8      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aa4:	4b6f      	ldr	r3, [pc, #444]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001aac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aae:	4b6d      	ldr	r3, [pc, #436]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aba:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	099b      	lsrs	r3, r3, #6
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001acc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ace:	2300      	movs	r3, #0
 8001ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	462b      	mov	r3, r5
 8001ada:	f04f 0000 	mov.w	r0, #0
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	0159      	lsls	r1, r3, #5
 8001ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ae8:	0150      	lsls	r0, r2, #5
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4621      	mov	r1, r4
 8001af0:	1a51      	subs	r1, r2, r1
 8001af2:	6139      	str	r1, [r7, #16]
 8001af4:	4629      	mov	r1, r5
 8001af6:	eb63 0301 	sbc.w	r3, r3, r1
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b08:	4659      	mov	r1, fp
 8001b0a:	018b      	lsls	r3, r1, #6
 8001b0c:	4651      	mov	r1, sl
 8001b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b12:	4651      	mov	r1, sl
 8001b14:	018a      	lsls	r2, r1, #6
 8001b16:	4651      	mov	r1, sl
 8001b18:	ebb2 0801 	subs.w	r8, r2, r1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b36:	4690      	mov	r8, r2
 8001b38:	4699      	mov	r9, r3
 8001b3a:	4623      	mov	r3, r4
 8001b3c:	eb18 0303 	adds.w	r3, r8, r3
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	462b      	mov	r3, r5
 8001b44:	eb49 0303 	adc.w	r3, r9, r3
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b56:	4629      	mov	r1, r5
 8001b58:	024b      	lsls	r3, r1, #9
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b60:	4621      	mov	r1, r4
 8001b62:	024a      	lsls	r2, r1, #9
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b74:	f7fe fb76 	bl	8000264 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b80:	e058      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b38      	ldr	r3, [pc, #224]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4611      	mov	r1, r2
 8001b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b92:	623b      	str	r3, [r7, #32]
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
 8001b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	f04f 0000 	mov.w	r0, #0
 8001ba4:	f04f 0100 	mov.w	r1, #0
 8001ba8:	0159      	lsls	r1, r3, #5
 8001baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bae:	0150      	lsls	r0, r2, #5
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bba:	4649      	mov	r1, r9
 8001bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	00eb      	lsls	r3, r5, #3
 8001be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bea:	00e2      	lsls	r2, r4, #3
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	4643      	mov	r3, r8
 8001bf2:	18e3      	adds	r3, r4, r3
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	464b      	mov	r3, r9
 8001bf8:	eb45 0303 	adc.w	r3, r5, r3
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	028b      	lsls	r3, r1, #10
 8001c0e:	4621      	mov	r1, r4
 8001c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c14:	4621      	mov	r1, r4
 8001c16:	028a      	lsls	r2, r1, #10
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	61fa      	str	r2, [r7, #28]
 8001c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c28:	f7fe fb1c 	bl	8000264 <__aeabi_uldivmod>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4613      	mov	r3, r2
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0c1b      	lsrs	r3, r3, #16
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	3301      	adds	r3, #1
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c4e:	e002      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3750      	adds	r7, #80	; 0x50
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	00f42400 	.word	0x00f42400
 8001c6c:	007a1200 	.word	0x007a1200

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000

08001c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c8c:	f7ff fff0 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	0a9b      	lsrs	r3, r3, #10
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	4903      	ldr	r1, [pc, #12]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	080060bc 	.word	0x080060bc

08001cb0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc0:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	08db      	lsrs	r3, r3, #3
 8001cea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <HAL_RCC_GetClockConfig+0x60>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0207 	and.w	r2, r3, #7
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	601a      	str	r2, [r3, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f839 	bl	8001db2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 f9ca 	bl	80020ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04e      	b.n	8001e7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_TIM_Base_Start_IT+0xc4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d01d      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1f      	ldr	r2, [pc, #124]	; (8001e90 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a1e      	ldr	r2, [pc, #120]	; (8001e94 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1b      	ldr	r2, [pc, #108]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d111      	bne.n	8001e6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0201 	orr.w	r2, r2, #1
 8001e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e6a:	e007      	b.n	8001e7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800
 8001e98:	40000c00 	.word	0x40000c00
 8001e9c:	40010400 	.word	0x40010400
 8001ea0:	40014000 	.word	0x40014000
 8001ea4:	40001800 	.word	0x40001800

08001ea8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d020      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d01b      	beq.n	8001f0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0202 	mvn.w	r2, #2
 8001edc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f8dc 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001ef8:	e005      	b.n	8001f06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8ce 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f8df 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d020      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d01b      	beq.n	8001f58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0204 	mvn.w	r2, #4
 8001f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8b6 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8a8 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8b9 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d020      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01b      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0208 	mvn.w	r2, #8
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f890 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f882 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f893 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d020      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01b      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0210 	mvn.w	r2, #16
 8001fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2208      	movs	r2, #8
 8001fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f86a 	bl	80020b0 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e005      	b.n	8001fea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f85c 	bl	800209c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f86d 	bl	80020c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d007      	beq.n	8002014 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0201 	mvn.w	r2, #1
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f83a 	bl	8002088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f910 	bl	8002258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002048:	2b00      	cmp	r3, #0
 800204a:	d007      	beq.n	800205c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f83e 	bl	80020d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0320 	and.w	r3, r3, #32
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00c      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0320 	and.w	r3, r3, #32
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0220 	mvn.w	r2, #32
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8e2 	bl	8002244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a46      	ldr	r2, [pc, #280]	; (8002218 <TIM_Base_SetConfig+0x12c>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210a:	d00f      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a43      	ldr	r2, [pc, #268]	; (800221c <TIM_Base_SetConfig+0x130>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a42      	ldr	r2, [pc, #264]	; (8002220 <TIM_Base_SetConfig+0x134>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a41      	ldr	r2, [pc, #260]	; (8002224 <TIM_Base_SetConfig+0x138>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a40      	ldr	r2, [pc, #256]	; (8002228 <TIM_Base_SetConfig+0x13c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a35      	ldr	r2, [pc, #212]	; (8002218 <TIM_Base_SetConfig+0x12c>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d027      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a32      	ldr	r2, [pc, #200]	; (800221c <TIM_Base_SetConfig+0x130>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d023      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a31      	ldr	r2, [pc, #196]	; (8002220 <TIM_Base_SetConfig+0x134>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <TIM_Base_SetConfig+0x138>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <TIM_Base_SetConfig+0x13c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d017      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a2e      	ldr	r2, [pc, #184]	; (800222c <TIM_Base_SetConfig+0x140>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <TIM_Base_SetConfig+0x144>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00f      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a2c      	ldr	r2, [pc, #176]	; (8002234 <TIM_Base_SetConfig+0x148>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2b      	ldr	r2, [pc, #172]	; (8002238 <TIM_Base_SetConfig+0x14c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a2a      	ldr	r2, [pc, #168]	; (800223c <TIM_Base_SetConfig+0x150>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a29      	ldr	r2, [pc, #164]	; (8002240 <TIM_Base_SetConfig+0x154>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <TIM_Base_SetConfig+0x12c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0xf8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a12      	ldr	r2, [pc, #72]	; (8002228 <TIM_Base_SetConfig+0x13c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f023 0201 	bic.w	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]
  }
}
 800220a:	bf00      	nop
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40010000 	.word	0x40010000
 800221c:	40000400 	.word	0x40000400
 8002220:	40000800 	.word	0x40000800
 8002224:	40000c00 	.word	0x40000c00
 8002228:	40010400 	.word	0x40010400
 800222c:	40014000 	.word	0x40014000
 8002230:	40014400 	.word	0x40014400
 8002234:	40014800 	.word	0x40014800
 8002238:	40001800 	.word	0x40001800
 800223c:	40001c00 	.word	0x40001c00
 8002240:	40002000 	.word	0x40002000

08002244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f103 0208 	add.w	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0208 	add.w	r2, r3, #8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022c6:	b480      	push	{r7}
 80022c8:	b085      	sub	sp, #20
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d103      	bne.n	800232e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e00c      	b.n	8002348 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3308      	adds	r3, #8
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	e002      	b.n	800233c <vListInsert+0x2e>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	d2f6      	bcs.n	8002336 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	601a      	str	r2, [r3, #0]
}
 8002374:	bf00      	nop
 8002376:	3714      	adds	r7, #20
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	6892      	ldr	r2, [r2, #8]
 8002396:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6852      	ldr	r2, [r2, #4]
 80023a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d103      	bne.n	80023b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af04      	add	r7, sp, #16
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	4613      	mov	r3, r2
 80023e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 f9f7 	bl	80037dc <pvPortMalloc>
 80023ee:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00e      	beq.n	8002414 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023f6:	2058      	movs	r0, #88	; 0x58
 80023f8:	f001 f9f0 	bl	80037dc <pvPortMalloc>
 80023fc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
 800240a:	e005      	b.n	8002418 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800240c:	6978      	ldr	r0, [r7, #20]
 800240e:	f001 fac5 	bl	800399c <vPortFree>
 8002412:	e001      	b.n	8002418 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002414:	2300      	movs	r3, #0
 8002416:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d013      	beq.n	8002446 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	2300      	movs	r3, #0
 8002422:	9303      	str	r3, [sp, #12]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f80e 	bl	8002456 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800243a:	69f8      	ldr	r0, [r7, #28]
 800243c:	f000 f8a2 	bl	8002584 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002440:	2301      	movs	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
 8002444:	e002      	b.n	800244c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295
 800244a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800244c:	69bb      	ldr	r3, [r7, #24]
    }
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b088      	sub	sp, #32
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	461a      	mov	r2, r3
 800246e:	21a5      	movs	r1, #165	; 0xa5
 8002470:	f003 fd20 	bl	8005eb4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800247e:	3b01      	subs	r3, #1
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f023 0307 	bic.w	r3, r3, #7
 800248c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <prvInitialiseNewTask+0x58>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	617b      	str	r3, [r7, #20]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01f      	beq.n	80024f4 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e012      	b.n	80024e0 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	7819      	ldrb	r1, [r3, #0]
 80024c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	3334      	adds	r3, #52	; 0x34
 80024ca:	460a      	mov	r2, r1
 80024cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d9e9      	bls.n	80024ba <prvInitialiseNewTask+0x64>
 80024e6:	e000      	b.n	80024ea <prvInitialiseNewTask+0x94>
            {
                break;
 80024e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024f2:	e003      	b.n	80024fc <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	2b04      	cmp	r3, #4
 8002500:	d901      	bls.n	8002506 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002502:	2304      	movs	r3, #4
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002510:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	2200      	movs	r2, #0
 8002516:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	3304      	adds	r3, #4
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fec5 	bl	80022ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	3318      	adds	r3, #24
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fec0 	bl	80022ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002530:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002534:	f1c3 0205 	rsb	r2, r3, #5
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800253c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002544:	3350      	adds	r3, #80	; 0x50
 8002546:	2204      	movs	r2, #4
 8002548:	2100      	movs	r1, #0
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fcb2 	bl	8005eb4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	3354      	adds	r3, #84	; 0x54
 8002554:	2201      	movs	r2, #1
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fcab 	bl	8005eb4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	68f9      	ldr	r1, [r7, #12]
 8002562:	69b8      	ldr	r0, [r7, #24]
 8002564:	f000 fe62 	bl	800322c <pxPortInitialiseStack>
 8002568:	4602      	mov	r2, r0
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800256e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d002      	beq.n	800257a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002578:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800257a:	bf00      	nop
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af02      	add	r7, sp, #8
 800258a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800258c:	f000 fffa 	bl	8003584 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <prvAddNewTaskToReadyList+0xfc>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	3301      	adds	r3, #1
 8002596:	4a3a      	ldr	r2, [pc, #232]	; (8002680 <prvAddNewTaskToReadyList+0xfc>)
 8002598:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <prvAddNewTaskToReadyList+0x100>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80025a2:	4a38      	ldr	r2, [pc, #224]	; (8002684 <prvAddNewTaskToReadyList+0x100>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <prvAddNewTaskToReadyList+0xfc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d110      	bne.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80025b0:	f000 fbb0 	bl	8002d14 <prvInitialiseTaskLists>
 80025b4:	e00d      	b.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <prvAddNewTaskToReadyList+0x104>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d109      	bne.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025be:	4b31      	ldr	r3, [pc, #196]	; (8002684 <prvAddNewTaskToReadyList+0x100>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d802      	bhi.n	80025d2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025cc:	4a2d      	ldr	r2, [pc, #180]	; (8002684 <prvAddNewTaskToReadyList+0x100>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <prvAddNewTaskToReadyList+0x108>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	4a2c      	ldr	r2, [pc, #176]	; (800268c <prvAddNewTaskToReadyList+0x108>)
 80025da:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <prvAddNewTaskToReadyList+0x108>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <prvAddNewTaskToReadyList+0x94>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f003 f9cf 	bl	8005990 <SEGGER_SYSVIEW_OnTaskCreate>
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	461d      	mov	r5, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	461c      	mov	r4, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	1ae3      	subs	r3, r4, r3
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	462b      	mov	r3, r5
 8002614:	f001 fb90 	bl	8003d38 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fa3c 	bl	8005a98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	2201      	movs	r2, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <prvAddNewTaskToReadyList+0x10c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4313      	orrs	r3, r2
 800262e:	4a18      	ldr	r2, [pc, #96]	; (8002690 <prvAddNewTaskToReadyList+0x10c>)
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002636:	4613      	mov	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	4a15      	ldr	r2, [pc, #84]	; (8002694 <prvAddNewTaskToReadyList+0x110>)
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f7ff fe3c 	bl	80022c6 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800264e:	f000 ffc9 	bl	80035e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <prvAddNewTaskToReadyList+0x104>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00e      	beq.n	8002678 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <prvAddNewTaskToReadyList+0x100>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <prvAddNewTaskToReadyList+0x114>)
 800266a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	f3bf 8f4f 	dsb	sy
 8002674:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	20000164 	.word	0x20000164
 8002684:	2000008c 	.word	0x2000008c
 8002688:	20000170 	.word	0x20000170
 800268c:	20000180 	.word	0x20000180
 8002690:	2000016c 	.word	0x2000016c
 8002694:	20000090 	.word	0x20000090
 8002698:	e000ed04 	.word	0xe000ed04

0800269c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80026a4:	f000 ff6e 	bl	8003584 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <vTaskDelete+0x18>
 80026ae:	4b46      	ldr	r3, [pc, #280]	; (80027c8 <vTaskDelete+0x12c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	e000      	b.n	80026b6 <vTaskDelete+0x1a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3304      	adds	r3, #4
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fe5f 	bl	8002380 <uxListRemove>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d115      	bne.n	80026f4 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026cc:	493f      	ldr	r1, [pc, #252]	; (80027cc <vTaskDelete+0x130>)
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <vTaskDelete+0x58>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e2:	2201      	movs	r2, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43da      	mvns	r2, r3
 80026ea:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <vTaskDelete+0x134>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4013      	ands	r3, r2
 80026f0:	4a37      	ldr	r2, [pc, #220]	; (80027d0 <vTaskDelete+0x134>)
 80026f2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d004      	beq.n	8002706 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	3318      	adds	r3, #24
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fe3d 	bl	8002380 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002706:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <vTaskDelete+0x138>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3301      	adds	r3, #1
 800270c:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <vTaskDelete+0x138>)
 800270e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002710:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <vTaskDelete+0x12c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	429a      	cmp	r2, r3
 8002718:	d118      	bne.n	800274c <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3304      	adds	r3, #4
 800271e:	4619      	mov	r1, r3
 8002720:	482d      	ldr	r0, [pc, #180]	; (80027d8 <vTaskDelete+0x13c>)
 8002722:	f7ff fdd0 	bl	80022c6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <vTaskDelete+0x140>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	3301      	adds	r3, #1
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <vTaskDelete+0x140>)
 800272e:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	f003 fa52 	bl	8005bdc <SEGGER_SYSVIEW_ShrinkId>
 8002738:	4603      	mov	r3, r0
 800273a:	4619      	mov	r1, r3
 800273c:	2022      	movs	r0, #34	; 0x22
 800273e:	f002 fc9f 	bl	8005080 <SEGGER_SYSVIEW_RecordU32>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	4618      	mov	r0, r3
 8002746:	f001 fb5f 	bl	8003e08 <SYSVIEW_DeleteTask>
 800274a:	e016      	b.n	800277a <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800274c:	4b24      	ldr	r3, [pc, #144]	; (80027e0 <vTaskDelete+0x144>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	3b01      	subs	r3, #1
 8002752:	4a23      	ldr	r2, [pc, #140]	; (80027e0 <vTaskDelete+0x144>)
 8002754:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fa3f 	bl	8005bdc <SEGGER_SYSVIEW_ShrinkId>
 800275e:	4603      	mov	r3, r0
 8002760:	4619      	mov	r1, r3
 8002762:	2022      	movs	r0, #34	; 0x22
 8002764:	f002 fc8c 	bl	8005080 <SEGGER_SYSVIEW_RecordU32>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4618      	mov	r0, r3
 800276c:	f001 fb4c 	bl	8003e08 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fb3d 	bl	8002df0 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002776:	f000 fb4b 	bl	8002e10 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800277a:	f000 ff33 	bl	80035e4 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <vTaskDelete+0x148>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d01b      	beq.n	80027be <vTaskDelete+0x122>
        {
            if( pxTCB == pxCurrentTCB )
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <vTaskDelete+0x12c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d116      	bne.n	80027be <vTaskDelete+0x122>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <vTaskDelete+0x14c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00a      	beq.n	80027ae <vTaskDelete+0x112>
        __asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	60bb      	str	r3, [r7, #8]
    }
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80027ae:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <vTaskDelete+0x150>)
 80027b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000008c 	.word	0x2000008c
 80027cc:	20000090 	.word	0x20000090
 80027d0:	2000016c 	.word	0x2000016c
 80027d4:	20000180 	.word	0x20000180
 80027d8:	20000138 	.word	0x20000138
 80027dc:	2000014c 	.word	0x2000014c
 80027e0:	20000164 	.word	0x20000164
 80027e4:	20000170 	.word	0x20000170
 80027e8:	2000018c 	.word	0x2000018c
 80027ec:	e000ed04 	.word	0xe000ed04

080027f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01b      	beq.n	800283a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002802:	4b15      	ldr	r3, [pc, #84]	; (8002858 <vTaskDelay+0x68>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00a      	beq.n	8002820 <vTaskDelay+0x30>
        __asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	60bb      	str	r3, [r7, #8]
    }
 800281c:	bf00      	nop
 800281e:	e7fe      	b.n	800281e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002820:	f000 f87a 	bl	8002918 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	2023      	movs	r0, #35	; 0x23
 8002828:	f002 fc2a 	bl	8005080 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800282c:	2100      	movs	r1, #0
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fc84 	bl	800313c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002834:	f000 f87e 	bl	8002934 <xTaskResumeAll>
 8002838:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d107      	bne.n	8002850 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <vTaskDelay+0x6c>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002850:	bf00      	nop
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	2000018c 	.word	0x2000018c
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <vTaskStartScheduler+0x98>)
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	2300      	movs	r3, #0
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2300      	movs	r3, #0
 8002870:	2282      	movs	r2, #130	; 0x82
 8002872:	4922      	ldr	r1, [pc, #136]	; (80028fc <vTaskStartScheduler+0x9c>)
 8002874:	4822      	ldr	r0, [pc, #136]	; (8002900 <vTaskStartScheduler+0xa0>)
 8002876:	f7ff fdad 	bl	80023d4 <xTaskCreate>
 800287a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d124      	bne.n	80028cc <vTaskStartScheduler+0x6c>
        __asm volatile
 8002882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	60bb      	str	r3, [r7, #8]
    }
 8002894:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <vTaskStartScheduler+0xa4>)
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <vTaskStartScheduler+0xa8>)
 80028a0:	2201      	movs	r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028a4:	4b19      	ldr	r3, [pc, #100]	; (800290c <vTaskStartScheduler+0xac>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80028aa:	4b19      	ldr	r3, [pc, #100]	; (8002910 <vTaskStartScheduler+0xb0>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <vTaskStartScheduler+0x98>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d102      	bne.n	80028bc <vTaskStartScheduler+0x5c>
 80028b6:	f003 f84f 	bl	8005958 <SEGGER_SYSVIEW_OnIdle>
 80028ba:	e004      	b.n	80028c6 <vTaskStartScheduler+0x66>
 80028bc:	4b14      	ldr	r3, [pc, #80]	; (8002910 <vTaskStartScheduler+0xb0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f003 f8a7 	bl	8005a14 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80028c6:	f000 fd3d 	bl	8003344 <xPortStartScheduler>
 80028ca:	e00e      	b.n	80028ea <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d10a      	bne.n	80028ea <vTaskStartScheduler+0x8a>
        __asm volatile
 80028d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d8:	f383 8811 	msr	BASEPRI, r3
 80028dc:	f3bf 8f6f 	isb	sy
 80028e0:	f3bf 8f4f 	dsb	sy
 80028e4:	607b      	str	r3, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	e7fe      	b.n	80028e8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <vTaskStartScheduler+0xb4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
}
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000188 	.word	0x20000188
 80028fc:	08005fd8 	.word	0x08005fd8
 8002900:	08002ce5 	.word	0x08002ce5
 8002904:	20000184 	.word	0x20000184
 8002908:	20000170 	.word	0x20000170
 800290c:	20000168 	.word	0x20000168
 8002910:	2000008c 	.word	0x2000008c
 8002914:	20000008 	.word	0x20000008

08002918 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <vTaskSuspendAll+0x18>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	4a03      	ldr	r2, [pc, #12]	; (8002930 <vTaskSuspendAll+0x18>)
 8002924:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002926:	bf00      	nop
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	2000018c 	.word	0x2000018c

08002934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800293e:	2300      	movs	r3, #0
 8002940:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <xTaskResumeAll+0x11c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <xTaskResumeAll+0x2c>
        __asm volatile
 800294a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294e:	f383 8811 	msr	BASEPRI, r3
 8002952:	f3bf 8f6f 	isb	sy
 8002956:	f3bf 8f4f 	dsb	sy
 800295a:	603b      	str	r3, [r7, #0]
    }
 800295c:	bf00      	nop
 800295e:	e7fe      	b.n	800295e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002960:	f000 fe10 	bl	8003584 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002964:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <xTaskResumeAll+0x11c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <xTaskResumeAll+0x11c>)
 800296c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800296e:	4b38      	ldr	r3, [pc, #224]	; (8002a50 <xTaskResumeAll+0x11c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d165      	bne.n	8002a42 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <xTaskResumeAll+0x120>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d061      	beq.n	8002a42 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800297e:	e032      	b.n	80029e6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <xTaskResumeAll+0x124>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3318      	adds	r3, #24
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fcf7 	bl	8002380 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fcf2 	bl	8002380 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 f87a 	bl	8005a98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	2201      	movs	r2, #1
 80029aa:	409a      	lsls	r2, r3
 80029ac:	4b2b      	ldr	r3, [pc, #172]	; (8002a5c <xTaskResumeAll+0x128>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <xTaskResumeAll+0x128>)
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a27      	ldr	r2, [pc, #156]	; (8002a60 <xTaskResumeAll+0x12c>)
 80029c4:	441a      	add	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3304      	adds	r3, #4
 80029ca:	4619      	mov	r1, r3
 80029cc:	4610      	mov	r0, r2
 80029ce:	f7ff fc7a 	bl	80022c6 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d6:	4b23      	ldr	r3, [pc, #140]	; (8002a64 <xTaskResumeAll+0x130>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d302      	bcc.n	80029e6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80029e0:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <xTaskResumeAll+0x134>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029e6:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <xTaskResumeAll+0x124>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1c8      	bne.n	8002980 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80029f4:	f000 fa0c 	bl	8002e10 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <xTaskResumeAll+0x138>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002a04:	f000 f848 	bl	8002a98 <xTaskIncrementTick>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <xTaskResumeAll+0x134>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1f1      	bne.n	8002a04 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <xTaskResumeAll+0x138>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <xTaskResumeAll+0x134>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <xTaskResumeAll+0x13c>)
 8002a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002a42:	f000 fdcf 	bl	80035e4 <vPortExitCritical>

    return xAlreadyYielded;
 8002a46:	68bb      	ldr	r3, [r7, #8]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	2000018c 	.word	0x2000018c
 8002a54:	20000164 	.word	0x20000164
 8002a58:	20000124 	.word	0x20000124
 8002a5c:	2000016c 	.word	0x2000016c
 8002a60:	20000090 	.word	0x20000090
 8002a64:	2000008c 	.word	0x2000008c
 8002a68:	20000178 	.word	0x20000178
 8002a6c:	20000174 	.word	0x20000174
 8002a70:	e000ed04 	.word	0xe000ed04

08002a74 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a7a:	f000 fe6f 	bl	800375c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <xTaskGetTickCountFromISR+0x20>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002a88:	683b      	ldr	r3, [r7, #0]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000168 	.word	0x20000168

08002a98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa2:	4b50      	ldr	r3, [pc, #320]	; (8002be4 <xTaskIncrementTick+0x14c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	f040 8092 	bne.w	8002bd0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002aac:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <xTaskIncrementTick+0x150>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002ab4:	4a4c      	ldr	r2, [pc, #304]	; (8002be8 <xTaskIncrementTick+0x150>)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d120      	bne.n	8002b02 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ac0:	4b4a      	ldr	r3, [pc, #296]	; (8002bec <xTaskIncrementTick+0x154>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <xTaskIncrementTick+0x48>
        __asm volatile
 8002aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ace:	f383 8811 	msr	BASEPRI, r3
 8002ad2:	f3bf 8f6f 	isb	sy
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	603b      	str	r3, [r7, #0]
    }
 8002adc:	bf00      	nop
 8002ade:	e7fe      	b.n	8002ade <xTaskIncrementTick+0x46>
 8002ae0:	4b42      	ldr	r3, [pc, #264]	; (8002bec <xTaskIncrementTick+0x154>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	4b42      	ldr	r3, [pc, #264]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a40      	ldr	r2, [pc, #256]	; (8002bec <xTaskIncrementTick+0x154>)
 8002aec:	6013      	str	r3, [r2, #0]
 8002aee:	4a40      	ldr	r2, [pc, #256]	; (8002bf0 <xTaskIncrementTick+0x158>)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b3f      	ldr	r3, [pc, #252]	; (8002bf4 <xTaskIncrementTick+0x15c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	3301      	adds	r3, #1
 8002afa:	4a3e      	ldr	r2, [pc, #248]	; (8002bf4 <xTaskIncrementTick+0x15c>)
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	f000 f987 	bl	8002e10 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b02:	4b3d      	ldr	r3, [pc, #244]	; (8002bf8 <xTaskIncrementTick+0x160>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d34c      	bcc.n	8002ba6 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <xTaskIncrementTick+0x154>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d104      	bne.n	8002b20 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b16:	4b38      	ldr	r3, [pc, #224]	; (8002bf8 <xTaskIncrementTick+0x160>)
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	601a      	str	r2, [r3, #0]
                    break;
 8002b1e:	e042      	b.n	8002ba6 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b20:	4b32      	ldr	r3, [pc, #200]	; (8002bec <xTaskIncrementTick+0x154>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d203      	bcs.n	8002b40 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b38:	4a2f      	ldr	r2, [pc, #188]	; (8002bf8 <xTaskIncrementTick+0x160>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b3e:	e032      	b.n	8002ba6 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	3304      	adds	r3, #4
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fc1b 	bl	8002380 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d004      	beq.n	8002b5c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3318      	adds	r3, #24
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fc12 	bl	8002380 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f002 ff9a 	bl	8005a98 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	2201      	movs	r2, #1
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <xTaskIncrementTick+0x164>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <xTaskIncrementTick+0x164>)
 8002b74:	6013      	str	r3, [r2, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <xTaskIncrementTick+0x168>)
 8002b84:	441a      	add	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7ff fb9a 	bl	80022c6 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <xTaskIncrementTick+0x16c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3b5      	bcc.n	8002b0c <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ba4:	e7b2      	b.n	8002b0c <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <xTaskIncrementTick+0x16c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bac:	4914      	ldr	r1, [pc, #80]	; (8002c00 <xTaskIncrementTick+0x168>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d901      	bls.n	8002bc2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <xTaskIncrementTick+0x170>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d007      	beq.n	8002bda <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e004      	b.n	8002bda <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <xTaskIncrementTick+0x174>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a0d      	ldr	r2, [pc, #52]	; (8002c0c <xTaskIncrementTick+0x174>)
 8002bd8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002bda:	697b      	ldr	r3, [r7, #20]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	2000018c 	.word	0x2000018c
 8002be8:	20000168 	.word	0x20000168
 8002bec:	2000011c 	.word	0x2000011c
 8002bf0:	20000120 	.word	0x20000120
 8002bf4:	2000017c 	.word	0x2000017c
 8002bf8:	20000184 	.word	0x20000184
 8002bfc:	2000016c 	.word	0x2000016c
 8002c00:	20000090 	.word	0x20000090
 8002c04:	2000008c 	.word	0x2000008c
 8002c08:	20000178 	.word	0x20000178
 8002c0c:	20000174 	.word	0x20000174

08002c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c16:	4b2d      	ldr	r3, [pc, #180]	; (8002ccc <vTaskSwitchContext+0xbc>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <vTaskSwitchContext+0xc0>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c24:	e04d      	b.n	8002cc2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002c26:	4b2a      	ldr	r3, [pc, #168]	; (8002cd0 <vTaskSwitchContext+0xc0>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c2c:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <vTaskSwitchContext+0xc4>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c3a:	7afb      	ldrb	r3, [r7, #11]
 8002c3c:	f1c3 031f 	rsb	r3, r3, #31
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	4925      	ldr	r1, [pc, #148]	; (8002cd8 <vTaskSwitchContext+0xc8>)
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4613      	mov	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5a:	f383 8811 	msr	BASEPRI, r3
 8002c5e:	f3bf 8f6f 	isb	sy
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	607b      	str	r3, [r7, #4]
    }
 8002c68:	bf00      	nop
 8002c6a:	e7fe      	b.n	8002c6a <vTaskSwitchContext+0x5a>
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <vTaskSwitchContext+0xc8>)
 8002c78:	4413      	add	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d104      	bne.n	8002c9c <vTaskSwitchContext+0x8c>
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <vTaskSwitchContext+0xcc>)
 8002ca4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <vTaskSwitchContext+0xcc>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <vTaskSwitchContext+0xd0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d102      	bne.n	8002cb8 <vTaskSwitchContext+0xa8>
 8002cb2:	f002 fe51 	bl	8005958 <SEGGER_SYSVIEW_OnIdle>
}
 8002cb6:	e004      	b.n	8002cc2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <vTaskSwitchContext+0xcc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f002 fea9 	bl	8005a14 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000018c 	.word	0x2000018c
 8002cd0:	20000178 	.word	0x20000178
 8002cd4:	2000016c 	.word	0x2000016c
 8002cd8:	20000090 	.word	0x20000090
 8002cdc:	2000008c 	.word	0x2000008c
 8002ce0:	20000188 	.word	0x20000188

08002ce4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002cec:	f000 f852 	bl	8002d94 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <prvIdleTask+0x28>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d9f9      	bls.n	8002cec <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002cf8:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <prvIdleTask+0x2c>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d08:	e7f0      	b.n	8002cec <prvIdleTask+0x8>
 8002d0a:	bf00      	nop
 8002d0c:	20000090 	.word	0x20000090
 8002d10:	e000ed04 	.word	0xe000ed04

08002d14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	e00c      	b.n	8002d3a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4a12      	ldr	r2, [pc, #72]	; (8002d74 <prvInitialiseTaskLists+0x60>)
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fa9c 	bl	800226c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3301      	adds	r3, #1
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d9ef      	bls.n	8002d20 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d40:	480d      	ldr	r0, [pc, #52]	; (8002d78 <prvInitialiseTaskLists+0x64>)
 8002d42:	f7ff fa93 	bl	800226c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d46:	480d      	ldr	r0, [pc, #52]	; (8002d7c <prvInitialiseTaskLists+0x68>)
 8002d48:	f7ff fa90 	bl	800226c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <prvInitialiseTaskLists+0x6c>)
 8002d4e:	f7ff fa8d 	bl	800226c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d52:	480c      	ldr	r0, [pc, #48]	; (8002d84 <prvInitialiseTaskLists+0x70>)
 8002d54:	f7ff fa8a 	bl	800226c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d58:	480b      	ldr	r0, [pc, #44]	; (8002d88 <prvInitialiseTaskLists+0x74>)
 8002d5a:	f7ff fa87 	bl	800226c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <prvInitialiseTaskLists+0x78>)
 8002d60:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <prvInitialiseTaskLists+0x64>)
 8002d62:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <prvInitialiseTaskLists+0x7c>)
 8002d66:	4a05      	ldr	r2, [pc, #20]	; (8002d7c <prvInitialiseTaskLists+0x68>)
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000090 	.word	0x20000090
 8002d78:	200000f4 	.word	0x200000f4
 8002d7c:	20000108 	.word	0x20000108
 8002d80:	20000124 	.word	0x20000124
 8002d84:	20000138 	.word	0x20000138
 8002d88:	20000150 	.word	0x20000150
 8002d8c:	2000011c 	.word	0x2000011c
 8002d90:	20000120 	.word	0x20000120

08002d94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d9a:	e019      	b.n	8002dd0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002d9c:	f000 fbf2 	bl	8003584 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <prvCheckTasksWaitingTermination+0x50>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fae7 	bl	8002380 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002db2:	4b0d      	ldr	r3, [pc, #52]	; (8002de8 <prvCheckTasksWaitingTermination+0x54>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <prvCheckTasksWaitingTermination+0x54>)
 8002dba:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <prvCheckTasksWaitingTermination+0x58>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <prvCheckTasksWaitingTermination+0x58>)
 8002dc4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002dc6:	f000 fc0d 	bl	80035e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f810 	bl	8002df0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <prvCheckTasksWaitingTermination+0x58>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1e1      	bne.n	8002d9c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000138 	.word	0x20000138
 8002de8:	20000164 	.word	0x20000164
 8002dec:	2000014c 	.word	0x2000014c

08002df0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fdcd 	bl	800399c <vPortFree>
                vPortFree( pxTCB );
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 fdca 	bl	800399c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e14:	4b0a      	ldr	r3, [pc, #40]	; (8002e40 <prvResetNextTaskUnblockTime+0x30>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d104      	bne.n	8002e28 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <prvResetNextTaskUnblockTime+0x34>)
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295
 8002e24:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e26:	e005      	b.n	8002e34 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e28:	4b05      	ldr	r3, [pc, #20]	; (8002e40 <prvResetNextTaskUnblockTime+0x30>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <prvResetNextTaskUnblockTime+0x34>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	2000011c 	.word	0x2000011c
 8002e44:	20000184 	.word	0x20000184

08002e48 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	613b      	str	r3, [r7, #16]
    }
 8002e6e:	bf00      	nop
 8002e70:	e7fe      	b.n	8002e70 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8002e72:	f000 fb87 	bl	8003584 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002e76:	4b36      	ldr	r3, [pc, #216]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3354      	adds	r3, #84	; 0x54
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d022      	beq.n	8002ece <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002e88:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	3214      	adds	r2, #20
 8002e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	43d2      	mvns	r2, r2
 8002e98:	4011      	ands	r1, r2
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	3214      	adds	r2, #20
 8002e9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002ea2:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3354      	adds	r3, #84	; 0x54
 8002eac:	2201      	movs	r2, #1
 8002eae:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	6a38      	ldr	r0, [r7, #32]
 8002eba:	f000 f93f 	bl	800313c <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8002ebe:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <xTaskGenericNotifyWait+0x10c>)
 8002ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002ece:	f000 fb89 	bl	80035e4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8002ed2:	f000 fb57 	bl	8003584 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	4613      	mov	r3, r2
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	2040      	movs	r0, #64	; 0x40
 8002ee4:	f002 f962 	bl	80051ac <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	3214      	adds	r2, #20
 8002ef6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	3354      	adds	r3, #84	; 0x54
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d002      	beq.n	8002f16 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	e00e      	b.n	8002f34 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	3214      	adds	r2, #20
 8002f1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	43d2      	mvns	r2, r2
 8002f26:	4011      	ands	r1, r2
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	3214      	adds	r2, #20
 8002f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002f34:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <xTaskGenericNotifyWait+0x108>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3354      	adds	r3, #84	; 0x54
 8002f3e:	2200      	movs	r2, #0
 8002f40:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8002f42:	f000 fb4f 	bl	80035e4 <vPortExitCritical>

        return xReturn;
 8002f46:	697b      	ldr	r3, [r7, #20]
    }
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	2000008c 	.word	0x2000008c
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08e      	sub	sp, #56	; 0x38
 8002f5c:	af02      	add	r7, sp, #8
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002f66:	2301      	movs	r3, #1
 8002f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <xTaskGenericNotify+0x2e>
        __asm volatile
 8002f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f74:	f383 8811 	msr	BASEPRI, r3
 8002f78:	f3bf 8f6f 	isb	sy
 8002f7c:	f3bf 8f4f 	dsb	sy
 8002f80:	623b      	str	r3, [r7, #32]
    }
 8002f82:	bf00      	nop
 8002f84:	e7fe      	b.n	8002f84 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <xTaskGenericNotify+0x4a>
        __asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	61fb      	str	r3, [r7, #28]
    }
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8002fa6:	f000 faed 	bl	8003584 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8002faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d006      	beq.n	8002fbe <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	3214      	adds	r2, #20
 8002fb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3354      	adds	r3, #84	; 0x54
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	3354      	adds	r3, #84	; 0x54
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d83b      	bhi.n	8003056 <xTaskGenericNotify+0xfe>
 8002fde:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <xTaskGenericNotify+0x8c>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08003075 	.word	0x08003075
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003015 	.word	0x08003015
 8002ff0:	0800302d 	.word	0x0800302d
 8002ff4:	0800303b 	.word	0x0800303b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	3214      	adds	r2, #20
 8002ffe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	ea42 0103 	orr.w	r1, r2, r3
 8003008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	3214      	adds	r2, #20
 800300e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003012:	e032      	b.n	800307a <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	3214      	adds	r2, #20
 800301a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800301e:	1c59      	adds	r1, r3, #1
 8003020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	3214      	adds	r2, #20
 8003026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800302a:	e026      	b.n	800307a <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800302c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	3214      	adds	r2, #20
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003038:	e01f      	b.n	800307a <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800303a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800303e:	2b02      	cmp	r3, #2
 8003040:	d006      	beq.n	8003050 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	3214      	adds	r2, #20
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800304e:	e014      	b.n	800307a <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003050:	2300      	movs	r3, #0
 8003052:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8003054:	e011      	b.n	800307a <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003056:	4b34      	ldr	r3, [pc, #208]	; (8003128 <xTaskGenericNotify+0x1d0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <xTaskGenericNotify+0x120>
        __asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	61bb      	str	r3, [r7, #24]
    }
 8003070:	bf00      	nop
 8003072:	e7fe      	b.n	8003072 <xTaskGenericNotify+0x11a>
                    break;
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <xTaskGenericNotify+0x122>

                    break;
 8003078:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	4618      	mov	r0, r3
 800307e:	f002 fdad 	bl	8005bdc <SEGGER_SYSVIEW_ShrinkId>
 8003082:	4601      	mov	r1, r0
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	9300      	str	r3, [sp, #0]
 800308a:	4613      	mov	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	203e      	movs	r0, #62	; 0x3e
 8003090:	f002 f88c 	bl	80051ac <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003098:	2b01      	cmp	r3, #1
 800309a:	d13d      	bne.n	8003118 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	3304      	adds	r3, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f96d 	bl	8002380 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 80030a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fcf5 	bl	8005a98 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	2201      	movs	r2, #1
 80030b4:	409a      	lsls	r2, r3
 80030b6:	4b1d      	ldr	r3, [pc, #116]	; (800312c <xTaskGenericNotify+0x1d4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	4a1b      	ldr	r2, [pc, #108]	; (800312c <xTaskGenericNotify+0x1d4>)
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <xTaskGenericNotify+0x1d8>)
 80030ce:	441a      	add	r2, r3
 80030d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f7ff f8f5 	bl	80022c6 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <xTaskGenericNotify+0x1a2>
        __asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	617b      	str	r3, [r7, #20]
    }
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <xTaskGenericNotify+0x1dc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	429a      	cmp	r2, r3
 8003106:	d907      	bls.n	8003118 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003108:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <xTaskGenericNotify+0x1e0>)
 800310a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	f3bf 8f4f 	dsb	sy
 8003114:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003118:	f000 fa64 	bl	80035e4 <vPortExitCritical>

        return xReturn;
 800311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800311e:	4618      	mov	r0, r3
 8003120:	3730      	adds	r7, #48	; 0x30
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000168 	.word	0x20000168
 800312c:	2000016c 	.word	0x2000016c
 8003130:	20000090 	.word	0x20000090
 8003134:	2000008c 	.word	0x2000008c
 8003138:	e000ed04 	.word	0xe000ed04

0800313c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003146:	4b32      	ldr	r3, [pc, #200]	; (8003210 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800314c:	4b31      	ldr	r3, [pc, #196]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3304      	adds	r3, #4
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff f914 	bl	8002380 <uxListRemove>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10b      	bne.n	8003176 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800315e:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	2201      	movs	r2, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	4b2a      	ldr	r3, [pc, #168]	; (8003218 <prvAddCurrentTaskToDelayedList+0xdc>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4013      	ands	r3, r2
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003174:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d110      	bne.n	80031a0 <prvAddCurrentTaskToDelayedList+0x64>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003184:	4b23      	ldr	r3, [pc, #140]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	211b      	movs	r1, #27
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fcc6 	bl	8005b1c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003190:	4b20      	ldr	r3, [pc, #128]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	3304      	adds	r3, #4
 8003196:	4619      	mov	r1, r3
 8003198:	4820      	ldr	r0, [pc, #128]	; (800321c <prvAddCurrentTaskToDelayedList+0xe0>)
 800319a:	f7ff f894 	bl	80022c6 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800319e:	e032      	b.n	8003206 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4413      	add	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68ba      	ldr	r2, [r7, #8]
 80031ae:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d20f      	bcs.n	80031d8 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80031b8:	4b16      	ldr	r3, [pc, #88]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2104      	movs	r1, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fcac 	bl	8005b1c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031c4:	4b16      	ldr	r3, [pc, #88]	; (8003220 <prvAddCurrentTaskToDelayedList+0xe4>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b12      	ldr	r3, [pc, #72]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3304      	adds	r3, #4
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f7ff f89c 	bl	800230e <vListInsert>
}
 80031d6:	e016      	b.n	8003206 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2104      	movs	r1, #4
 80031de:	4618      	mov	r0, r3
 80031e0:	f002 fc9c 	bl	8005b1c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <prvAddCurrentTaskToDelayedList+0xe8>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <prvAddCurrentTaskToDelayedList+0xd8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7ff f88c 	bl	800230e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <prvAddCurrentTaskToDelayedList+0xec>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d202      	bcs.n	8003206 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <prvAddCurrentTaskToDelayedList+0xec>)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6013      	str	r3, [r2, #0]
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000168 	.word	0x20000168
 8003214:	2000008c 	.word	0x2000008c
 8003218:	2000016c 	.word	0x2000016c
 800321c:	20000150 	.word	0x20000150
 8003220:	20000120 	.word	0x20000120
 8003224:	2000011c 	.word	0x2000011c
 8003228:	20000184 	.word	0x20000184

0800322c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b04      	subs	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003244:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3b04      	subs	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f023 0201 	bic.w	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b04      	subs	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <pxPortInitialiseStack+0x64>)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b14      	subs	r3, #20
 8003266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b04      	subs	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f06f 0202 	mvn.w	r2, #2
 800327a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3b20      	subs	r3, #32
 8003280:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	08003295 	.word	0x08003295

08003294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <prvTaskExitError+0x54>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d00a      	beq.n	80032be <prvTaskExitError+0x2a>
        __asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	60fb      	str	r3, [r7, #12]
    }
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <prvTaskExitError+0x28>
        __asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	60bb      	str	r3, [r7, #8]
    }
 80032d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80032d2:	bf00      	nop
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0fc      	beq.n	80032d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	2000000c 	.word	0x2000000c
 80032ec:	00000000 	.word	0x00000000

080032f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <pxCurrentTCBConst2>)
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	6808      	ldr	r0, [r1, #0]
 80032f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fa:	f380 8809 	msr	PSP, r0
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f380 8811 	msr	BASEPRI, r0
 800330a:	4770      	bx	lr
 800330c:	f3af 8000 	nop.w

08003310 <pxCurrentTCBConst2>:
 8003310:	2000008c 	.word	0x2000008c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop

08003318 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003318:	4808      	ldr	r0, [pc, #32]	; (800333c <prvPortStartFirstTask+0x24>)
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f380 8808 	msr	MSP, r0
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f380 8814 	msr	CONTROL, r0
 800332a:	b662      	cpsie	i
 800332c:	b661      	cpsie	f
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	df00      	svc	0
 8003338:	bf00      	nop
 800333a:	0000      	.short	0x0000
 800333c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop

08003344 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800334a:	4b46      	ldr	r3, [pc, #280]	; (8003464 <xPortStartScheduler+0x120>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a46      	ldr	r2, [pc, #280]	; (8003468 <xPortStartScheduler+0x124>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10a      	bne.n	800336a <xPortStartScheduler+0x26>
        __asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	613b      	str	r3, [r7, #16]
    }
 8003366:	bf00      	nop
 8003368:	e7fe      	b.n	8003368 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800336a:	4b3e      	ldr	r3, [pc, #248]	; (8003464 <xPortStartScheduler+0x120>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3f      	ldr	r2, [pc, #252]	; (800346c <xPortStartScheduler+0x128>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10a      	bne.n	800338a <xPortStartScheduler+0x46>
        __asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	60fb      	str	r3, [r7, #12]
    }
 8003386:	bf00      	nop
 8003388:	e7fe      	b.n	8003388 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800338a:	4b39      	ldr	r3, [pc, #228]	; (8003470 <xPortStartScheduler+0x12c>)
 800338c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <xPortStartScheduler+0x130>)
 80033b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033b2:	4b31      	ldr	r3, [pc, #196]	; (8003478 <xPortStartScheduler+0x134>)
 80033b4:	2207      	movs	r2, #7
 80033b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033b8:	e009      	b.n	80033ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80033ba:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <xPortStartScheduler+0x134>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3b01      	subs	r3, #1
 80033c0:	4a2d      	ldr	r2, [pc, #180]	; (8003478 <xPortStartScheduler+0x134>)
 80033c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ce:	78fb      	ldrb	r3, [r7, #3]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d0ef      	beq.n	80033ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <xPortStartScheduler+0x134>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1c3 0307 	rsb	r3, r3, #7
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d00a      	beq.n	80033fc <xPortStartScheduler+0xb8>
        __asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60bb      	str	r3, [r7, #8]
    }
 80033f8:	bf00      	nop
 80033fa:	e7fe      	b.n	80033fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <xPortStartScheduler+0x134>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <xPortStartScheduler+0x134>)
 8003404:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <xPortStartScheduler+0x134>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340e:	4a1a      	ldr	r2, [pc, #104]	; (8003478 <xPortStartScheduler+0x134>)
 8003410:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <xPortStartScheduler+0x138>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a17      	ldr	r2, [pc, #92]	; (800347c <xPortStartScheduler+0x138>)
 8003420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003424:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003426:	4b15      	ldr	r3, [pc, #84]	; (800347c <xPortStartScheduler+0x138>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <xPortStartScheduler+0x138>)
 800342c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003430:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003432:	f000 f963 	bl	80036fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <xPortStartScheduler+0x13c>)
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800343c:	f000 f982 	bl	8003744 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <xPortStartScheduler+0x140>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <xPortStartScheduler+0x140>)
 8003446:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800344a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800344c:	f7ff ff64 	bl	8003318 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003450:	f7ff fbde 	bl	8002c10 <vTaskSwitchContext>
    prvTaskExitError();
 8003454:	f7ff ff1e 	bl	8003294 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00
 8003468:	410fc271 	.word	0x410fc271
 800346c:	410fc270 	.word	0x410fc270
 8003470:	e000e400 	.word	0xe000e400
 8003474:	20000190 	.word	0x20000190
 8003478:	20000194 	.word	0x20000194
 800347c:	e000ed20 	.word	0xe000ed20
 8003480:	2000000c 	.word	0x2000000c
 8003484:	e000ef34 	.word	0xe000ef34

08003488 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003488:	b480      	push	{r7}
 800348a:	b087      	sub	sp, #28
 800348c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <vInitPrioGroupValue+0xe4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a37      	ldr	r2, [pc, #220]	; (8003570 <vInitPrioGroupValue+0xe8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d10a      	bne.n	80034ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	613b      	str	r3, [r7, #16]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80034ae:	4b2f      	ldr	r3, [pc, #188]	; (800356c <vInitPrioGroupValue+0xe4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a30      	ldr	r2, [pc, #192]	; (8003574 <vInitPrioGroupValue+0xec>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d10a      	bne.n	80034ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80034b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034bc:	f383 8811 	msr	BASEPRI, r3
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	60fb      	str	r3, [r7, #12]
    }
 80034ca:	bf00      	nop
 80034cc:	e7fe      	b.n	80034cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80034ce:	4b2a      	ldr	r3, [pc, #168]	; (8003578 <vInitPrioGroupValue+0xf0>)
 80034d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	22ff      	movs	r2, #255	; 0xff
 80034de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <vInitPrioGroupValue+0xf4>)
 80034f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <vInitPrioGroupValue+0xf8>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034fc:	e009      	b.n	8003512 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80034fe:	4b20      	ldr	r3, [pc, #128]	; (8003580 <vInitPrioGroupValue+0xf8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <vInitPrioGroupValue+0xf8>)
 8003506:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	b2db      	uxtb	r3, r3
 8003510:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d0ef      	beq.n	80034fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <vInitPrioGroupValue+0xf8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	d00a      	beq.n	8003540 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800352a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352e:	f383 8811 	msr	BASEPRI, r3
 8003532:	f3bf 8f6f 	isb	sy
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	60bb      	str	r3, [r7, #8]
    }
 800353c:	bf00      	nop
 800353e:	e7fe      	b.n	800353e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003540:	4b0f      	ldr	r3, [pc, #60]	; (8003580 <vInitPrioGroupValue+0xf8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	4a0e      	ldr	r2, [pc, #56]	; (8003580 <vInitPrioGroupValue+0xf8>)
 8003548:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <vInitPrioGroupValue+0xf8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003552:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <vInitPrioGroupValue+0xf8>)
 8003554:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	e000ed00 	.word	0xe000ed00
 8003570:	410fc271 	.word	0x410fc271
 8003574:	410fc270 	.word	0x410fc270
 8003578:	e000e400 	.word	0xe000e400
 800357c:	20000190 	.word	0x20000190
 8003580:	20000194 	.word	0x20000194

08003584 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
        __asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	607b      	str	r3, [r7, #4]
    }
 800359c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800359e:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <vPortEnterCritical+0x58>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3301      	adds	r3, #1
 80035a4:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <vPortEnterCritical+0x58>)
 80035a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <vPortEnterCritical+0x58>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10f      	bne.n	80035d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <vPortEnterCritical+0x5c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	603b      	str	r3, [r7, #0]
    }
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <vPortEnterCritical+0x4a>
    }
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	2000000c 	.word	0x2000000c
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80035ea:	4b12      	ldr	r3, [pc, #72]	; (8003634 <vPortExitCritical+0x50>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <vPortExitCritical+0x24>
        __asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	607b      	str	r3, [r7, #4]
    }
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <vPortExitCritical+0x50>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3b01      	subs	r3, #1
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <vPortExitCritical+0x50>)
 8003610:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <vPortExitCritical+0x50>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <vPortExitCritical+0x42>
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003624:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	2000000c 	.word	0x2000000c
	...

08003640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003640:	f3ef 8009 	mrs	r0, PSP
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <pxCurrentTCBConst>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	f01e 0f10 	tst.w	lr, #16
 8003650:	bf08      	it	eq
 8003652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365a:	6010      	str	r0, [r2, #0]
 800365c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003664:	f380 8811 	msr	BASEPRI, r0
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f7ff face 	bl	8002c10 <vTaskSwitchContext>
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f380 8811 	msr	BASEPRI, r0
 800367c:	bc09      	pop	{r0, r3}
 800367e:	6819      	ldr	r1, [r3, #0]
 8003680:	6808      	ldr	r0, [r1, #0]
 8003682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003686:	f01e 0f10 	tst.w	lr, #16
 800368a:	bf08      	it	eq
 800368c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003690:	f380 8809 	msr	PSP, r0
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	f3af 8000 	nop.w

080036a0 <pxCurrentTCBConst>:
 80036a0:	2000008c 	.word	0x2000008c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop

080036a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	607b      	str	r3, [r7, #4]
    }
 80036c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80036c2:	f002 f8cf 	bl	8005864 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80036c6:	f7ff f9e7 	bl	8002a98 <xTaskIncrementTick>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80036d0:	f002 f926 	bl	8005920 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80036d4:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <SysTick_Handler+0x50>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	e001      	b.n	80036e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80036de:	f002 f903 	bl	80058e8 <SEGGER_SYSVIEW_RecordExitISR>
 80036e2:	2300      	movs	r3, #0
 80036e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f383 8811 	msr	BASEPRI, r3
    }
 80036ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000ed04 	.word	0xe000ed04

080036fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <vPortSetupTimerInterrupt+0x34>)
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <vPortSetupTimerInterrupt+0x38>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800370c:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <vPortSetupTimerInterrupt+0x3c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0a      	ldr	r2, [pc, #40]	; (800373c <vPortSetupTimerInterrupt+0x40>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	099b      	lsrs	r3, r3, #6
 8003718:	4a09      	ldr	r2, [pc, #36]	; (8003740 <vPortSetupTimerInterrupt+0x44>)
 800371a:	3b01      	subs	r3, #1
 800371c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800371e:	4b04      	ldr	r3, [pc, #16]	; (8003730 <vPortSetupTimerInterrupt+0x34>)
 8003720:	2207      	movs	r2, #7
 8003722:	601a      	str	r2, [r3, #0]
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e010 	.word	0xe000e010
 8003734:	e000e018 	.word	0xe000e018
 8003738:	20000000 	.word	0x20000000
 800373c:	10624dd3 	.word	0x10624dd3
 8003740:	e000e014 	.word	0xe000e014

08003744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003744:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003754 <vPortEnableVFP+0x10>
 8003748:	6801      	ldr	r1, [r0, #0]
 800374a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800374e:	6001      	str	r1, [r0, #0]
 8003750:	4770      	bx	lr
 8003752:	0000      	.short	0x0000
 8003754:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop

0800375c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003762:	f3ef 8305 	mrs	r3, IPSR
 8003766:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b0f      	cmp	r3, #15
 800376c:	d914      	bls.n	8003798 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800376e:	4a17      	ldr	r2, [pc, #92]	; (80037cc <vPortValidateInterruptPriority+0x70>)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003778:	4b15      	ldr	r3, [pc, #84]	; (80037d0 <vPortValidateInterruptPriority+0x74>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	7afa      	ldrb	r2, [r7, #11]
 800377e:	429a      	cmp	r2, r3
 8003780:	d20a      	bcs.n	8003798 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	607b      	str	r3, [r7, #4]
    }
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003798:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <vPortValidateInterruptPriority+0x78>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80037a0:	4b0d      	ldr	r3, [pc, #52]	; (80037d8 <vPortValidateInterruptPriority+0x7c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d90a      	bls.n	80037be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	603b      	str	r3, [r7, #0]
    }
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <vPortValidateInterruptPriority+0x60>
    }
 80037be:	bf00      	nop
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000e3f0 	.word	0xe000e3f0
 80037d0:	20000190 	.word	0x20000190
 80037d4:	e000ed0c 	.word	0xe000ed0c
 80037d8:	20000194 	.word	0x20000194

080037dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80037e8:	f7ff f896 	bl	8002918 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037ec:	4b65      	ldr	r3, [pc, #404]	; (8003984 <pvPortMalloc+0x1a8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037f4:	f000 f934 	bl	8003a60 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037f8:	4b63      	ldr	r3, [pc, #396]	; (8003988 <pvPortMalloc+0x1ac>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4013      	ands	r3, r2
 8003800:	2b00      	cmp	r3, #0
 8003802:	f040 80a7 	bne.w	8003954 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02d      	beq.n	8003868 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800380c:	2208      	movs	r2, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d227      	bcs.n	8003868 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003818:	2208      	movs	r2, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4413      	add	r3, r2
 800381e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	2b00      	cmp	r3, #0
 8003828:	d021      	beq.n	800386e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f023 0307 	bic.w	r3, r3, #7
 8003830:	3308      	adds	r3, #8
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	429a      	cmp	r2, r3
 8003836:	d214      	bcs.n	8003862 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	3308      	adds	r3, #8
 8003840:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	2b00      	cmp	r3, #0
 800384a:	d010      	beq.n	800386e <pvPortMalloc+0x92>
        __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	617b      	str	r3, [r7, #20]
    }
 800385e:	bf00      	nop
 8003860:	e7fe      	b.n	8003860 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003866:	e002      	b.n	800386e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	e000      	b.n	8003870 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800386e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d06e      	beq.n	8003954 <pvPortMalloc+0x178>
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <pvPortMalloc+0x1b0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d869      	bhi.n	8003954 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003880:	4b43      	ldr	r3, [pc, #268]	; (8003990 <pvPortMalloc+0x1b4>)
 8003882:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003884:	4b42      	ldr	r3, [pc, #264]	; (8003990 <pvPortMalloc+0x1b4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800388a:	e004      	b.n	8003896 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	429a      	cmp	r2, r3
 800389e:	d903      	bls.n	80038a8 <pvPortMalloc+0xcc>
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1f1      	bne.n	800388c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80038a8:	4b36      	ldr	r3, [pc, #216]	; (8003984 <pvPortMalloc+0x1a8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d050      	beq.n	8003954 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2208      	movs	r2, #8
 80038b8:	4413      	add	r3, r2
 80038ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	2308      	movs	r3, #8
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d91f      	bls.n	8003914 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <pvPortMalloc+0x120>
        __asm volatile
 80038e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	613b      	str	r3, [r7, #16]
    }
 80038f8:	bf00      	nop
 80038fa:	e7fe      	b.n	80038fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	1ad2      	subs	r2, r2, r3
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800390e:	69b8      	ldr	r0, [r7, #24]
 8003910:	f000 f908 	bl	8003b24 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003914:	4b1d      	ldr	r3, [pc, #116]	; (800398c <pvPortMalloc+0x1b0>)
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <pvPortMalloc+0x1b0>)
 8003920:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003922:	4b1a      	ldr	r3, [pc, #104]	; (800398c <pvPortMalloc+0x1b0>)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <pvPortMalloc+0x1b8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d203      	bcs.n	8003936 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <pvPortMalloc+0x1b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <pvPortMalloc+0x1b8>)
 8003934:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	4b13      	ldr	r3, [pc, #76]	; (8003988 <pvPortMalloc+0x1ac>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	431a      	orrs	r2, r3
 8003940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003942:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800394a:	4b13      	ldr	r3, [pc, #76]	; (8003998 <pvPortMalloc+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3301      	adds	r3, #1
 8003950:	4a11      	ldr	r2, [pc, #68]	; (8003998 <pvPortMalloc+0x1bc>)
 8003952:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003954:	f7fe ffee 	bl	8002934 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <pvPortMalloc+0x19c>
        __asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60fb      	str	r3, [r7, #12]
    }
 8003974:	bf00      	nop
 8003976:	e7fe      	b.n	8003976 <pvPortMalloc+0x19a>
    return pvReturn;
 8003978:	69fb      	ldr	r3, [r7, #28]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3728      	adds	r7, #40	; 0x28
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20012da0 	.word	0x20012da0
 8003988:	20012db4 	.word	0x20012db4
 800398c:	20012da4 	.word	0x20012da4
 8003990:	20012d98 	.word	0x20012d98
 8003994:	20012da8 	.word	0x20012da8
 8003998:	20012dac 	.word	0x20012dac

0800399c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d04d      	beq.n	8003a4a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80039ae:	2308      	movs	r3, #8
 80039b0:	425b      	negs	r3, r3
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4413      	add	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <vPortFree+0xb8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <vPortFree+0x44>
        __asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	60fb      	str	r3, [r7, #12]
    }
 80039dc:	bf00      	nop
 80039de:	e7fe      	b.n	80039de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <vPortFree+0x62>
        __asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	60bb      	str	r3, [r7, #8]
    }
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <vPortFree+0xb8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d01e      	beq.n	8003a4a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11a      	bne.n	8003a4a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	4b0e      	ldr	r3, [pc, #56]	; (8003a54 <vPortFree+0xb8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003a24:	f7fe ff78 	bl	8002918 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <vPortFree+0xbc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4413      	add	r3, r2
 8003a32:	4a09      	ldr	r2, [pc, #36]	; (8003a58 <vPortFree+0xbc>)
 8003a34:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a36:	6938      	ldr	r0, [r7, #16]
 8003a38:	f000 f874 	bl	8003b24 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a3c:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <vPortFree+0xc0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	3301      	adds	r3, #1
 8003a42:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <vPortFree+0xc0>)
 8003a44:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a46:	f7fe ff75 	bl	8002934 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	20012db4 	.word	0x20012db4
 8003a58:	20012da4 	.word	0x20012da4
 8003a5c:	20012db0 	.word	0x20012db0

08003a60 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a66:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003a6a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a6c:	4b27      	ldr	r3, [pc, #156]	; (8003b0c <prvHeapInit+0xac>)
 8003a6e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3307      	adds	r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0307 	bic.w	r3, r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <prvHeapInit+0xac>)
 8003a90:	4413      	add	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a98:	4a1d      	ldr	r2, [pc, #116]	; (8003b10 <prvHeapInit+0xb0>)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <prvHeapInit+0xb0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003aac:	2208      	movs	r2, #8
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <prvHeapInit+0xb4>)
 8003ac0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ac2:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <prvHeapInit+0xb4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003aca:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <prvHeapInit+0xb4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ae0:	4b0c      	ldr	r3, [pc, #48]	; (8003b14 <prvHeapInit+0xb4>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <prvHeapInit+0xb8>)
 8003aee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <prvHeapInit+0xbc>)
 8003af6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <prvHeapInit+0xc0>)
 8003afa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003afe:	601a      	str	r2, [r3, #0]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	20000198 	.word	0x20000198
 8003b10:	20012d98 	.word	0x20012d98
 8003b14:	20012da0 	.word	0x20012da0
 8003b18:	20012da8 	.word	0x20012da8
 8003b1c:	20012da4 	.word	0x20012da4
 8003b20:	20012db4 	.word	0x20012db4

08003b24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b2c:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <prvInsertBlockIntoFreeList+0xac>)
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e002      	b.n	8003b38 <prvInsertBlockIntoFreeList+0x14>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d8f7      	bhi.n	8003b32 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d108      	bne.n	8003b66 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d118      	bne.n	8003bac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d00d      	beq.n	8003ba2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e008      	b.n	8003bb4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <prvInsertBlockIntoFreeList+0xb0>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	e003      	b.n	8003bb4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d002      	beq.n	8003bc2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20012d98 	.word	0x20012d98
 8003bd4:	20012da0 	.word	0x20012da0

08003bd8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003bdc:	4803      	ldr	r0, [pc, #12]	; (8003bec <_cbSendSystemDesc+0x14>)
 8003bde:	f001 fdeb 	bl	80057b8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003be2:	4803      	ldr	r0, [pc, #12]	; (8003bf0 <_cbSendSystemDesc+0x18>)
 8003be4:	f001 fde8 	bl	80057b8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08005fe0 	.word	0x08005fe0
 8003bf0:	08006024 	.word	0x08006024

08003bf4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <SEGGER_SYSVIEW_Conf+0x20>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <SEGGER_SYSVIEW_Conf+0x20>)
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <SEGGER_SYSVIEW_Conf+0x24>)
 8003c02:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <SEGGER_SYSVIEW_Conf+0x28>)
 8003c04:	f001 f9ca 	bl	8004f9c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003c0c:	f001 fa0a 	bl	8005024 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20000000 	.word	0x20000000
 8003c18:	08003bd9 	.word	0x08003bd9
 8003c1c:	080060c4 	.word	0x080060c4

08003c20 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	e033      	b.n	8003c94 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c2c:	491e      	ldr	r1, [pc, #120]	; (8003ca8 <_cbSendTaskList+0x88>)
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	6818      	ldr	r0, [r3, #0]
 8003c3c:	491a      	ldr	r1, [pc, #104]	; (8003ca8 <_cbSendTaskList+0x88>)
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	4c16      	ldr	r4, [pc, #88]	; (8003ca8 <_cbSendTaskList+0x88>)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4423      	add	r3, r4
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	681c      	ldr	r4, [r3, #0]
 8003c60:	4d11      	ldr	r5, [pc, #68]	; (8003ca8 <_cbSendTaskList+0x88>)
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	442b      	add	r3, r5
 8003c6e:	330c      	adds	r3, #12
 8003c70:	681d      	ldr	r5, [r3, #0]
 8003c72:	4e0d      	ldr	r6, [pc, #52]	; (8003ca8 <_cbSendTaskList+0x88>)
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4433      	add	r3, r6
 8003c80:	3310      	adds	r3, #16
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	462b      	mov	r3, r5
 8003c88:	4622      	mov	r2, r4
 8003c8a:	f000 f979 	bl	8003f80 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3301      	adds	r3, #1
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <_cbSendTaskList+0x8c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d3c6      	bcc.n	8003c2c <_cbSendTaskList+0xc>
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca8:	20012db8 	.word	0x20012db8
 8003cac:	20012e58 	.word	0x20012e58

08003cb0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cb4:	b082      	sub	sp, #8
 8003cb6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003cb8:	f7fe fedc 	bl	8002a74 <xTaskGetTickCountFromISR>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	469a      	mov	sl, r3
 8003cc2:	4693      	mov	fp, r2
 8003cc4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003cc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	f04f 0a00 	mov.w	sl, #0
 8003cd4:	f04f 0b00 	mov.w	fp, #0
 8003cd8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003cdc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003ce0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	465b      	mov	r3, fp
 8003ce8:	1a14      	subs	r4, r2, r0
 8003cea:	eb63 0501 	sbc.w	r5, r3, r1
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	00ab      	lsls	r3, r5, #2
 8003cf8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003cfc:	00a2      	lsls	r2, r4, #2
 8003cfe:	4614      	mov	r4, r2
 8003d00:	461d      	mov	r5, r3
 8003d02:	eb14 0800 	adds.w	r8, r4, r0
 8003d06:	eb45 0901 	adc.w	r9, r5, r1
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d1e:	4690      	mov	r8, r2
 8003d20:	4699      	mov	r9, r3
 8003d22:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003d26:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d38 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af02      	add	r7, sp, #8
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d46:	2205      	movs	r2, #5
 8003d48:	492b      	ldr	r1, [pc, #172]	; (8003df8 <SYSVIEW_AddTask+0xc0>)
 8003d4a:	68b8      	ldr	r0, [r7, #8]
 8003d4c:	f002 f8a2 	bl	8005e94 <memcmp>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d04b      	beq.n	8003dee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	d903      	bls.n	8003d66 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d5e:	4828      	ldr	r0, [pc, #160]	; (8003e00 <SYSVIEW_AddTask+0xc8>)
 8003d60:	f002 f83c 	bl	8005ddc <SEGGER_SYSVIEW_Warn>
    return;
 8003d64:	e044      	b.n	8003df0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d66:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4926      	ldr	r1, [pc, #152]	; (8003e04 <SYSVIEW_AddTask+0xcc>)
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003d7a:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4921      	ldr	r1, [pc, #132]	; (8003e04 <SYSVIEW_AddTask+0xcc>)
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	491b      	ldr	r1, [pc, #108]	; (8003e04 <SYSVIEW_AddTask+0xcc>)
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3308      	adds	r3, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4916      	ldr	r1, [pc, #88]	; (8003e04 <SYSVIEW_AddTask+0xcc>)
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	330c      	adds	r3, #12
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003dbc:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	4910      	ldr	r1, [pc, #64]	; (8003e04 <SYSVIEW_AddTask+0xcc>)
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3310      	adds	r3, #16
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	4a08      	ldr	r2, [pc, #32]	; (8003dfc <SYSVIEW_AddTask+0xc4>)
 8003dda:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 f8ca 	bl	8003f80 <SYSVIEW_SendTaskInfo>
 8003dec:	e000      	b.n	8003df0 <SYSVIEW_AddTask+0xb8>
    return;
 8003dee:	bf00      	nop

}
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	08006034 	.word	0x08006034
 8003dfc:	20012e58 	.word	0x20012e58
 8003e00:	0800603c 	.word	0x0800603c
 8003e04:	20012db8 	.word	0x20012db8

08003e08 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003e10:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 80ab 	beq.w	8003f70 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	e00d      	b.n	8003e3c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003e20:	4956      	ldr	r1, [pc, #344]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d008      	beq.n	8003e48 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	4b4e      	ldr	r3, [pc, #312]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3ec      	bcc.n	8003e20 <SYSVIEW_DeleteTask+0x18>
 8003e46:	e000      	b.n	8003e4a <SYSVIEW_DeleteTask+0x42>
      break;
 8003e48:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003e4a:	4b4b      	ldr	r3, [pc, #300]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d111      	bne.n	8003e7a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4a46      	ldr	r2, [pc, #280]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003e62:	4413      	add	r3, r2
 8003e64:	2214      	movs	r2, #20
 8003e66:	2100      	movs	r1, #0
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f002 f823 	bl	8005eb4 <memset>
    _NumTasks--;
 8003e6e:	4b42      	ldr	r3, [pc, #264]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	4a40      	ldr	r2, [pc, #256]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e07b      	b.n	8003f72 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003e7a:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d276      	bcs.n	8003f72 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003e84:	4b3c      	ldr	r3, [pc, #240]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	493c      	ldr	r1, [pc, #240]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	6819      	ldr	r1, [r3, #0]
 8003e98:	4838      	ldr	r0, [pc, #224]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4403      	add	r3, r0
 8003ea6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8003ea8:	4b33      	ldr	r3, [pc, #204]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	4933      	ldr	r1, [pc, #204]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	6819      	ldr	r1, [r3, #0]
 8003ebe:	482f      	ldr	r0, [pc, #188]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4403      	add	r3, r0
 8003ecc:	3304      	adds	r3, #4
 8003ece:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	1e5a      	subs	r2, r3, #1
 8003ed6:	4929      	ldr	r1, [pc, #164]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003ed8:	4613      	mov	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	4825      	ldr	r0, [pc, #148]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4403      	add	r3, r0
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	491f      	ldr	r1, [pc, #124]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003f00:	4613      	mov	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	6819      	ldr	r1, [r3, #0]
 8003f0e:	481b      	ldr	r0, [pc, #108]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4613      	mov	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	4403      	add	r3, r0
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8003f20:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	1e5a      	subs	r2, r3, #1
 8003f26:	4915      	ldr	r1, [pc, #84]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3310      	adds	r3, #16
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	4811      	ldr	r0, [pc, #68]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4403      	add	r3, r0
 8003f44:	3310      	adds	r3, #16
 8003f46:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	1e5a      	subs	r2, r3, #1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a09      	ldr	r2, [pc, #36]	; (8003f7c <SYSVIEW_DeleteTask+0x174>)
 8003f58:	4413      	add	r3, r2
 8003f5a:	2214      	movs	r2, #20
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f001 ffa8 	bl	8005eb4 <memset>
    _NumTasks--;
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <SYSVIEW_DeleteTask+0x170>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e000      	b.n	8003f72 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8003f70:	bf00      	nop
  }
}
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20012e58 	.word	0x20012e58
 8003f7c:	20012db8 	.word	0x20012db8

08003f80 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	2214      	movs	r2, #20
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 ff8c 	bl	8005eb4 <memset>
  TaskInfo.TaskID     = TaskID;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003fb0:	f107 0314 	add.w	r3, r7, #20
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 fb07 	bl	80055c8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003fba:	bf00      	nop
 8003fbc:	3728      	adds	r7, #40	; 0x28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
	...

08003fc4 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <USART2_IRQHandler+0x80>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d011      	beq.n	8003ffe <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <USART2_IRQHandler+0x84>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f003 030b 	and.w	r3, r3, #11
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <USART2_IRQHandler+0x88>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d004      	beq.n	8003ffe <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003ff4:	4b15      	ldr	r3, [pc, #84]	; (800404c <USART2_IRQHandler+0x88>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	79fa      	ldrb	r2, [r7, #7]
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01a      	beq.n	800403e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004008:	4b11      	ldr	r3, [pc, #68]	; (8004050 <USART2_IRQHandler+0x8c>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d015      	beq.n	800403c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <USART2_IRQHandler+0x8c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1dfa      	adds	r2, r7, #7
 8004016:	4610      	mov	r0, r2
 8004018:	4798      	blx	r3
 800401a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d106      	bne.n	8004030 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004022:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <USART2_IRQHandler+0x90>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a0b      	ldr	r2, [pc, #44]	; (8004054 <USART2_IRQHandler+0x90>)
 8004028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	e006      	b.n	800403e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <USART2_IRQHandler+0x80>)
 8004032:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004034:	79fa      	ldrb	r2, [r7, #7]
 8004036:	4b04      	ldr	r3, [pc, #16]	; (8004048 <USART2_IRQHandler+0x84>)
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e000      	b.n	800403e <USART2_IRQHandler+0x7a>
      return;
 800403c:	bf00      	nop
    }
  }
}
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40004400 	.word	0x40004400
 8004048:	40004404 	.word	0x40004404
 800404c:	20012e5c 	.word	0x20012e5c
 8004050:	20012e60 	.word	0x20012e60
 8004054:	4000440c 	.word	0x4000440c

08004058 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a04      	ldr	r2, [pc, #16]	; (8004074 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004066:	6013      	str	r3, [r2, #0]
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	4000440c 	.word	0x4000440c

08004078 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800407e:	4b24      	ldr	r3, [pc, #144]	; (8004110 <_DoInit+0x98>)
 8004080:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2203      	movs	r2, #3
 8004086:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2203      	movs	r2, #3
 800408c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <_DoInit+0x9c>)
 8004092:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <_DoInit+0xa0>)
 8004098:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040a0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a17      	ldr	r2, [pc, #92]	; (8004114 <_DoInit+0x9c>)
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a17      	ldr	r2, [pc, #92]	; (800411c <_DoInit+0xa4>)
 80040be:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2210      	movs	r2, #16
 80040c4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3307      	adds	r3, #7
 80040dc:	4a10      	ldr	r2, [pc, #64]	; (8004120 <_DoInit+0xa8>)
 80040de:	6810      	ldr	r0, [r2, #0]
 80040e0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80040e2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a0e      	ldr	r2, [pc, #56]	; (8004124 <_DoInit+0xac>)
 80040ea:	6810      	ldr	r0, [r2, #0]
 80040ec:	6018      	str	r0, [r3, #0]
 80040ee:	8891      	ldrh	r1, [r2, #4]
 80040f0:	7992      	ldrb	r2, [r2, #6]
 80040f2:	8099      	strh	r1, [r3, #4]
 80040f4:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80040f6:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004100:	f3bf 8f5f 	dmb	sy
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	20012e64 	.word	0x20012e64
 8004114:	0800608c 	.word	0x0800608c
 8004118:	20012f0c 	.word	0x20012f0c
 800411c:	2001330c 	.word	0x2001330c
 8004120:	08006098 	.word	0x08006098
 8004124:	0800609c 	.word	0x0800609c

08004128 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b08c      	sub	sp, #48	; 0x30
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004134:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <SEGGER_RTT_ReadNoLock+0x108>)
 8004136:	623b      	str	r3, [r7, #32]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <SEGGER_RTT_ReadNoLock+0x1e>
 8004142:	f7ff ff99 	bl	8004078 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	3360      	adds	r3, #96	; 0x60
 8004152:	4a37      	ldr	r2, [pc, #220]	; (8004230 <SEGGER_RTT_ReadNoLock+0x108>)
 8004154:	4413      	add	r3, r2
 8004156:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004168:	2300      	movs	r3, #0
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800416c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	429a      	cmp	r2, r3
 8004172:	d92b      	bls.n	80041cc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4293      	cmp	r3, r2
 8004184:	bf28      	it	cs
 8004186:	4613      	movcs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004190:	4413      	add	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6939      	ldr	r1, [r7, #16]
 8004198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800419a:	f001 feb7 	bl	8005f0c <memcpy>
    NumBytesRead += NumBytesRem;
 800419e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	4413      	add	r3, r2
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80041a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80041b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	4413      	add	r3, r2
 80041bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d101      	bne.n	80041cc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4293      	cmp	r3, r2
 80041da:	bf28      	it	cs
 80041dc:	4613      	movcs	r3, r2
 80041de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d019      	beq.n	800421a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ec:	4413      	add	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	6939      	ldr	r1, [r7, #16]
 80041f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041f6:	f001 fe89 	bl	8005f0c <memcpy>
    NumBytesRead += NumBytesRem;
 80041fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	4413      	add	r3, r2
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4413      	add	r3, r2
 8004208:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004212:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	4413      	add	r3, r2
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d002      	beq.n	8004226 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004224:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004228:	4618      	mov	r0, r3
 800422a:	3730      	adds	r7, #48	; 0x30
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20012e64 	.word	0x20012e64

08004234 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004250:	f7ff ff12 	bl	8004078 <_DoInit>
  SEGGER_RTT_LOCK();
 8004254:	f3ef 8311 	mrs	r3, BASEPRI
 8004258:	f04f 0120 	mov.w	r1, #32
 800425c:	f381 8811 	msr	BASEPRI, r1
 8004260:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004262:	4b35      	ldr	r3, [pc, #212]	; (8004338 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004264:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800426a:	6939      	ldr	r1, [r7, #16]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	4613      	mov	r3, r2
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	440b      	add	r3, r1
 800427a:	3304      	adds	r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3301      	adds	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	429a      	cmp	r2, r3
 8004290:	dbeb      	blt.n	800426a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004292:	e000      	b.n	8004296 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004294:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	429a      	cmp	r2, r3
 800429e:	da3f      	bge.n	8004320 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80042a0:	6939      	ldr	r1, [r7, #16]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	4613      	mov	r3, r2
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80042b4:	6939      	ldr	r1, [r7, #16]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	4613      	mov	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	3304      	adds	r3, #4
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	4613      	mov	r3, r2
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	440b      	add	r3, r1
 80042d8:	3320      	adds	r3, #32
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80042de:	6939      	ldr	r1, [r7, #16]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	4613      	mov	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	4413      	add	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	440b      	add	r3, r1
 80042ec:	3328      	adds	r3, #40	; 0x28
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80042f2:	6939      	ldr	r1, [r7, #16]
 80042f4:	69fa      	ldr	r2, [r7, #28]
 80042f6:	4613      	mov	r3, r2
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	4413      	add	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	440b      	add	r3, r1
 8004300:	3324      	adds	r3, #36	; 0x24
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004306:	6939      	ldr	r1, [r7, #16]
 8004308:	69fa      	ldr	r2, [r7, #28]
 800430a:	4613      	mov	r3, r2
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	4413      	add	r3, r2
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	440b      	add	r3, r1
 8004314:	332c      	adds	r3, #44	; 0x2c
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800431a:	f3bf 8f5f 	dmb	sy
 800431e:	e002      	b.n	8004326 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
 8004324:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800432c:	69fb      	ldr	r3, [r7, #28]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3720      	adds	r7, #32
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20012e64 	.word	0x20012e64

0800433c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800433c:	b580      	push	{r7, lr}
 800433e:	b088      	sub	sp, #32
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800434a:	4b33      	ldr	r3, [pc, #204]	; (8004418 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004358:	f7ff fe8e 	bl	8004078 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800435c:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800435e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	461a      	mov	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4293      	cmp	r3, r2
 800436a:	d24d      	bcs.n	8004408 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800436c:	f3ef 8311 	mrs	r3, BASEPRI
 8004370:	f04f 0120 	mov.w	r1, #32
 8004374:	f381 8811 	msr	BASEPRI, r1
 8004378:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d031      	beq.n	80043e4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004380:	6979      	ldr	r1, [r7, #20]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4613      	mov	r3, r2
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4413      	add	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	440b      	add	r3, r1
 800438e:	3360      	adds	r3, #96	; 0x60
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004394:	6979      	ldr	r1, [r7, #20]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	3364      	adds	r3, #100	; 0x64
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80043a8:	6979      	ldr	r1, [r7, #20]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	3368      	adds	r3, #104	; 0x68
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80043bc:	6979      	ldr	r1, [r7, #20]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4613      	mov	r3, r2
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3370      	adds	r3, #112	; 0x70
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80043d0:	6979      	ldr	r1, [r7, #20]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	336c      	adds	r3, #108	; 0x6c
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4613      	mov	r3, r2
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	4413      	add	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	440b      	add	r3, r1
 80043f2:	3374      	adds	r3, #116	; 0x74
 80043f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043f6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043f8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e002      	b.n	800440e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004408:	f04f 33ff 	mov.w	r3, #4294967295
 800440c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 800440e:	69fb      	ldr	r3, [r7, #28]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3720      	adds	r7, #32
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20012e64 	.word	0x20012e64

0800441c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800442c:	e002      	b.n	8004434 <_EncodeStr+0x18>
    Len++;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f6      	bne.n	800442e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d901      	bls.n	800444c <_EncodeStr+0x30>
    Len = Limit;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	2bfe      	cmp	r3, #254	; 0xfe
 8004450:	d806      	bhi.n	8004460 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	60fa      	str	r2, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	e011      	b.n	8004484 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	60fa      	str	r2, [r7, #12]
 8004466:	22ff      	movs	r2, #255	; 0xff
 8004468:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	60fa      	str	r2, [r7, #12]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	0a19      	lsrs	r1, r3, #8
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1c5a      	adds	r2, r3, #1
 800447e:	60fa      	str	r2, [r7, #12]
 8004480:	b2ca      	uxtb	r2, r1
 8004482:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004488:	e00a      	b.n	80044a0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	1c53      	adds	r3, r2, #1
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	60f9      	str	r1, [r7, #12]
 8004496:	7812      	ldrb	r2, [r2, #0]
 8004498:	701a      	strb	r2, [r3, #0]
    n++;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	3301      	adds	r3, #1
 800449e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d3f0      	bcc.n	800448a <_EncodeStr+0x6e>
  }
  return pPayload;
 80044a8:	68fb      	ldr	r3, [r7, #12]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	370c      	adds	r7, #12
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044d6:	4b35      	ldr	r3, [pc, #212]	; (80045ac <_HandleIncomingPacket+0xdc>)
 80044d8:	7e1b      	ldrb	r3, [r3, #24]
 80044da:	4618      	mov	r0, r3
 80044dc:	1cfb      	adds	r3, r7, #3
 80044de:	2201      	movs	r2, #1
 80044e0:	4619      	mov	r1, r3
 80044e2:	f7ff fe21 	bl	8004128 <SEGGER_RTT_ReadNoLock>
 80044e6:	4603      	mov	r3, r0
 80044e8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dd59      	ble.n	80045a4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d032      	beq.n	800455c <_HandleIncomingPacket+0x8c>
 80044f6:	2b80      	cmp	r3, #128	; 0x80
 80044f8:	dc42      	bgt.n	8004580 <_HandleIncomingPacket+0xb0>
 80044fa:	2b07      	cmp	r3, #7
 80044fc:	dc16      	bgt.n	800452c <_HandleIncomingPacket+0x5c>
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dd3e      	ble.n	8004580 <_HandleIncomingPacket+0xb0>
 8004502:	3b01      	subs	r3, #1
 8004504:	2b06      	cmp	r3, #6
 8004506:	d83b      	bhi.n	8004580 <_HandleIncomingPacket+0xb0>
 8004508:	a201      	add	r2, pc, #4	; (adr r2, 8004510 <_HandleIncomingPacket+0x40>)
 800450a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450e:	bf00      	nop
 8004510:	08004533 	.word	0x08004533
 8004514:	08004539 	.word	0x08004539
 8004518:	0800453f 	.word	0x0800453f
 800451c:	08004545 	.word	0x08004545
 8004520:	0800454b 	.word	0x0800454b
 8004524:	08004551 	.word	0x08004551
 8004528:	08004557 	.word	0x08004557
 800452c:	2b7f      	cmp	r3, #127	; 0x7f
 800452e:	d034      	beq.n	800459a <_HandleIncomingPacket+0xca>
 8004530:	e026      	b.n	8004580 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004532:	f000 fecd 	bl	80052d0 <SEGGER_SYSVIEW_Start>
      break;
 8004536:	e035      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004538:	f000 ff86 	bl	8005448 <SEGGER_SYSVIEW_Stop>
      break;
 800453c:	e032      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800453e:	f001 f95f 	bl	8005800 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004542:	e02f      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004544:	f001 f924 	bl	8005790 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004548:	e02c      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800454a:	f000 ffa3 	bl	8005494 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800454e:	e029      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004550:	f001 fbf2 	bl	8005d38 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004554:	e026      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004556:	f001 fbd1 	bl	8005cfc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800455a:	e023      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800455c:	4b13      	ldr	r3, [pc, #76]	; (80045ac <_HandleIncomingPacket+0xdc>)
 800455e:	7e1b      	ldrb	r3, [r3, #24]
 8004560:	4618      	mov	r0, r3
 8004562:	1cfb      	adds	r3, r7, #3
 8004564:	2201      	movs	r2, #1
 8004566:	4619      	mov	r1, r3
 8004568:	f7ff fdde 	bl	8004128 <SEGGER_RTT_ReadNoLock>
 800456c:	4603      	mov	r3, r0
 800456e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	dd13      	ble.n	800459e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004576:	78fb      	ldrb	r3, [r7, #3]
 8004578:	4618      	mov	r0, r3
 800457a:	f001 fb3f 	bl	8005bfc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800457e:	e00e      	b.n	800459e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	b25b      	sxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	da0c      	bge.n	80045a2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <_HandleIncomingPacket+0xdc>)
 800458a:	7e1b      	ldrb	r3, [r3, #24]
 800458c:	4618      	mov	r0, r3
 800458e:	1cfb      	adds	r3, r7, #3
 8004590:	2201      	movs	r2, #1
 8004592:	4619      	mov	r1, r3
 8004594:	f7ff fdc8 	bl	8004128 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004598:	e003      	b.n	80045a2 <_HandleIncomingPacket+0xd2>
      break;
 800459a:	bf00      	nop
 800459c:	e002      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
      break;
 800459e:	bf00      	nop
 80045a0:	e000      	b.n	80045a4 <_HandleIncomingPacket+0xd4>
      break;
 80045a2:	bf00      	nop
    }
  }
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20014324 	.word	0x20014324

080045b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08c      	sub	sp, #48	; 0x30
 80045b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80045b6:	2301      	movs	r3, #1
 80045b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045c4:	4b32      	ldr	r3, [pc, #200]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ca:	e00b      	b.n	80045e4 <_TrySendOverflowPacket+0x34>
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	1c59      	adds	r1, r3, #1
 80045d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	09db      	lsrs	r3, r3, #7
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b7f      	cmp	r3, #127	; 0x7f
 80045e8:	d8f0      	bhi.n	80045cc <_TrySendOverflowPacket+0x1c>
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	1c5a      	adds	r2, r3, #1
 80045ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045fa:	4b26      	ldr	r3, [pc, #152]	; (8004694 <_TrySendOverflowPacket+0xe4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004600:	4b23      	ldr	r3, [pc, #140]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	623b      	str	r3, [r7, #32]
 8004612:	e00b      	b.n	800462c <_TrySendOverflowPacket+0x7c>
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	b2da      	uxtb	r2, r3
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	1c59      	adds	r1, r3, #1
 800461c:	6279      	str	r1, [r7, #36]	; 0x24
 800461e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	09db      	lsrs	r3, r3, #7
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	2b7f      	cmp	r3, #127	; 0x7f
 8004630:	d8f0      	bhi.n	8004614 <_TrySendOverflowPacket+0x64>
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	627a      	str	r2, [r7, #36]	; 0x24
 8004638:	6a3a      	ldr	r2, [r7, #32]
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004642:	4b13      	ldr	r3, [pc, #76]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 8004644:	785b      	ldrb	r3, [r3, #1]
 8004646:	4618      	mov	r0, r3
 8004648:	1d3b      	adds	r3, r7, #4
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	461a      	mov	r2, r3
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	4619      	mov	r1, r3
 8004654:	f7fb fdbc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004658:	4603      	mov	r3, r0
 800465a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 800465c:	f7ff fcfc 	bl	8004058 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004666:	4a0a      	ldr	r2, [pc, #40]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800466c:	4b08      	ldr	r3, [pc, #32]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	3b01      	subs	r3, #1
 8004672:	b2da      	uxtb	r2, r3
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e004      	b.n	8004684 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	4a03      	ldr	r2, [pc, #12]	; (8004690 <_TrySendOverflowPacket+0xe0>)
 8004682:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004684:	693b      	ldr	r3, [r7, #16]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3730      	adds	r7, #48	; 0x30
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20014324 	.word	0x20014324
 8004694:	e0001004 	.word	0xe0001004

08004698 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80046a4:	4b6d      	ldr	r3, [pc, #436]	; (800485c <_SendPacket+0x1c4>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d010      	beq.n	80046ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80046ac:	4b6b      	ldr	r3, [pc, #428]	; (800485c <_SendPacket+0x1c4>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80a5 	beq.w	8004800 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80046b6:	4b69      	ldr	r3, [pc, #420]	; (800485c <_SendPacket+0x1c4>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d109      	bne.n	80046d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80046be:	f7ff ff77 	bl	80045b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80046c2:	4b66      	ldr	r3, [pc, #408]	; (800485c <_SendPacket+0x1c4>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	f040 809c 	bne.w	8004804 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80046cc:	e001      	b.n	80046d2 <_SendPacket+0x3a>
    goto Send;
 80046ce:	bf00      	nop
 80046d0:	e000      	b.n	80046d4 <_SendPacket+0x3c>
Send:
 80046d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b1f      	cmp	r3, #31
 80046d8:	d809      	bhi.n	80046ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80046da:	4b60      	ldr	r3, [pc, #384]	; (800485c <_SendPacket+0x1c4>)
 80046dc:	69da      	ldr	r2, [r3, #28]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 808d 	bne.w	8004808 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b17      	cmp	r3, #23
 80046f2:	d807      	bhi.n	8004704 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	e03d      	b.n	8004780 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	2b7f      	cmp	r3, #127	; 0x7f
 8004710:	d912      	bls.n	8004738 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	09da      	lsrs	r2, r3, #7
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b01      	subs	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	3a01      	subs	r2, #1
 800472a:	60fa      	str	r2, [r7, #12]
 800472c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e006      	b.n	8004746 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b01      	subs	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	b2da      	uxtb	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2b7f      	cmp	r3, #127	; 0x7f
 800474a:	d912      	bls.n	8004772 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	09da      	lsrs	r2, r3, #7
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	3a01      	subs	r2, #1
 8004764:	60fa      	str	r2, [r7, #12]
 8004766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e006      	b.n	8004780 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3b01      	subs	r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	b2da      	uxtb	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004780:	4b37      	ldr	r3, [pc, #220]	; (8004860 <_SendPacket+0x1c8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004786:	4b35      	ldr	r3, [pc, #212]	; (800485c <_SendPacket+0x1c4>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	e00b      	b.n	80047b2 <_SendPacket+0x11a>
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	b2da      	uxtb	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	6279      	str	r1, [r7, #36]	; 0x24
 80047a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	09db      	lsrs	r3, r3, #7
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	2b7f      	cmp	r3, #127	; 0x7f
 80047b6:	d8f0      	bhi.n	800479a <_SendPacket+0x102>
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	1c5a      	adds	r2, r3, #1
 80047bc:	627a      	str	r2, [r7, #36]	; 0x24
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	b2d2      	uxtb	r2, r2
 80047c2:	701a      	strb	r2, [r3, #0]
 80047c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <_SendPacket+0x1c4>)
 80047ca:	785b      	ldrb	r3, [r3, #1]
 80047cc:	4618      	mov	r0, r3
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	68f9      	ldr	r1, [r7, #12]
 80047d8:	f7fb fcfa 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80047dc:	4603      	mov	r3, r0
 80047de:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80047e0:	f7ff fc3a 	bl	8004058 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80047ea:	4a1c      	ldr	r2, [pc, #112]	; (800485c <_SendPacket+0x1c4>)
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	60d3      	str	r3, [r2, #12]
 80047f0:	e00b      	b.n	800480a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80047f2:	4b1a      	ldr	r3, [pc, #104]	; (800485c <_SendPacket+0x1c4>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4b18      	ldr	r3, [pc, #96]	; (800485c <_SendPacket+0x1c4>)
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e004      	b.n	800480a <_SendPacket+0x172>
    goto SendDone;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <_SendPacket+0x172>
      goto SendDone;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <_SendPacket+0x172>
      goto SendDone;
 8004808:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <_SendPacket+0x1c4>)
 800480c:	7e1b      	ldrb	r3, [r3, #24]
 800480e:	4619      	mov	r1, r3
 8004810:	4a14      	ldr	r2, [pc, #80]	; (8004864 <_SendPacket+0x1cc>)
 8004812:	460b      	mov	r3, r1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	440b      	add	r3, r1
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	336c      	adds	r3, #108	; 0x6c
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <_SendPacket+0x1c4>)
 8004822:	7e1b      	ldrb	r3, [r3, #24]
 8004824:	4618      	mov	r0, r3
 8004826:	490f      	ldr	r1, [pc, #60]	; (8004864 <_SendPacket+0x1cc>)
 8004828:	4603      	mov	r3, r0
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4403      	add	r3, r0
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	440b      	add	r3, r1
 8004832:	3370      	adds	r3, #112	; 0x70
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d00b      	beq.n	8004852 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <_SendPacket+0x1c4>)
 800483c:	789b      	ldrb	r3, [r3, #2]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004842:	4b06      	ldr	r3, [pc, #24]	; (800485c <_SendPacket+0x1c4>)
 8004844:	2201      	movs	r2, #1
 8004846:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004848:	f7ff fe42 	bl	80044d0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <_SendPacket+0x1c4>)
 800484e:	2200      	movs	r2, #0
 8004850:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004852:	bf00      	nop
 8004854:	3728      	adds	r7, #40	; 0x28
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20014324 	.word	0x20014324
 8004860:	e0001004 	.word	0xe0001004
 8004864:	20012e64 	.word	0x20012e64

08004868 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	460b      	mov	r3, r1
 8004872:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	3301      	adds	r3, #1
 800487e:	2b80      	cmp	r3, #128	; 0x80
 8004880:	d80a      	bhi.n	8004898 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	1c59      	adds	r1, r3, #1
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6051      	str	r1, [r2, #4]
 800488c:	78fa      	ldrb	r2, [r7, #3]
 800488e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d15a      	bne.n	8004956 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	623b      	str	r3, [r7, #32]
 80048c0:	e00b      	b.n	80048da <_StoreChar+0x72>
 80048c2:	6a3b      	ldr	r3, [r7, #32]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	1c59      	adds	r1, r3, #1
 80048ca:	6279      	str	r1, [r7, #36]	; 0x24
 80048cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	09db      	lsrs	r3, r3, #7
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	2b7f      	cmp	r3, #127	; 0x7f
 80048de:	d8f0      	bhi.n	80048c2 <_StoreChar+0x5a>
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	627a      	str	r2, [r7, #36]	; 0x24
 80048e6:	6a3a      	ldr	r2, [r7, #32]
 80048e8:	b2d2      	uxtb	r2, r2
 80048ea:	701a      	strb	r2, [r3, #0]
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	2300      	movs	r3, #0
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	e00b      	b.n	8004912 <_StoreChar+0xaa>
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	61f9      	str	r1, [r7, #28]
 8004904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	09db      	lsrs	r3, r3, #7
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b7f      	cmp	r3, #127	; 0x7f
 8004916:	d8f0      	bhi.n	80048fa <_StoreChar+0x92>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	61fa      	str	r2, [r7, #28]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	221a      	movs	r2, #26
 800492e:	6939      	ldr	r1, [r7, #16]
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff feb1 	bl	8004698 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fdbb 	bl	80044b6 <_PreparePacket>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
  }
}
 8004956:	bf00      	nop
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004972:	2301      	movs	r3, #1
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004976:	2301      	movs	r3, #1
 8004978:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800497a:	e007      	b.n	800498c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800497c:	6a3a      	ldr	r2, [r7, #32]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	fbb2 f3f3 	udiv	r3, r2, r3
 8004984:	623b      	str	r3, [r7, #32]
    Width++;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3301      	adds	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800498c:	6a3a      	ldr	r2, [r7, #32]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d2f3      	bcs.n	800497c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	d901      	bls.n	80049a0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80049a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d11f      	bne.n	80049ea <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01c      	beq.n	80049ea <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <_PrintUnsigned+0x66>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <_PrintUnsigned+0x66>
        c = '0';
 80049c0:	2330      	movs	r3, #48	; 0x30
 80049c2:	76fb      	strb	r3, [r7, #27]
 80049c4:	e001      	b.n	80049ca <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80049c6:	2320      	movs	r3, #32
 80049c8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049ca:	e007      	b.n	80049dc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	3b01      	subs	r3, #1
 80049d0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80049d2:	7efb      	ldrb	r3, [r7, #27]
 80049d4:	4619      	mov	r1, r3
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f7ff ff46 	bl	8004868 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <_PrintUnsigned+0x8a>
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3f0      	bcc.n	80049cc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d903      	bls.n	80049f8 <_PrintUnsigned+0x98>
      NumDigits--;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	e009      	b.n	8004a0c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a00:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d200      	bcs.n	8004a0c <_PrintUnsigned+0xac>
        break;
 8004a0a:	e005      	b.n	8004a18 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	fb02 f303 	mul.w	r3, r2, r3
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004a16:	e7e8      	b.n	80049ea <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004a30:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <_PrintUnsigned+0x128>)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	4413      	add	r3, r2
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f7ff ff14 	bl	8004868 <_StoreChar>
    Digit /= Base;
 8004a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e3      	bne.n	8004a18 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d011      	beq.n	8004a7e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00e      	beq.n	8004a7e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a60:	e006      	b.n	8004a70 <_PrintUnsigned+0x110>
        FieldWidth--;
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	3b01      	subs	r3, #1
 8004a66:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004a68:	2120      	movs	r1, #32
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff fefc 	bl	8004868 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <_PrintUnsigned+0x11e>
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3f1      	bcc.n	8004a62 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8004a7e:	bf00      	nop
 8004a80:	3728      	adds	r7, #40	; 0x28
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	080060d8 	.word	0x080060d8

08004a8c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bfb8      	it	lt
 8004aa0:	425b      	neglt	r3, r3
 8004aa2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004aa8:	e007      	b.n	8004aba <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ab2:	613b      	str	r3, [r7, #16]
    Width++;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	daf3      	bge.n	8004aaa <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d901      	bls.n	8004ace <_PrintInt+0x42>
    Width = NumDigits;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <_PrintInt+0x5e>
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	db04      	blt.n	8004ae4 <_PrintInt+0x58>
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <_PrintInt+0x5e>
    FieldWidth--;
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <_PrintInt+0x6e>
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <_PrintInt+0x9c>
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d111      	bne.n	8004b28 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00e      	beq.n	8004b28 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b0a:	e006      	b.n	8004b1a <_PrintInt+0x8e>
        FieldWidth--;
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004b12:	2120      	movs	r1, #32
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff fea7 	bl	8004868 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <_PrintInt+0x9c>
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d3f1      	bcc.n	8004b0c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da07      	bge.n	8004b3e <_PrintInt+0xb2>
    v = -v;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	425b      	negs	r3, r3
 8004b32:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004b34:	212d      	movs	r1, #45	; 0x2d
 8004b36:	68f8      	ldr	r0, [r7, #12]
 8004b38:	f7ff fe96 	bl	8004868 <_StoreChar>
 8004b3c:	e008      	b.n	8004b50 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004b48:	212b      	movs	r1, #43	; 0x2b
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f7ff fe8c 	bl	8004868 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d019      	beq.n	8004b8e <_PrintInt+0x102>
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d114      	bne.n	8004b8e <_PrintInt+0x102>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d111      	bne.n	8004b8e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00e      	beq.n	8004b8e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b70:	e006      	b.n	8004b80 <_PrintInt+0xf4>
        FieldWidth--;
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004b78:	2130      	movs	r1, #48	; 0x30
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fe74 	bl	8004868 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <_PrintInt+0x102>
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d3f1      	bcc.n	8004b72 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b92:	9301      	str	r3, [sp, #4]
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff fedf 	bl	8004960 <_PrintUnsigned>
}
 8004ba2:	bf00      	nop
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b098      	sub	sp, #96	; 0x60
 8004bb0:	af02      	add	r7, sp, #8
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbc:	f04f 0120 	mov.w	r1, #32
 8004bc0:	f381 8811 	msr	BASEPRI, r1
 8004bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004bc6:	48b7      	ldr	r0, [pc, #732]	; (8004ea4 <_VPrintTarget+0x2f8>)
 8004bc8:	f7ff fc75 	bl	80044b6 <_PreparePacket>
 8004bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004bce:	4bb5      	ldr	r3, [pc, #724]	; (8004ea4 <_VPrintTarget+0x2f8>)
 8004bd0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8183 	beq.w	8004f02 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8004bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c00:	2b25      	cmp	r3, #37	; 0x25
 8004c02:	f040 8170 	bne.w	8004ee6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004c06:	2300      	movs	r3, #0
 8004c08:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004c16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c1a:	3b23      	subs	r3, #35	; 0x23
 8004c1c:	2b0d      	cmp	r3, #13
 8004c1e:	d83f      	bhi.n	8004ca0 <_VPrintTarget+0xf4>
 8004c20:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <_VPrintTarget+0x7c>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c91 	.word	0x08004c91
 8004c2c:	08004ca1 	.word	0x08004ca1
 8004c30:	08004ca1 	.word	0x08004ca1
 8004c34:	08004ca1 	.word	0x08004ca1
 8004c38:	08004ca1 	.word	0x08004ca1
 8004c3c:	08004ca1 	.word	0x08004ca1
 8004c40:	08004ca1 	.word	0x08004ca1
 8004c44:	08004ca1 	.word	0x08004ca1
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004c61 	.word	0x08004c61
 8004c54:	08004ca1 	.word	0x08004ca1
 8004c58:	08004ca1 	.word	0x08004ca1
 8004c5c:	08004c71 	.word	0x08004c71
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c62:	f043 0301 	orr.w	r3, r3, #1
 8004c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e01a      	b.n	8004ca6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c72:	f043 0302 	orr.w	r3, r3, #2
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e012      	b.n	8004ca6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e00a      	b.n	8004ca6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c92:	f043 0308 	orr.w	r3, r3, #8
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e002      	b.n	8004ca6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ca4:	bf00      	nop
        }
      } while (v);
 8004ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1b0      	bne.n	8004c0e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004cac:	2300      	movs	r3, #0
 8004cae:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004cb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cbc:	2b2f      	cmp	r3, #47	; 0x2f
 8004cbe:	d912      	bls.n	8004ce6 <_VPrintTarget+0x13a>
 8004cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cc4:	2b39      	cmp	r3, #57	; 0x39
 8004cc6:	d80e      	bhi.n	8004ce6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004cce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	005b      	lsls	r3, r3, #1
 8004cd8:	461a      	mov	r2, r3
 8004cda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cde:	4413      	add	r3, r2
 8004ce0:	3b30      	subs	r3, #48	; 0x30
 8004ce2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004ce4:	e7e4      	b.n	8004cb0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8004cf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cf6:	2b2e      	cmp	r3, #46	; 0x2e
 8004cf8:	d11d      	bne.n	8004d36 <_VPrintTarget+0x18a>
        sFormat++;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004d08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d0c:	2b2f      	cmp	r3, #47	; 0x2f
 8004d0e:	d912      	bls.n	8004d36 <_VPrintTarget+0x18a>
 8004d10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d14:	2b39      	cmp	r3, #57	; 0x39
 8004d16:	d80e      	bhi.n	8004d36 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004d1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	461a      	mov	r2, r3
 8004d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d2e:	4413      	add	r3, r2
 8004d30:	3b30      	subs	r3, #48	; 0x30
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004d34:	e7e4      	b.n	8004d00 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004d3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d42:	2b6c      	cmp	r3, #108	; 0x6c
 8004d44:	d003      	beq.n	8004d4e <_VPrintTarget+0x1a2>
 8004d46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d4a:	2b68      	cmp	r3, #104	; 0x68
 8004d4c:	d107      	bne.n	8004d5e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004d5c:	e7ef      	b.n	8004d3e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004d62:	2b25      	cmp	r3, #37	; 0x25
 8004d64:	f000 80b3 	beq.w	8004ece <_VPrintTarget+0x322>
 8004d68:	2b25      	cmp	r3, #37	; 0x25
 8004d6a:	f2c0 80b7 	blt.w	8004edc <_VPrintTarget+0x330>
 8004d6e:	2b78      	cmp	r3, #120	; 0x78
 8004d70:	f300 80b4 	bgt.w	8004edc <_VPrintTarget+0x330>
 8004d74:	2b58      	cmp	r3, #88	; 0x58
 8004d76:	f2c0 80b1 	blt.w	8004edc <_VPrintTarget+0x330>
 8004d7a:	3b58      	subs	r3, #88	; 0x58
 8004d7c:	2b20      	cmp	r3, #32
 8004d7e:	f200 80ad 	bhi.w	8004edc <_VPrintTarget+0x330>
 8004d82:	a201      	add	r2, pc, #4	; (adr r2, 8004d88 <_VPrintTarget+0x1dc>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004e7f 	.word	0x08004e7f
 8004d8c:	08004edd 	.word	0x08004edd
 8004d90:	08004edd 	.word	0x08004edd
 8004d94:	08004edd 	.word	0x08004edd
 8004d98:	08004edd 	.word	0x08004edd
 8004d9c:	08004edd 	.word	0x08004edd
 8004da0:	08004edd 	.word	0x08004edd
 8004da4:	08004edd 	.word	0x08004edd
 8004da8:	08004edd 	.word	0x08004edd
 8004dac:	08004edd 	.word	0x08004edd
 8004db0:	08004edd 	.word	0x08004edd
 8004db4:	08004e0d 	.word	0x08004e0d
 8004db8:	08004e33 	.word	0x08004e33
 8004dbc:	08004edd 	.word	0x08004edd
 8004dc0:	08004edd 	.word	0x08004edd
 8004dc4:	08004edd 	.word	0x08004edd
 8004dc8:	08004edd 	.word	0x08004edd
 8004dcc:	08004edd 	.word	0x08004edd
 8004dd0:	08004edd 	.word	0x08004edd
 8004dd4:	08004edd 	.word	0x08004edd
 8004dd8:	08004edd 	.word	0x08004edd
 8004ddc:	08004edd 	.word	0x08004edd
 8004de0:	08004edd 	.word	0x08004edd
 8004de4:	08004edd 	.word	0x08004edd
 8004de8:	08004ea9 	.word	0x08004ea9
 8004dec:	08004edd 	.word	0x08004edd
 8004df0:	08004edd 	.word	0x08004edd
 8004df4:	08004edd 	.word	0x08004edd
 8004df8:	08004edd 	.word	0x08004edd
 8004dfc:	08004e59 	.word	0x08004e59
 8004e00:	08004edd 	.word	0x08004edd
 8004e04:	08004edd 	.word	0x08004edd
 8004e08:	08004e7f 	.word	0x08004e7f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	1d19      	adds	r1, r3, #4
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004e20:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004e24:	f107 0314 	add.w	r3, r7, #20
 8004e28:	4611      	mov	r1, r2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fd1c 	bl	8004868 <_StoreChar>
        break;
 8004e30:	e055      	b.n	8004ede <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	1d19      	adds	r1, r3, #4
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6011      	str	r1, [r2, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004e40:	f107 0014 	add.w	r0, r7, #20
 8004e44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e46:	9301      	str	r3, [sp, #4]
 8004e48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e4e:	220a      	movs	r2, #10
 8004e50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e52:	f7ff fe1b 	bl	8004a8c <_PrintInt>
        break;
 8004e56:	e042      	b.n	8004ede <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	1d19      	adds	r1, r3, #4
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6011      	str	r1, [r2, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004e66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e68:	f107 0014 	add.w	r0, r7, #20
 8004e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6e:	9301      	str	r3, [sp, #4]
 8004e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e76:	220a      	movs	r2, #10
 8004e78:	f7ff fd72 	bl	8004960 <_PrintUnsigned>
        break;
 8004e7c:	e02f      	b.n	8004ede <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	1d19      	adds	r1, r3, #4
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6011      	str	r1, [r2, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004e8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004e8e:	f107 0014 	add.w	r0, r7, #20
 8004e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e94:	9301      	str	r3, [sp, #4]
 8004e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e9c:	2210      	movs	r2, #16
 8004e9e:	f7ff fd5f 	bl	8004960 <_PrintUnsigned>
        break;
 8004ea2:	e01c      	b.n	8004ede <_VPrintTarget+0x332>
 8004ea4:	20014354 	.word	0x20014354
      case 'p':
        v = va_arg(*pParamList, int);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	1d19      	adds	r1, r3, #4
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004eb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004eb8:	f107 0014 	add.w	r0, r7, #20
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9301      	str	r3, [sp, #4]
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2308      	movs	r3, #8
 8004ec6:	2210      	movs	r2, #16
 8004ec8:	f7ff fd4a 	bl	8004960 <_PrintUnsigned>
        break;
 8004ecc:	e007      	b.n	8004ede <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	2125      	movs	r1, #37	; 0x25
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fcc7 	bl	8004868 <_StoreChar>
        break;
 8004eda:	e000      	b.n	8004ede <_VPrintTarget+0x332>
      default:
        break;
 8004edc:	bf00      	nop
      }
      sFormat++;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e007      	b.n	8004ef6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8004ee6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004eea:	f107 0314 	add.w	r3, r7, #20
 8004eee:	4611      	mov	r1, r2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7ff fcb9 	bl	8004868 <_StoreChar>
    }
  } while (*sFormat);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f47f ae72 	bne.w	8004be4 <_VPrintTarget+0x38>
 8004f00:	e000      	b.n	8004f04 <_VPrintTarget+0x358>
      break;
 8004f02:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d041      	beq.n	8004f8e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	643b      	str	r3, [r7, #64]	; 0x40
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1a:	e00b      	b.n	8004f34 <_VPrintTarget+0x388>
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f22:	1c59      	adds	r1, r3, #1
 8004f24:	6439      	str	r1, [r7, #64]	; 0x40
 8004f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f30:	09db      	lsrs	r3, r3, #7
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f36:	2b7f      	cmp	r3, #127	; 0x7f
 8004f38:	d8f0      	bhi.n	8004f1c <_VPrintTarget+0x370>
 8004f3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	643a      	str	r2, [r7, #64]	; 0x40
 8004f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
 8004f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f48:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f4e:	2300      	movs	r3, #0
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34
 8004f52:	e00b      	b.n	8004f6c <_VPrintTarget+0x3c0>
 8004f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	1c59      	adds	r1, r3, #1
 8004f5c:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f62:	b2d2      	uxtb	r2, r2
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f70:	d8f0      	bhi.n	8004f54 <_VPrintTarget+0x3a8>
 8004f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	63ba      	str	r2, [r7, #56]	; 0x38
 8004f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	69b9      	ldr	r1, [r7, #24]
 8004f86:	221a      	movs	r2, #26
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff fb85 	bl	8004698 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004f94:	bf00      	nop
 8004f96:	3758      	adds	r7, #88	; 0x58
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004faa:	2300      	movs	r3, #0
 8004fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fb0:	4917      	ldr	r1, [pc, #92]	; (8005010 <SEGGER_SYSVIEW_Init+0x74>)
 8004fb2:	4818      	ldr	r0, [pc, #96]	; (8005014 <SEGGER_SYSVIEW_Init+0x78>)
 8004fb4:	f7ff f93e 	bl	8004234 <SEGGER_RTT_AllocUpBuffer>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	4b16      	ldr	r3, [pc, #88]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fbe:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004fc0:	4b15      	ldr	r3, [pc, #84]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fc2:	785a      	ldrb	r2, [r3, #1]
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fc6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fca:	7e1b      	ldrb	r3, [r3, #24]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	2300      	movs	r3, #0
 8004fd0:	9300      	str	r3, [sp, #0]
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	4a11      	ldr	r2, [pc, #68]	; (800501c <SEGGER_SYSVIEW_Init+0x80>)
 8004fd6:	490f      	ldr	r1, [pc, #60]	; (8005014 <SEGGER_SYSVIEW_Init+0x78>)
 8004fd8:	f7ff f9b0 	bl	800433c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004fdc:	4b0e      	ldr	r3, [pc, #56]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <SEGGER_SYSVIEW_Init+0x84>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fe8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004fea:	4a0b      	ldr	r2, [pc, #44]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004ff0:	4a09      	ldr	r2, [pc, #36]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004ff6:	4a08      	ldr	r2, [pc, #32]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004ffc:	4a06      	ldr	r2, [pc, #24]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <SEGGER_SYSVIEW_Init+0x7c>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	2001331c 	.word	0x2001331c
 8005014:	080060a4 	.word	0x080060a4
 8005018:	20014324 	.word	0x20014324
 800501c:	2001431c 	.word	0x2001431c
 8005020:	e0001004 	.word	0xe0001004

08005024 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800502c:	4a04      	ldr	r2, [pc, #16]	; (8005040 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6113      	str	r3, [r2, #16]
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	20014324 	.word	0x20014324

08005044 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800504c:	f3ef 8311 	mrs	r3, BASEPRI
 8005050:	f04f 0120 	mov.w	r1, #32
 8005054:	f381 8811 	msr	BASEPRI, r1
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	4808      	ldr	r0, [pc, #32]	; (800507c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800505c:	f7ff fa2b 	bl	80044b6 <_PreparePacket>
 8005060:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68b8      	ldr	r0, [r7, #8]
 8005068:	f7ff fb16 	bl	8004698 <_SendPacket>
  RECORD_END();
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f383 8811 	msr	BASEPRI, r3
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20014354 	.word	0x20014354

08005080 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800508a:	f3ef 8311 	mrs	r3, BASEPRI
 800508e:	f04f 0120 	mov.w	r1, #32
 8005092:	f381 8811 	msr	BASEPRI, r1
 8005096:	617b      	str	r3, [r7, #20]
 8005098:	4816      	ldr	r0, [pc, #88]	; (80050f4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800509a:	f7ff fa0c 	bl	80044b6 <_PreparePacket>
 800509e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	61bb      	str	r3, [r7, #24]
 80050ac:	e00b      	b.n	80050c6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	61f9      	str	r1, [r7, #28]
 80050b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	09db      	lsrs	r3, r3, #7
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b7f      	cmp	r3, #127	; 0x7f
 80050ca:	d8f0      	bhi.n	80050ae <SEGGER_SYSVIEW_RecordU32+0x2e>
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	61fa      	str	r2, [r7, #28]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050dc:	687a      	ldr	r2, [r7, #4]
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	6938      	ldr	r0, [r7, #16]
 80050e2:	f7ff fad9 	bl	8004698 <_SendPacket>
  RECORD_END();
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f383 8811 	msr	BASEPRI, r3
}
 80050ec:	bf00      	nop
 80050ee:	3720      	adds	r7, #32
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20014354 	.word	0x20014354

080050f8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08c      	sub	sp, #48	; 0x30
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005104:	f3ef 8311 	mrs	r3, BASEPRI
 8005108:	f04f 0120 	mov.w	r1, #32
 800510c:	f381 8811 	msr	BASEPRI, r1
 8005110:	61fb      	str	r3, [r7, #28]
 8005112:	4825      	ldr	r0, [pc, #148]	; (80051a8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005114:	f7ff f9cf 	bl	80044b6 <_PreparePacket>
 8005118:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	62bb      	str	r3, [r7, #40]	; 0x28
 8005126:	e00b      	b.n	8005140 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512a:	b2da      	uxtb	r2, r3
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	1c59      	adds	r1, r3, #1
 8005130:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005132:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	09db      	lsrs	r3, r3, #7
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	2b7f      	cmp	r3, #127	; 0x7f
 8005144:	d8f0      	bhi.n	8005128 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800514c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	623b      	str	r3, [r7, #32]
 800515e:	e00b      	b.n	8005178 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	1c59      	adds	r1, r3, #1
 8005168:	6279      	str	r1, [r7, #36]	; 0x24
 800516a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	09db      	lsrs	r3, r3, #7
 8005176:	623b      	str	r3, [r7, #32]
 8005178:	6a3b      	ldr	r3, [r7, #32]
 800517a:	2b7f      	cmp	r3, #127	; 0x7f
 800517c:	d8f0      	bhi.n	8005160 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	627a      	str	r2, [r7, #36]	; 0x24
 8005184:	6a3a      	ldr	r2, [r7, #32]
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	69b8      	ldr	r0, [r7, #24]
 8005194:	f7ff fa80 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f383 8811 	msr	BASEPRI, r3
}
 800519e:	bf00      	nop
 80051a0:	3730      	adds	r7, #48	; 0x30
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20014354 	.word	0x20014354

080051ac <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b090      	sub	sp, #64	; 0x40
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
 80051b8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051ba:	f3ef 8311 	mrs	r3, BASEPRI
 80051be:	f04f 0120 	mov.w	r1, #32
 80051c2:	f381 8811 	msr	BASEPRI, r1
 80051c6:	61fb      	str	r3, [r7, #28]
 80051c8:	4840      	ldr	r0, [pc, #256]	; (80052cc <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80051ca:	f7ff f974 	bl	80044b6 <_PreparePacket>
 80051ce:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	63bb      	str	r3, [r7, #56]	; 0x38
 80051dc:	e00b      	b.n	80051f6 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80051de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e4:	1c59      	adds	r1, r3, #1
 80051e6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80051e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]
 80051f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f2:	09db      	lsrs	r3, r3, #7
 80051f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	2b7f      	cmp	r3, #127	; 0x7f
 80051fa:	d8f0      	bhi.n	80051de <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
 8005208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	637b      	str	r3, [r7, #52]	; 0x34
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
 8005214:	e00b      	b.n	800522e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	b2da      	uxtb	r2, r3
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	6379      	str	r1, [r7, #52]	; 0x34
 8005220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	09db      	lsrs	r3, r3, #7
 800522c:	633b      	str	r3, [r7, #48]	; 0x30
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	2b7f      	cmp	r3, #127	; 0x7f
 8005232:	d8f0      	bhi.n	8005216 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	637a      	str	r2, [r7, #52]	; 0x34
 800523a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005242:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28
 800524c:	e00b      	b.n	8005266 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	b2da      	uxtb	r2, r3
 8005252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005258:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	09db      	lsrs	r3, r3, #7
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	2b7f      	cmp	r3, #127	; 0x7f
 800526a:	d8f0      	bhi.n	800524e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
 8005280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005282:	623b      	str	r3, [r7, #32]
 8005284:	e00b      	b.n	800529e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	1c59      	adds	r1, r3, #1
 800528e:	6279      	str	r1, [r7, #36]	; 0x24
 8005290:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005294:	b2d2      	uxtb	r2, r2
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	09db      	lsrs	r3, r3, #7
 800529c:	623b      	str	r3, [r7, #32]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	2b7f      	cmp	r3, #127	; 0x7f
 80052a2:	d8f0      	bhi.n	8005286 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	627a      	str	r2, [r7, #36]	; 0x24
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	b2d2      	uxtb	r2, r2
 80052ae:	701a      	strb	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	6979      	ldr	r1, [r7, #20]
 80052b8:	69b8      	ldr	r0, [r7, #24]
 80052ba:	f7ff f9ed 	bl	8004698 <_SendPacket>
  RECORD_END();
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f383 8811 	msr	BASEPRI, r3
}
 80052c4:	bf00      	nop
 80052c6:	3740      	adds	r7, #64	; 0x40
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	20014354 	.word	0x20014354

080052d0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08c      	sub	sp, #48	; 0x30
 80052d4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80052d6:	4b59      	ldr	r3, [pc, #356]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80052dc:	f3ef 8311 	mrs	r3, BASEPRI
 80052e0:	f04f 0120 	mov.w	r1, #32
 80052e4:	f381 8811 	msr	BASEPRI, r1
 80052e8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80052ea:	4b54      	ldr	r3, [pc, #336]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	220a      	movs	r2, #10
 80052f0:	4953      	ldr	r1, [pc, #332]	; (8005440 <SEGGER_SYSVIEW_Start+0x170>)
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fa ff6c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 80052fe:	f7fe feab 	bl	8004058 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005302:	200a      	movs	r0, #10
 8005304:	f7ff fe9e 	bl	8005044 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005308:	f3ef 8311 	mrs	r3, BASEPRI
 800530c:	f04f 0120 	mov.w	r1, #32
 8005310:	f381 8811 	msr	BASEPRI, r1
 8005314:	60bb      	str	r3, [r7, #8]
 8005316:	484b      	ldr	r0, [pc, #300]	; (8005444 <SEGGER_SYSVIEW_Start+0x174>)
 8005318:	f7ff f8cd 	bl	80044b6 <_PreparePacket>
 800531c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005326:	4b45      	ldr	r3, [pc, #276]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	62bb      	str	r3, [r7, #40]	; 0x28
 800532c:	e00b      	b.n	8005346 <SEGGER_SYSVIEW_Start+0x76>
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	b2da      	uxtb	r2, r3
 8005332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005334:	1c59      	adds	r1, r3, #1
 8005336:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005348:	2b7f      	cmp	r3, #127	; 0x7f
 800534a:	d8f0      	bhi.n	800532e <SEGGER_SYSVIEW_Start+0x5e>
 800534c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534e:	1c5a      	adds	r2, r3, #1
 8005350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005352:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	e00b      	b.n	8005380 <SEGGER_SYSVIEW_Start+0xb0>
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	1c59      	adds	r1, r3, #1
 8005370:	6279      	str	r1, [r7, #36]	; 0x24
 8005372:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	09db      	lsrs	r3, r3, #7
 800537e:	623b      	str	r3, [r7, #32]
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	2b7f      	cmp	r3, #127	; 0x7f
 8005384:	d8f0      	bhi.n	8005368 <SEGGER_SYSVIEW_Start+0x98>
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	627a      	str	r2, [r7, #36]	; 0x24
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	61fb      	str	r3, [r7, #28]
 800539a:	4b28      	ldr	r3, [pc, #160]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e00b      	b.n	80053ba <SEGGER_SYSVIEW_Start+0xea>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	1c59      	adds	r1, r3, #1
 80053aa:	61f9      	str	r1, [r7, #28]
 80053ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	09db      	lsrs	r3, r3, #7
 80053b8:	61bb      	str	r3, [r7, #24]
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	2b7f      	cmp	r3, #127	; 0x7f
 80053be:	d8f0      	bhi.n	80053a2 <SEGGER_SYSVIEW_Start+0xd2>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	61fa      	str	r2, [r7, #28]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	2300      	movs	r3, #0
 80053d6:	613b      	str	r3, [r7, #16]
 80053d8:	e00b      	b.n	80053f2 <SEGGER_SYSVIEW_Start+0x122>
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	1c59      	adds	r1, r3, #1
 80053e2:	6179      	str	r1, [r7, #20]
 80053e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	09db      	lsrs	r3, r3, #7
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b7f      	cmp	r3, #127	; 0x7f
 80053f6:	d8f0      	bhi.n	80053da <SEGGER_SYSVIEW_Start+0x10a>
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	617a      	str	r2, [r7, #20]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005408:	2218      	movs	r2, #24
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7ff f943 	bl	8004698 <_SendPacket>
      RECORD_END();
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <SEGGER_SYSVIEW_Start+0x16c>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005426:	f000 f9eb 	bl	8005800 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800542a:	f000 f9b1 	bl	8005790 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800542e:	f000 fc83 	bl	8005d38 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005432:	bf00      	nop
 8005434:	3730      	adds	r7, #48	; 0x30
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20014324 	.word	0x20014324
 8005440:	080060cc 	.word	0x080060cc
 8005444:	20014354 	.word	0x20014354

08005448 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800544e:	f3ef 8311 	mrs	r3, BASEPRI
 8005452:	f04f 0120 	mov.w	r1, #32
 8005456:	f381 8811 	msr	BASEPRI, r1
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	480b      	ldr	r0, [pc, #44]	; (800548c <SEGGER_SYSVIEW_Stop+0x44>)
 800545e:	f7ff f82a 	bl	80044b6 <_PreparePacket>
 8005462:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <SEGGER_SYSVIEW_Stop+0x48>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800546c:	220b      	movs	r2, #11
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6838      	ldr	r0, [r7, #0]
 8005472:	f7ff f911 	bl	8004698 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <SEGGER_SYSVIEW_Stop+0x48>)
 8005478:	2200      	movs	r2, #0
 800547a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f383 8811 	msr	BASEPRI, r3
}
 8005482:	bf00      	nop
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	20014354 	.word	0x20014354
 8005490:	20014324 	.word	0x20014324

08005494 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005494:	b580      	push	{r7, lr}
 8005496:	b08c      	sub	sp, #48	; 0x30
 8005498:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800549a:	f3ef 8311 	mrs	r3, BASEPRI
 800549e:	f04f 0120 	mov.w	r1, #32
 80054a2:	f381 8811 	msr	BASEPRI, r1
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	4845      	ldr	r0, [pc, #276]	; (80055c0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054aa:	f7ff f804 	bl	80044b6 <_PreparePacket>
 80054ae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054b8:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054be:	e00b      	b.n	80054d8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	1c59      	adds	r1, r3, #1
 80054c8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	09db      	lsrs	r3, r3, #7
 80054d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054da:	2b7f      	cmp	r3, #127	; 0x7f
 80054dc:	d8f0      	bhi.n	80054c0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
 80054f2:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	623b      	str	r3, [r7, #32]
 80054f8:	e00b      	b.n	8005512 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1c59      	adds	r1, r3, #1
 8005502:	6279      	str	r1, [r7, #36]	; 0x24
 8005504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005508:	b2d2      	uxtb	r2, r2
 800550a:	701a      	strb	r2, [r3, #0]
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	09db      	lsrs	r3, r3, #7
 8005510:	623b      	str	r3, [r7, #32]
 8005512:	6a3b      	ldr	r3, [r7, #32]
 8005514:	2b7f      	cmp	r3, #127	; 0x7f
 8005516:	d8f0      	bhi.n	80054fa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	627a      	str	r2, [r7, #36]	; 0x24
 800551e:	6a3a      	ldr	r2, [r7, #32]
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	4b25      	ldr	r3, [pc, #148]	; (80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e00b      	b.n	800554c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	61f9      	str	r1, [r7, #28]
 800553e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	09db      	lsrs	r3, r3, #7
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b7f      	cmp	r3, #127	; 0x7f
 8005550:	d8f0      	bhi.n	8005534 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	61fa      	str	r2, [r7, #28]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	2300      	movs	r3, #0
 8005568:	613b      	str	r3, [r7, #16]
 800556a:	e00b      	b.n	8005584 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6179      	str	r1, [r7, #20]
 8005576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	613b      	str	r3, [r7, #16]
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	2b7f      	cmp	r3, #127	; 0x7f
 8005588:	d8f0      	bhi.n	800556c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	617a      	str	r2, [r7, #20]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800559a:	2218      	movs	r2, #24
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68b8      	ldr	r0, [r7, #8]
 80055a0:	f7ff f87a 	bl	8004698 <_SendPacket>
  RECORD_END();
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055aa:	4b06      	ldr	r3, [pc, #24]	; (80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d002      	beq.n	80055b8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055b2:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	4798      	blx	r3
  }
}
 80055b8:	bf00      	nop
 80055ba:	3730      	adds	r7, #48	; 0x30
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20014354 	.word	0x20014354
 80055c4:	20014324 	.word	0x20014324

080055c8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b092      	sub	sp, #72	; 0x48
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80055d0:	f3ef 8311 	mrs	r3, BASEPRI
 80055d4:	f04f 0120 	mov.w	r1, #32
 80055d8:	f381 8811 	msr	BASEPRI, r1
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	486a      	ldr	r0, [pc, #424]	; (8005788 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80055e0:	f7fe ff69 	bl	80044b6 <_PreparePacket>
 80055e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	647b      	str	r3, [r7, #68]	; 0x44
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b66      	ldr	r3, [pc, #408]	; (800578c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
 80055fa:	e00b      	b.n	8005614 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005602:	1c59      	adds	r1, r3, #1
 8005604:	6479      	str	r1, [r7, #68]	; 0x44
 8005606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005610:	09db      	lsrs	r3, r3, #7
 8005612:	643b      	str	r3, [r7, #64]	; 0x40
 8005614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005616:	2b7f      	cmp	r3, #127	; 0x7f
 8005618:	d8f0      	bhi.n	80055fc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800561a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	647a      	str	r2, [r7, #68]	; 0x44
 8005620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	63bb      	str	r3, [r7, #56]	; 0x38
 8005634:	e00b      	b.n	800564e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	b2da      	uxtb	r2, r3
 800563a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800563c:	1c59      	adds	r1, r3, #1
 800563e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005640:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564a:	09db      	lsrs	r3, r3, #7
 800564c:	63bb      	str	r3, [r7, #56]	; 0x38
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	2b7f      	cmp	r3, #127	; 0x7f
 8005652:	d8f0      	bhi.n	8005636 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005656:	1c5a      	adds	r2, r3, #1
 8005658:	63fa      	str	r2, [r7, #60]	; 0x3c
 800565a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565c:	b2d2      	uxtb	r2, r2
 800565e:	701a      	strb	r2, [r3, #0]
 8005660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005662:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	4619      	mov	r1, r3
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7fe fed5 	bl	800441c <_EncodeStr>
 8005672:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005674:	2209      	movs	r2, #9
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	6938      	ldr	r0, [r7, #16]
 800567a:	f7ff f80d 	bl	8004698 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b40      	ldr	r3, [pc, #256]	; (800578c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	633b      	str	r3, [r7, #48]	; 0x30
 8005692:	e00b      	b.n	80056ac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	b2da      	uxtb	r2, r3
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	6379      	str	r1, [r7, #52]	; 0x34
 800569e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056a2:	b2d2      	uxtb	r2, r2
 80056a4:	701a      	strb	r2, [r3, #0]
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	09db      	lsrs	r3, r3, #7
 80056aa:	633b      	str	r3, [r7, #48]	; 0x30
 80056ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ae:	2b7f      	cmp	r3, #127	; 0x7f
 80056b0:	d8f0      	bhi.n	8005694 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	637a      	str	r2, [r7, #52]	; 0x34
 80056b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80056cc:	e00b      	b.n	80056e6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	1c59      	adds	r1, r3, #1
 80056d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80056d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056dc:	b2d2      	uxtb	r2, r2
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	09db      	lsrs	r3, r3, #7
 80056e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ea:	d8f0      	bhi.n	80056ce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80056ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f4:	b2d2      	uxtb	r2, r2
 80056f6:	701a      	strb	r2, [r3, #0]
 80056f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	e00b      	b.n	8005720 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	6279      	str	r1, [r7, #36]	; 0x24
 8005712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	09db      	lsrs	r3, r3, #7
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2b7f      	cmp	r3, #127	; 0x7f
 8005724:	d8f0      	bhi.n	8005708 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	627a      	str	r2, [r7, #36]	; 0x24
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	e00b      	b.n	8005758 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	b2da      	uxtb	r2, r3
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	1c59      	adds	r1, r3, #1
 8005748:	61f9      	str	r1, [r7, #28]
 800574a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	09db      	lsrs	r3, r3, #7
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	2b7f      	cmp	r3, #127	; 0x7f
 800575c:	d8f0      	bhi.n	8005740 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	61fa      	str	r2, [r7, #28]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800576e:	2215      	movs	r2, #21
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	6938      	ldr	r0, [r7, #16]
 8005774:	f7fe ff90 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f383 8811 	msr	BASEPRI, r3
}
 800577e:	bf00      	nop
 8005780:	3748      	adds	r7, #72	; 0x48
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20014354 	.word	0x20014354
 800578c:	20014324 	.word	0x20014324

08005790 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005794:	4b07      	ldr	r3, [pc, #28]	; (80057b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800579c:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057a6:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4798      	blx	r3
  }
}
 80057ae:	bf00      	nop
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20014324 	.word	0x20014324

080057b8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057c0:	f3ef 8311 	mrs	r3, BASEPRI
 80057c4:	f04f 0120 	mov.w	r1, #32
 80057c8:	f381 8811 	msr	BASEPRI, r1
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	480b      	ldr	r0, [pc, #44]	; (80057fc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80057d0:	f7fe fe71 	bl	80044b6 <_PreparePacket>
 80057d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057d6:	2280      	movs	r2, #128	; 0x80
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	6938      	ldr	r0, [r7, #16]
 80057dc:	f7fe fe1e 	bl	800441c <_EncodeStr>
 80057e0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80057e2:	220e      	movs	r2, #14
 80057e4:	68f9      	ldr	r1, [r7, #12]
 80057e6:	6938      	ldr	r0, [r7, #16]
 80057e8:	f7fe ff56 	bl	8004698 <_SendPacket>
  RECORD_END();
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f383 8811 	msr	BASEPRI, r3
}
 80057f2:	bf00      	nop
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20014354 	.word	0x20014354

08005800 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005800:	b590      	push	{r4, r7, lr}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005806:	4b15      	ldr	r3, [pc, #84]	; (800585c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01a      	beq.n	8005844 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800580e:	4b13      	ldr	r3, [pc, #76]	; (800585c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d015      	beq.n	8005844 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005818:	4b10      	ldr	r3, [pc, #64]	; (800585c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4798      	blx	r3
 8005820:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005824:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	000a      	movs	r2, r1
 8005834:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005836:	4613      	mov	r3, r2
 8005838:	461a      	mov	r2, r3
 800583a:	4621      	mov	r1, r4
 800583c:	200d      	movs	r0, #13
 800583e:	f7ff fc5b 	bl	80050f8 <SEGGER_SYSVIEW_RecordU32x2>
 8005842:	e006      	b.n	8005852 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005844:	4b06      	ldr	r3, [pc, #24]	; (8005860 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4619      	mov	r1, r3
 800584a:	200c      	movs	r0, #12
 800584c:	f7ff fc18 	bl	8005080 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	bd90      	pop	{r4, r7, pc}
 800585a:	bf00      	nop
 800585c:	20014324 	.word	0x20014324
 8005860:	e0001004 	.word	0xe0001004

08005864 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800586a:	f3ef 8311 	mrs	r3, BASEPRI
 800586e:	f04f 0120 	mov.w	r1, #32
 8005872:	f381 8811 	msr	BASEPRI, r1
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	4819      	ldr	r0, [pc, #100]	; (80058e0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800587a:	f7fe fe1c 	bl	80044b6 <_PreparePacket>
 800587e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800588c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e00b      	b.n	80058b0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	1c59      	adds	r1, r3, #1
 80058a0:	6179      	str	r1, [r7, #20]
 80058a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	09db      	lsrs	r3, r3, #7
 80058ae:	613b      	str	r3, [r7, #16]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b7f      	cmp	r3, #127	; 0x7f
 80058b4:	d8f0      	bhi.n	8005898 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	617a      	str	r2, [r7, #20]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058c6:	2202      	movs	r2, #2
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	68b8      	ldr	r0, [r7, #8]
 80058cc:	f7fe fee4 	bl	8004698 <_SendPacket>
  RECORD_END();
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f383 8811 	msr	BASEPRI, r3
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20014354 	.word	0x20014354
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80058ee:	f3ef 8311 	mrs	r3, BASEPRI
 80058f2:	f04f 0120 	mov.w	r1, #32
 80058f6:	f381 8811 	msr	BASEPRI, r1
 80058fa:	607b      	str	r3, [r7, #4]
 80058fc:	4807      	ldr	r0, [pc, #28]	; (800591c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80058fe:	f7fe fdda 	bl	80044b6 <_PreparePacket>
 8005902:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005904:	2203      	movs	r2, #3
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6838      	ldr	r0, [r7, #0]
 800590a:	f7fe fec5 	bl	8004698 <_SendPacket>
  RECORD_END();
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f383 8811 	msr	BASEPRI, r3
}
 8005914:	bf00      	nop
 8005916:	3708      	adds	r7, #8
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20014354 	.word	0x20014354

08005920 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005926:	f3ef 8311 	mrs	r3, BASEPRI
 800592a:	f04f 0120 	mov.w	r1, #32
 800592e:	f381 8811 	msr	BASEPRI, r1
 8005932:	607b      	str	r3, [r7, #4]
 8005934:	4807      	ldr	r0, [pc, #28]	; (8005954 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005936:	f7fe fdbe 	bl	80044b6 <_PreparePacket>
 800593a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800593c:	2212      	movs	r2, #18
 800593e:	6839      	ldr	r1, [r7, #0]
 8005940:	6838      	ldr	r0, [r7, #0]
 8005942:	f7fe fea9 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f383 8811 	msr	BASEPRI, r3
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20014354 	.word	0x20014354

08005958 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800595e:	f3ef 8311 	mrs	r3, BASEPRI
 8005962:	f04f 0120 	mov.w	r1, #32
 8005966:	f381 8811 	msr	BASEPRI, r1
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	4807      	ldr	r0, [pc, #28]	; (800598c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800596e:	f7fe fda2 	bl	80044b6 <_PreparePacket>
 8005972:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005974:	2211      	movs	r2, #17
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6838      	ldr	r0, [r7, #0]
 800597a:	f7fe fe8d 	bl	8004698 <_SendPacket>
  RECORD_END();
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f383 8811 	msr	BASEPRI, r3
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20014354 	.word	0x20014354

08005990 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005998:	f3ef 8311 	mrs	r3, BASEPRI
 800599c:	f04f 0120 	mov.w	r1, #32
 80059a0:	f381 8811 	msr	BASEPRI, r1
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	4819      	ldr	r0, [pc, #100]	; (8005a0c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80059a8:	f7fe fd85 	bl	80044b6 <_PreparePacket>
 80059ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80059b2:	4b17      	ldr	r3, [pc, #92]	; (8005a10 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	61fb      	str	r3, [r7, #28]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e00b      	b.n	80059de <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	61f9      	str	r1, [r7, #28]
 80059d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	09db      	lsrs	r3, r3, #7
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	2b7f      	cmp	r3, #127	; 0x7f
 80059e2:	d8f0      	bhi.n	80059c6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	1c5a      	adds	r2, r3, #1
 80059e8:	61fa      	str	r2, [r7, #28]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	b2d2      	uxtb	r2, r2
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80059f4:	2208      	movs	r2, #8
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	6938      	ldr	r0, [r7, #16]
 80059fa:	f7fe fe4d 	bl	8004698 <_SendPacket>
  RECORD_END();
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f383 8811 	msr	BASEPRI, r3
}
 8005a04:	bf00      	nop
 8005a06:	3720      	adds	r7, #32
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20014354 	.word	0x20014354
 8005a10:	20014324 	.word	0x20014324

08005a14 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a20:	f04f 0120 	mov.w	r1, #32
 8005a24:	f381 8811 	msr	BASEPRI, r1
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	4819      	ldr	r0, [pc, #100]	; (8005a90 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005a2c:	f7fe fd43 	bl	80044b6 <_PreparePacket>
 8005a30:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005a36:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	61fb      	str	r3, [r7, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	61bb      	str	r3, [r7, #24]
 8005a48:	e00b      	b.n	8005a62 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	61f9      	str	r1, [r7, #28]
 8005a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b7f      	cmp	r3, #127	; 0x7f
 8005a66:	d8f0      	bhi.n	8005a4a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	61fa      	str	r2, [r7, #28]
 8005a6e:	69ba      	ldr	r2, [r7, #24]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005a78:	2204      	movs	r2, #4
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	6938      	ldr	r0, [r7, #16]
 8005a7e:	f7fe fe0b 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f383 8811 	msr	BASEPRI, r3
}
 8005a88:	bf00      	nop
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20014354 	.word	0x20014354
 8005a94:	20014324 	.word	0x20014324

08005a98 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005aa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa4:	f04f 0120 	mov.w	r1, #32
 8005aa8:	f381 8811 	msr	BASEPRI, r1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	4819      	ldr	r0, [pc, #100]	; (8005b14 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005ab0:	f7fe fd01 	bl	80044b6 <_PreparePacket>
 8005ab4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	e00b      	b.n	8005ae6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	1c59      	adds	r1, r3, #1
 8005ad6:	61f9      	str	r1, [r7, #28]
 8005ad8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	09db      	lsrs	r3, r3, #7
 8005ae4:	61bb      	str	r3, [r7, #24]
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aea:	d8f0      	bhi.n	8005ace <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	61fa      	str	r2, [r7, #28]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	701a      	strb	r2, [r3, #0]
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005afc:	2206      	movs	r2, #6
 8005afe:	68f9      	ldr	r1, [r7, #12]
 8005b00:	6938      	ldr	r0, [r7, #16]
 8005b02:	f7fe fdc9 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f383 8811 	msr	BASEPRI, r3
}
 8005b0c:	bf00      	nop
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20014354 	.word	0x20014354
 8005b18:	20014324 	.word	0x20014324

08005b1c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b26:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2a:	f04f 0120 	mov.w	r1, #32
 8005b2e:	f381 8811 	msr	BASEPRI, r1
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	4827      	ldr	r0, [pc, #156]	; (8005bd4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005b36:	f7fe fcbe 	bl	80044b6 <_PreparePacket>
 8005b3a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b40:	4b25      	ldr	r3, [pc, #148]	; (8005bd8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	623b      	str	r3, [r7, #32]
 8005b52:	e00b      	b.n	8005b6c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	6279      	str	r1, [r7, #36]	; 0x24
 8005b5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	09db      	lsrs	r3, r3, #7
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b7f      	cmp	r3, #127	; 0x7f
 8005b70:	d8f0      	bhi.n	8005b54 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	627a      	str	r2, [r7, #36]	; 0x24
 8005b78:	6a3a      	ldr	r2, [r7, #32]
 8005b7a:	b2d2      	uxtb	r2, r2
 8005b7c:	701a      	strb	r2, [r3, #0]
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e00b      	b.n	8005ba4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	1c59      	adds	r1, r3, #1
 8005b94:	61f9      	str	r1, [r7, #28]
 8005b96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	09db      	lsrs	r3, r3, #7
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba8:	d8f0      	bhi.n	8005b8c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	1c5a      	adds	r2, r3, #1
 8005bae:	61fa      	str	r2, [r7, #28]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	b2d2      	uxtb	r2, r2
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005bba:	2207      	movs	r2, #7
 8005bbc:	68f9      	ldr	r1, [r7, #12]
 8005bbe:	6938      	ldr	r0, [r7, #16]
 8005bc0:	f7fe fd6a 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f383 8811 	msr	BASEPRI, r3
}
 8005bca:	bf00      	nop
 8005bcc:	3728      	adds	r7, #40	; 0x28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20014354 	.word	0x20014354
 8005bd8:	20014324 	.word	0x20014324

08005bdc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	1ad3      	subs	r3, r2, r3
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	20014324 	.word	0x20014324

08005bfc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b08c      	sub	sp, #48	; 0x30
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c06:	4b3b      	ldr	r3, [pc, #236]	; (8005cf4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d06d      	beq.n	8005cea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005c0e:	4b39      	ldr	r3, [pc, #228]	; (8005cf4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c14:	2300      	movs	r3, #0
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c18:	e008      	b.n	8005c2c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d007      	beq.n	8005c36 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	3301      	adds	r3, #1
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d3f2      	bcc.n	8005c1a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005c34:	e000      	b.n	8005c38 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005c36:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d055      	beq.n	8005cea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005c3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c42:	f04f 0120 	mov.w	r1, #32
 8005c46:	f381 8811 	msr	BASEPRI, r1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	482a      	ldr	r0, [pc, #168]	; (8005cf8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005c4e:	f7fe fc32 	bl	80044b6 <_PreparePacket>
 8005c52:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	623b      	str	r3, [r7, #32]
 8005c60:	e00b      	b.n	8005c7a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	1c59      	adds	r1, r3, #1
 8005c6a:	6279      	str	r1, [r7, #36]	; 0x24
 8005c6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	09db      	lsrs	r3, r3, #7
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	6a3b      	ldr	r3, [r7, #32]
 8005c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c7e:	d8f0      	bhi.n	8005c62 <SEGGER_SYSVIEW_SendModule+0x66>
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	627a      	str	r2, [r7, #36]	; 0x24
 8005c86:	6a3a      	ldr	r2, [r7, #32]
 8005c88:	b2d2      	uxtb	r2, r2
 8005c8a:	701a      	strb	r2, [r3, #0]
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	e00b      	b.n	8005cb4 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	1c59      	adds	r1, r3, #1
 8005ca4:	61f9      	str	r1, [r7, #28]
 8005ca6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	09db      	lsrs	r3, r3, #7
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb8:	d8f0      	bhi.n	8005c9c <SEGGER_SYSVIEW_SendModule+0xa0>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	61fa      	str	r2, [r7, #28]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	b2d2      	uxtb	r2, r2
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2280      	movs	r2, #128	; 0x80
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7fe fba2 	bl	800441c <_EncodeStr>
 8005cd8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005cda:	2216      	movs	r2, #22
 8005cdc:	68f9      	ldr	r1, [r7, #12]
 8005cde:	6938      	ldr	r0, [r7, #16]
 8005ce0:	f7fe fcda 	bl	8004698 <_SendPacket>
      RECORD_END();
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005cea:	bf00      	nop
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2001434c 	.word	0x2001434c
 8005cf8:	20014354 	.word	0x20014354

08005cfc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d02:	4b0c      	ldr	r3, [pc, #48]	; (8005d34 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00f      	beq.n	8005d2a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	; (8005d34 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f2      	bne.n	8005d10 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	2001434c 	.word	0x2001434c

08005d38 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b086      	sub	sp, #24
 8005d3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8005d42:	f04f 0120 	mov.w	r1, #32
 8005d46:	f381 8811 	msr	BASEPRI, r1
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	4817      	ldr	r0, [pc, #92]	; (8005dac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005d4e:	f7fe fbb2 	bl	80044b6 <_PreparePacket>
 8005d52:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	617b      	str	r3, [r7, #20]
 8005d5c:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	613b      	str	r3, [r7, #16]
 8005d62:	e00b      	b.n	8005d7c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	1c59      	adds	r1, r3, #1
 8005d6c:	6179      	str	r1, [r7, #20]
 8005d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	09db      	lsrs	r3, r3, #7
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d8f0      	bhi.n	8005d64 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	1c5a      	adds	r2, r3, #1
 8005d86:	617a      	str	r2, [r7, #20]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005d92:	221b      	movs	r2, #27
 8005d94:	6879      	ldr	r1, [r7, #4]
 8005d96:	68b8      	ldr	r0, [r7, #8]
 8005d98:	f7fe fc7e 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f383 8811 	msr	BASEPRI, r3
}
 8005da2:	bf00      	nop
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20014354 	.word	0x20014354
 8005db0:	20014350 	.word	0x20014350

08005db4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005db4:	b40f      	push	{r0, r1, r2, r3}
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005dc2:	1d3b      	adds	r3, r7, #4
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	6938      	ldr	r0, [r7, #16]
 8005dca:	f7fe feef 	bl	8004bac <_VPrintTarget>
  va_end(ParamList);
}
 8005dce:	bf00      	nop
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dd8:	b004      	add	sp, #16
 8005dda:	4770      	bx	lr

08005ddc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005de4:	f3ef 8311 	mrs	r3, BASEPRI
 8005de8:	f04f 0120 	mov.w	r1, #32
 8005dec:	f381 8811 	msr	BASEPRI, r1
 8005df0:	617b      	str	r3, [r7, #20]
 8005df2:	4827      	ldr	r0, [pc, #156]	; (8005e90 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005df4:	f7fe fb5f 	bl	80044b6 <_PreparePacket>
 8005df8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005dfa:	2280      	movs	r2, #128	; 0x80
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	6938      	ldr	r0, [r7, #16]
 8005e00:	f7fe fb0c 	bl	800441c <_EncodeStr>
 8005e04:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	623b      	str	r3, [r7, #32]
 8005e0e:	e00b      	b.n	8005e28 <SEGGER_SYSVIEW_Warn+0x4c>
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	b2da      	uxtb	r2, r3
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	1c59      	adds	r1, r3, #1
 8005e18:	6279      	str	r1, [r7, #36]	; 0x24
 8005e1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	09db      	lsrs	r3, r3, #7
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005e2c:	d8f0      	bhi.n	8005e10 <SEGGER_SYSVIEW_Warn+0x34>
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	627a      	str	r2, [r7, #36]	; 0x24
 8005e34:	6a3a      	ldr	r2, [r7, #32]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e00b      	b.n	8005e60 <SEGGER_SYSVIEW_Warn+0x84>
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	b2da      	uxtb	r2, r3
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	1c59      	adds	r1, r3, #1
 8005e50:	61f9      	str	r1, [r7, #28]
 8005e52:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	09db      	lsrs	r3, r3, #7
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	2b7f      	cmp	r3, #127	; 0x7f
 8005e64:	d8f0      	bhi.n	8005e48 <SEGGER_SYSVIEW_Warn+0x6c>
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	1c5a      	adds	r2, r3, #1
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	69ba      	ldr	r2, [r7, #24]
 8005e6e:	b2d2      	uxtb	r2, r2
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005e76:	221a      	movs	r2, #26
 8005e78:	68f9      	ldr	r1, [r7, #12]
 8005e7a:	6938      	ldr	r0, [r7, #16]
 8005e7c:	f7fe fc0c 	bl	8004698 <_SendPacket>
  RECORD_END();
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f383 8811 	msr	BASEPRI, r3
}
 8005e86:	bf00      	nop
 8005e88:	3728      	adds	r7, #40	; 0x28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20014354 	.word	0x20014354

08005e94 <memcmp>:
 8005e94:	b510      	push	{r4, lr}
 8005e96:	3901      	subs	r1, #1
 8005e98:	4402      	add	r2, r0
 8005e9a:	4290      	cmp	r0, r2
 8005e9c:	d101      	bne.n	8005ea2 <memcmp+0xe>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e005      	b.n	8005eae <memcmp+0x1a>
 8005ea2:	7803      	ldrb	r3, [r0, #0]
 8005ea4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005ea8:	42a3      	cmp	r3, r4
 8005eaa:	d001      	beq.n	8005eb0 <memcmp+0x1c>
 8005eac:	1b18      	subs	r0, r3, r4
 8005eae:	bd10      	pop	{r4, pc}
 8005eb0:	3001      	adds	r0, #1
 8005eb2:	e7f2      	b.n	8005e9a <memcmp+0x6>

08005eb4 <memset>:
 8005eb4:	4402      	add	r2, r0
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d100      	bne.n	8005ebe <memset+0xa>
 8005ebc:	4770      	bx	lr
 8005ebe:	f803 1b01 	strb.w	r1, [r3], #1
 8005ec2:	e7f9      	b.n	8005eb8 <memset+0x4>

08005ec4 <__libc_init_array>:
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	4d0d      	ldr	r5, [pc, #52]	; (8005efc <__libc_init_array+0x38>)
 8005ec8:	4c0d      	ldr	r4, [pc, #52]	; (8005f00 <__libc_init_array+0x3c>)
 8005eca:	1b64      	subs	r4, r4, r5
 8005ecc:	10a4      	asrs	r4, r4, #2
 8005ece:	2600      	movs	r6, #0
 8005ed0:	42a6      	cmp	r6, r4
 8005ed2:	d109      	bne.n	8005ee8 <__libc_init_array+0x24>
 8005ed4:	4d0b      	ldr	r5, [pc, #44]	; (8005f04 <__libc_init_array+0x40>)
 8005ed6:	4c0c      	ldr	r4, [pc, #48]	; (8005f08 <__libc_init_array+0x44>)
 8005ed8:	f000 f826 	bl	8005f28 <_init>
 8005edc:	1b64      	subs	r4, r4, r5
 8005ede:	10a4      	asrs	r4, r4, #2
 8005ee0:	2600      	movs	r6, #0
 8005ee2:	42a6      	cmp	r6, r4
 8005ee4:	d105      	bne.n	8005ef2 <__libc_init_array+0x2e>
 8005ee6:	bd70      	pop	{r4, r5, r6, pc}
 8005ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eec:	4798      	blx	r3
 8005eee:	3601      	adds	r6, #1
 8005ef0:	e7ee      	b.n	8005ed0 <__libc_init_array+0xc>
 8005ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ef6:	4798      	blx	r3
 8005ef8:	3601      	adds	r6, #1
 8005efa:	e7f2      	b.n	8005ee2 <__libc_init_array+0x1e>
 8005efc:	080060f0 	.word	0x080060f0
 8005f00:	080060f0 	.word	0x080060f0
 8005f04:	080060f0 	.word	0x080060f0
 8005f08:	080060f4 	.word	0x080060f4

08005f0c <memcpy>:
 8005f0c:	440a      	add	r2, r1
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f14:	d100      	bne.n	8005f18 <memcpy+0xc>
 8005f16:	4770      	bx	lr
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f22:	4291      	cmp	r1, r2
 8005f24:	d1f9      	bne.n	8005f1a <memcpy+0xe>
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <_init>:
 8005f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f2a:	bf00      	nop
 8005f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2e:	bc08      	pop	{r3}
 8005f30:	469e      	mov	lr, r3
 8005f32:	4770      	bx	lr

08005f34 <_fini>:
 8005f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f36:	bf00      	nop
 8005f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3a:	bc08      	pop	{r3}
 8005f3c:	469e      	mov	lr, r3
 8005f3e:	4770      	bx	lr
