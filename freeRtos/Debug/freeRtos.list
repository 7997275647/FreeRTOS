
freeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005088  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005288  08005288  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005290  08005290  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00004b04  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b70  20004b70  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012eee  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002e39  00000000  00000000  00032fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001230  00000000  00000000  00035e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000df9  00000000  00000000  00037038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004102  00000000  00000000  00037e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013614  00000000  00000000  0003bf33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4969  00000000  00000000  0004f547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005280  00000000  00000000  00123eb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00129130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005200 	.word	0x08005200

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005200 	.word	0x08005200

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fbe5 	bl	8000ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f845 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8ad 	bl	8000638 <MX_GPIO_Init>

  /* Create the thread(s) */
  /* creation of defaultTask */


  status = xTaskCreate(Task1_Handle, "Task-1", 200, "Hello World from Task-1",2, &task1_handle);
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	2302      	movs	r3, #2
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	4b18      	ldr	r3, [pc, #96]	; (800054c <main+0x80>)
 80004ea:	22c8      	movs	r2, #200	; 0xc8
 80004ec:	4918      	ldr	r1, [pc, #96]	; (8000550 <main+0x84>)
 80004ee:	4819      	ldr	r0, [pc, #100]	; (8000554 <main+0x88>)
 80004f0:	f002 fc17 	bl	8002d22 <xTaskCreate>
 80004f4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d00a      	beq.n	8000512 <main+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80004fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000500:	f383 8811 	msr	BASEPRI, r3
 8000504:	f3bf 8f6f 	isb	sy
 8000508:	f3bf 8f4f 	dsb	sy
 800050c:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800050e:	bf00      	nop
 8000510:	e7fe      	b.n	8000510 <main+0x44>

  status = xTaskCreate(Task2_Handle, "Task-2", 200, "Hello World from Task-2",2, &task2_handle);
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2302      	movs	r3, #2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <main+0x8c>)
 800051c:	22c8      	movs	r2, #200	; 0xc8
 800051e:	490f      	ldr	r1, [pc, #60]	; (800055c <main+0x90>)
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <main+0x94>)
 8000522:	f002 fbfe 	bl	8002d22 <xTaskCreate>
 8000526:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d00a      	beq.n	8000544 <main+0x78>
	__asm volatile
 800052e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000532:	f383 8811 	msr	BASEPRI, r3
 8000536:	f3bf 8f6f 	isb	sy
 800053a:	f3bf 8f4f 	dsb	sy
 800053e:	60fb      	str	r3, [r7, #12]
}
 8000540:	bf00      	nop
 8000542:	e7fe      	b.n	8000542 <main+0x76>

  vTaskStartScheduler();
 8000544:	f002 fd22 	bl	8002f8c <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000548:	e7fe      	b.n	8000548 <main+0x7c>
 800054a:	bf00      	nop
 800054c:	08005218 	.word	0x08005218
 8000550:	08005230 	.word	0x08005230
 8000554:	080008f5 	.word	0x080008f5
 8000558:	08005238 	.word	0x08005238
 800055c:	08005250 	.word	0x08005250
 8000560:	08000919 	.word	0x08000919

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f004 fb78 	bl	8004c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005cc:	2302      	movs	r3, #2
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80005d8:	2332      	movs	r3, #50	; 0x32
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005dc:	2304      	movs	r3, #4
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fe33 	bl	8001254 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f9b4 	bl	8000960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f894 	bl	8001744 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f99d 	bl	8000960 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	4ba2      	ldr	r3, [pc, #648]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4aa1      	ldr	r2, [pc, #644]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000658:	f043 0310 	orr.w	r3, r3, #16
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b9f      	ldr	r3, [pc, #636]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0310 	and.w	r3, r3, #16
 8000666:	61bb      	str	r3, [r7, #24]
 8000668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
 800066e:	4b9b      	ldr	r3, [pc, #620]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a9a      	ldr	r2, [pc, #616]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b98      	ldr	r3, [pc, #608]	; (80008dc <MX_GPIO_Init+0x2a4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	4b94      	ldr	r3, [pc, #592]	; (80008dc <MX_GPIO_Init+0x2a4>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a93      	ldr	r2, [pc, #588]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b91      	ldr	r3, [pc, #580]	; (80008dc <MX_GPIO_Init+0x2a4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	4b8d      	ldr	r3, [pc, #564]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	4a8c      	ldr	r2, [pc, #560]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6313      	str	r3, [r2, #48]	; 0x30
 80006b2:	4b8a      	ldr	r3, [pc, #552]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	4b86      	ldr	r3, [pc, #536]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a85      	ldr	r2, [pc, #532]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006c8:	f043 0302 	orr.w	r3, r3, #2
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b83      	ldr	r3, [pc, #524]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	4b7f      	ldr	r3, [pc, #508]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a7e      	ldr	r2, [pc, #504]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006e4:	f043 0308 	orr.w	r3, r3, #8
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b7c      	ldr	r3, [pc, #496]	; (80008dc <MX_GPIO_Init+0x2a4>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0308 	and.w	r3, r3, #8
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2108      	movs	r1, #8
 80006fa:	4879      	ldr	r0, [pc, #484]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 80006fc:	f000 fd90 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2101      	movs	r1, #1
 8000704:	4877      	ldr	r0, [pc, #476]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 8000706:	f000 fd8b 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070a:	2200      	movs	r2, #0
 800070c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000710:	4875      	ldr	r0, [pc, #468]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 8000712:	f000 fd85 	bl	8001220 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000716:	2308      	movs	r3, #8
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	486c      	ldr	r0, [pc, #432]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 800072e:	f000 fbdb 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000732:	2301      	movs	r3, #1
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	4866      	ldr	r0, [pc, #408]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800074a:	f000 fbcd 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000752:	2302      	movs	r3, #2
 8000754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800075e:	2305      	movs	r3, #5
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	485e      	ldr	r0, [pc, #376]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800076a:	f000 fbbd 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	2301      	movs	r3, #1
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000772:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4619      	mov	r1, r3
 8000782:	485a      	ldr	r0, [pc, #360]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000784:	f000 fbb0 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000788:	2310      	movs	r3, #16
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078c:	2302      	movs	r3, #2
 800078e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000798:	2306      	movs	r3, #6
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4852      	ldr	r0, [pc, #328]	; (80008ec <MX_GPIO_Init+0x2b4>)
 80007a4:	f000 fba0 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80007a8:	23e0      	movs	r3, #224	; 0xe0
 80007aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b8:	2305      	movs	r3, #5
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	484a      	ldr	r0, [pc, #296]	; (80008ec <MX_GPIO_Init+0x2b4>)
 80007c4:	f000 fb90 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007c8:	2304      	movs	r3, #4
 80007ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4845      	ldr	r0, [pc, #276]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80007dc:	f000 fb84 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e6:	2302      	movs	r3, #2
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007f2:	2305      	movs	r3, #5
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	483c      	ldr	r0, [pc, #240]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80007fe:	f000 fb73 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000802:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000806:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000808:	2301      	movs	r3, #1
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4833      	ldr	r0, [pc, #204]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 800081c:	f000 fb64 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000820:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000832:	2306      	movs	r3, #6
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4829      	ldr	r0, [pc, #164]	; (80008e4 <MX_GPIO_Init+0x2ac>)
 800083e:	f000 fb53 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000842:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4825      	ldr	r0, [pc, #148]	; (80008ec <MX_GPIO_Init+0x2b4>)
 8000858:	f000 fb46 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800085c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800086e:	230a      	movs	r3, #10
 8000870:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	481c      	ldr	r0, [pc, #112]	; (80008ec <MX_GPIO_Init+0x2b4>)
 800087a:	f000 fb35 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800087e:	2320      	movs	r3, #32
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4815      	ldr	r0, [pc, #84]	; (80008e8 <MX_GPIO_Init+0x2b0>)
 8000892:	f000 fb29 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000896:	f44f 7310 	mov.w	r3, #576	; 0x240
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800089c:	2312      	movs	r3, #18
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <MX_GPIO_Init+0x2b8>)
 80008b4:	f000 fb18 	bl	8000ee8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008bc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0x2a8>)
 80008ce:	f000 fb0b 	bl	8000ee8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d2:	bf00      	nop
 80008d4:	3730      	adds	r7, #48	; 0x30
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	40020000 	.word	0x40020000
 80008f0:	40020400 	.word	0x40020400

080008f4 <Task1_Handle>:

/* USER CODE BEGIN 4 */
static void Task1_Handle(void* parameters){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	while(1){
		printf("%s\n", (char*)parameters);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f004 f8d3 	bl	8004aa8 <puts>
		taskYIELD();
 8000902:	4b04      	ldr	r3, [pc, #16]	; (8000914 <Task1_Handle+0x20>)
 8000904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	f3bf 8f6f 	isb	sy
		printf("%s\n", (char*)parameters);
 8000912:	e7f3      	b.n	80008fc <Task1_Handle+0x8>
 8000914:	e000ed04 	.word	0xe000ed04

08000918 <Task2_Handle>:
	}

}

static void Task2_Handle(void* parameters){
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
	while(1){
			printf("%s\n", (char*)parameters);
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f004 f8c1 	bl	8004aa8 <puts>
			taskYIELD();
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <Task2_Handle+0x20>)
 8000928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	f3bf 8f4f 	dsb	sy
 8000932:	f3bf 8f6f 	isb	sy
			printf("%s\n", (char*)parameters);
 8000936:	e7f3      	b.n	8000920 <Task2_Handle+0x8>
 8000938:	e000ed04 	.word	0xe000ed04

0800093c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a04      	ldr	r2, [pc, #16]	; (800095c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d101      	bne.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800094e:	f000 f9c9 	bl	8000ce4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40001000 	.word	0x40001000

08000960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000964:	b672      	cpsid	i
}
 8000966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000968:	e7fe      	b.n	8000968 <Error_Handler+0x8>
	...

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_MspInit+0x54>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a11      	ldr	r2, [pc, #68]	; (80009c0 <HAL_MspInit+0x54>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <HAL_MspInit+0x54>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_MspInit+0x54>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <HAL_MspInit+0x54>)
 8000998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099c:	6413      	str	r3, [r2, #64]	; 0x40
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_MspInit+0x54>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	210f      	movs	r1, #15
 80009ae:	f06f 0001 	mvn.w	r0, #1
 80009b2:	f000 fa6f 	bl	8000e94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08e      	sub	sp, #56	; 0x38
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009d0:	2300      	movs	r3, #0
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a32      	ldr	r2, [pc, #200]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009de:	f043 0310 	orr.w	r3, r3, #16
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <HAL_InitTick+0xe4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 0310 	and.w	r3, r3, #16
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009f0:	f107 0210 	add.w	r2, r7, #16
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4611      	mov	r1, r2
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 f8ae 	bl	8001b5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a00:	6a3b      	ldr	r3, [r7, #32]
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a0a:	f001 f893 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000a0e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a10:	e004      	b.n	8000a1c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a12:	f001 f88f 	bl	8001b34 <HAL_RCC_GetPCLK1Freq>
 8000a16:	4603      	mov	r3, r0
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1e:	4a23      	ldr	r2, [pc, #140]	; (8000aac <HAL_InitTick+0xe8>)
 8000a20:	fba2 2303 	umull	r2, r3, r2, r3
 8000a24:	0c9b      	lsrs	r3, r3, #18
 8000a26:	3b01      	subs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a2c:	4a21      	ldr	r2, [pc, #132]	; (8000ab4 <HAL_InitTick+0xf0>)
 8000a2e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a36:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a38:	4a1d      	ldr	r2, [pc, #116]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a50:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a52:	f001 f8b5 	bl	8001bc0 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d11b      	bne.n	8000a9c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <HAL_InitTick+0xec>)
 8000a66:	f001 f905 	bl	8001c74 <HAL_TIM_Base_Start_IT>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d111      	bne.n	8000a9c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f000 fa27 	bl	8000ecc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d808      	bhi.n	8000a96 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2036      	movs	r0, #54	; 0x36
 8000a8a:	f000 fa03 	bl	8000e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <HAL_InitTick+0xf4>)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	e002      	b.n	8000a9c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	20000088 	.word	0x20000088
 8000ab4:	40001000 	.word	0x40001000
 8000ab8:	20000004 	.word	0x20000004

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM6_DAC_IRQHandler+0x10>)
 8000aee:	f001 f931 	bl	8001d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000088 	.word	0x20000088

08000afc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <ITM_SendChar+0x48>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <ITM_SendChar+0x48>)
 8000b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b10:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <ITM_SendChar+0x4c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <ITM_SendChar+0x4c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000b1e:	bf00      	nop
 8000b20:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f8      	beq.n	8000b20 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000b2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000edfc 	.word	0xe000edfc
 8000b48:	e0000e00 	.word	0xe0000e00

08000b4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	e00a      	b.n	8000b74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b5e:	f3af 8000 	nop.w
 8000b62:	4601      	mov	r1, r0
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	b2ca      	uxtb	r2, r1
 8000b6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697a      	ldr	r2, [r7, #20]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	dbf0      	blt.n	8000b5e <_read+0x12>
  }

  return len;
 8000b7c:	687b      	ldr	r3, [r7, #4]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e009      	b.n	8000bac <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	60ba      	str	r2, [r7, #8]
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff ffab 	bl	8000afc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	697a      	ldr	r2, [r7, #20]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <_write+0x12>
  }
  return len;
 8000bb4:	687b      	ldr	r3, [r7, #4]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_close>:

int _close(int file)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b083      	sub	sp, #12
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be6:	605a      	str	r2, [r3, #4]
  return 0;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_isatty>:

int _isatty(int file)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <SystemInit+0x20>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a05      	ldr	r2, [pc, #20]	; (8000c48 <SystemInit+0x20>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c50:	f7ff ffea 	bl	8000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c56:	490d      	ldr	r1, [pc, #52]	; (8000c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c58:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c5c:	e002      	b.n	8000c64 <LoopCopyDataInit>

08000c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c62:	3304      	adds	r3, #4

08000c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c68:	d3f9      	bcc.n	8000c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c6c:	4c0a      	ldr	r4, [pc, #40]	; (8000c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c70:	e001      	b.n	8000c76 <LoopFillZerobss>

08000c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c74:	3204      	adds	r2, #4

08000c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c78:	d3fb      	bcc.n	8000c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7a:	f004 f843 	bl	8004d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c7e:	f7ff fc25 	bl	80004cc <main>
  bx  lr    
 8000c82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c8c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000c90:	08005298 	.word	0x08005298
  ldr r2, =_sbss
 8000c94:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000c98:	20004b70 	.word	0x20004b70

08000c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC_IRQHandler>
	...

08000ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <HAL_Init+0x40>)
 8000caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_Init+0x40>)
 8000cb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x40>)
 8000cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f8d8 	bl	8000e7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f7ff fe78 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fe4a 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023c00 	.word	0x40023c00

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008
 8000d08:	200000d0 	.word	0x200000d0

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200000d0 	.word	0x200000d0

08000d24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d40:	4013      	ands	r3, r2
 8000d42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d56:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <__NVIC_SetPriorityGrouping+0x44>)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	60d3      	str	r3, [r2, #12]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <__NVIC_GetPriorityGrouping+0x18>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	f003 0307 	and.w	r3, r3, #7
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db0b      	blt.n	8000db2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 021f 	and.w	r2, r3, #31
 8000da0:	4907      	ldr	r1, [pc, #28]	; (8000dc0 <__NVIC_EnableIRQ+0x38>)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	2001      	movs	r0, #1
 8000daa:	fa00 f202 	lsl.w	r2, r0, r2
 8000dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100

08000dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	db0a      	blt.n	8000dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	490c      	ldr	r1, [pc, #48]	; (8000e10 <__NVIC_SetPriority+0x4c>)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	0112      	lsls	r2, r2, #4
 8000de4:	b2d2      	uxtb	r2, r2
 8000de6:	440b      	add	r3, r1
 8000de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dec:	e00a      	b.n	8000e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	4908      	ldr	r1, [pc, #32]	; (8000e14 <__NVIC_SetPriority+0x50>)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	3b04      	subs	r3, #4
 8000dfc:	0112      	lsls	r2, r2, #4
 8000dfe:	b2d2      	uxtb	r2, r2
 8000e00:	440b      	add	r3, r1
 8000e02:	761a      	strb	r2, [r3, #24]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e100 	.word	0xe000e100
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f1c3 0307 	rsb	r3, r3, #7
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	bf28      	it	cs
 8000e36:	2304      	movcs	r3, #4
 8000e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	2b06      	cmp	r3, #6
 8000e40:	d902      	bls.n	8000e48 <NVIC_EncodePriority+0x30>
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3b03      	subs	r3, #3
 8000e46:	e000      	b.n	8000e4a <NVIC_EncodePriority+0x32>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43da      	mvns	r2, r3
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e60:	f04f 31ff 	mov.w	r1, #4294967295
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6a:	43d9      	mvns	r1, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e70:	4313      	orrs	r3, r2
         );
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3724      	adds	r7, #36	; 0x24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ff4c 	bl	8000d24 <__NVIC_SetPriorityGrouping>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
 8000ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea6:	f7ff ff61 	bl	8000d6c <__NVIC_GetPriorityGrouping>
 8000eaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	68b9      	ldr	r1, [r7, #8]
 8000eb0:	6978      	ldr	r0, [r7, #20]
 8000eb2:	f7ff ffb1 	bl	8000e18 <NVIC_EncodePriority>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ebc:	4611      	mov	r1, r2
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff80 	bl	8000dc4 <__NVIC_SetPriority>
}
 8000ec4:	bf00      	nop
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff54 	bl	8000d88 <__NVIC_EnableIRQ>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e16b      	b.n	80011dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 815a 	bne.w	80011d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b4 	beq.w	80011d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001078:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b5d      	ldr	r3, [pc, #372]	; (80011f4 <HAL_GPIO_Init+0x30c>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a5b      	ldr	r2, [pc, #364]	; (80011f8 <HAL_GPIO_Init+0x310>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a52      	ldr	r2, [pc, #328]	; (80011fc <HAL_GPIO_Init+0x314>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d02b      	beq.n	800110e <HAL_GPIO_Init+0x226>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x318>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d025      	beq.n	800110a <HAL_GPIO_Init+0x222>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x31c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d01f      	beq.n	8001106 <HAL_GPIO_Init+0x21e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x320>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d019      	beq.n	8001102 <HAL_GPIO_Init+0x21a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x324>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d013      	beq.n	80010fe <HAL_GPIO_Init+0x216>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x328>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d00d      	beq.n	80010fa <HAL_GPIO_Init+0x212>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x32c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d007      	beq.n	80010f6 <HAL_GPIO_Init+0x20e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x330>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d101      	bne.n	80010f2 <HAL_GPIO_Init+0x20a>
 80010ee:	2307      	movs	r3, #7
 80010f0:	e00e      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f2:	2308      	movs	r3, #8
 80010f4:	e00c      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010f6:	2306      	movs	r3, #6
 80010f8:	e00a      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fa:	2305      	movs	r3, #5
 80010fc:	e008      	b.n	8001110 <HAL_GPIO_Init+0x228>
 80010fe:	2304      	movs	r3, #4
 8001100:	e006      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001102:	2303      	movs	r3, #3
 8001104:	e004      	b.n	8001110 <HAL_GPIO_Init+0x228>
 8001106:	2302      	movs	r3, #2
 8001108:	e002      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <HAL_GPIO_Init+0x228>
 800110e:	2300      	movs	r3, #0
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	f002 0203 	and.w	r2, r2, #3
 8001116:	0092      	lsls	r2, r2, #2
 8001118:	4093      	lsls	r3, r2
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001120:	4935      	ldr	r1, [pc, #212]	; (80011f8 <HAL_GPIO_Init+0x310>)
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	089b      	lsrs	r3, r3, #2
 8001126:	3302      	adds	r3, #2
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <HAL_GPIO_Init+0x334>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	43db      	mvns	r3, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4013      	ands	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001152:	4a32      	ldr	r2, [pc, #200]	; (800121c <HAL_GPIO_Init+0x334>)
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_GPIO_Init+0x334>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800117c:	4a27      	ldr	r2, [pc, #156]	; (800121c <HAL_GPIO_Init+0x334>)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001182:	4b26      	ldr	r3, [pc, #152]	; (800121c <HAL_GPIO_Init+0x334>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	43db      	mvns	r3, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4013      	ands	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a6:	4a1d      	ldr	r2, [pc, #116]	; (800121c <HAL_GPIO_Init+0x334>)
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_GPIO_Init+0x334>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_GPIO_Init+0x334>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3301      	adds	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	f67f ae90 	bls.w	8000f04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40013800 	.word	0x40013800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40020400 	.word	0x40020400
 8001204:	40020800 	.word	0x40020800
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40021000 	.word	0x40021000
 8001210:	40021400 	.word	0x40021400
 8001214:	40021800 	.word	0x40021800
 8001218:	40021c00 	.word	0x40021c00
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e267      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d075      	beq.n	800135e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001272:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
 800127a:	2b04      	cmp	r3, #4
 800127c:	d00c      	beq.n	8001298 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127e:	4b85      	ldr	r3, [pc, #532]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001286:	2b08      	cmp	r3, #8
 8001288:	d112      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001292:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001296:	d10b      	bne.n	80012b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d05b      	beq.n	800135c <HAL_RCC_OscConfig+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d157      	bne.n	800135c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e242      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d106      	bne.n	80012c8 <HAL_RCC_OscConfig+0x74>
 80012ba:	4b76      	ldr	r3, [pc, #472]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a75      	ldr	r2, [pc, #468]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	e01d      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x98>
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6f      	ldr	r2, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a6c      	ldr	r2, [pc, #432]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e00b      	b.n	8001304 <HAL_RCC_OscConfig+0xb0>
 80012ec:	4b69      	ldr	r3, [pc, #420]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a68      	ldr	r2, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80012fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001302:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcfe 	bl	8000d0c <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcfa 	bl	8000d0c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e207      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001326:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0xc0>
 8001332:	e014      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fcea 	bl	8000d0c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fce6 	bl	8000d0c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1f3      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0xe8>
 800135a:	e000      	b.n	800135e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800135c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d063      	beq.n	8001432 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136a:	4b4a      	ldr	r3, [pc, #296]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 030c 	and.w	r3, r3, #12
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00b      	beq.n	800138e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001376:	4b47      	ldr	r3, [pc, #284]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800137e:	2b08      	cmp	r3, #8
 8001380:	d11c      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d116      	bne.n	80013bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d001      	beq.n	80013a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e1c7      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	4937      	ldr	r1, [pc, #220]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ba:	e03a      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d020      	beq.n	8001406 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c4:	4b34      	ldr	r3, [pc, #208]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ca:	f7ff fc9f 	bl	8000d0c <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d2:	f7ff fc9b 	bl	8000d0c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1a8      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4925      	ldr	r1, [pc, #148]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001400:	4313      	orrs	r3, r2
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	e015      	b.n	8001432 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_RCC_OscConfig+0x244>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fc7e 	bl	8000d0c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001414:	f7ff fc7a 	bl	8000d0c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e187      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001426:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f0      	bne.n	8001414 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0308 	and.w	r3, r3, #8
 800143a:	2b00      	cmp	r3, #0
 800143c:	d036      	beq.n	80014ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d016      	beq.n	8001474 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001448:	2201      	movs	r2, #1
 800144a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144c:	f7ff fc5e 	bl	8000d0c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001454:	f7ff fc5a 	bl	8000d0c <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e167      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x240>)
 8001468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x200>
 8001472:	e01b      	b.n	80014ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_RCC_OscConfig+0x248>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147a:	f7ff fc47 	bl	8000d0c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	e00e      	b.n	80014a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fc43 	bl	8000d0c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d907      	bls.n	80014a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e150      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 8001494:	40023800 	.word	0x40023800
 8001498:	42470000 	.word	0x42470000
 800149c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b88      	ldr	r3, [pc, #544]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ea      	bne.n	8001482 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8097 	beq.w	80015e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10f      	bne.n	80014ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a7c      	ldr	r2, [pc, #496]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b7a      	ldr	r3, [pc, #488]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b74      	ldr	r3, [pc, #464]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a73      	ldr	r2, [pc, #460]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fc03 	bl	8000d0c <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff fbff 	bl	8000d0c <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e10c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b6a      	ldr	r3, [pc, #424]	; (80016c8 <HAL_RCC_OscConfig+0x474>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ea>
 8001530:	4b64      	ldr	r3, [pc, #400]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a63      	ldr	r2, [pc, #396]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b05      	cmp	r3, #5
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x30c>
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6713      	str	r3, [r2, #112]	; 0x70
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001556:	4a5b      	ldr	r2, [pc, #364]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6713      	str	r3, [r2, #112]	; 0x70
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0x324>
 8001560:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a57      	ldr	r2, [pc, #348]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001570:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001572:	f023 0304 	bic.w	r3, r3, #4
 8001576:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d015      	beq.n	80015ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fbc4 	bl	8000d0c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	e00a      	b.n	800159e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fbc0 	bl	8000d0c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e0cb      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0ee      	beq.n	8001588 <HAL_RCC_OscConfig+0x334>
 80015aa:	e014      	b.n	80015d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fbae 	bl	8000d0c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b2:	e00a      	b.n	80015ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b4:	f7ff fbaa 	bl	8000d0c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0b5      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ca:	4b3e      	ldr	r3, [pc, #248]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1ee      	bne.n	80015b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d105      	bne.n	80015e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015dc:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a38      	ldr	r2, [pc, #224]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a1 	beq.w	8001734 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d05c      	beq.n	80016b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d141      	bne.n	800168a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001606:	4b31      	ldr	r3, [pc, #196]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fb7e 	bl	8000d0c <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fb7a 	bl	8000d0c <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e087      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b27      	ldr	r3, [pc, #156]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69da      	ldr	r2, [r3, #28]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001640:	019b      	lsls	r3, r3, #6
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	085b      	lsrs	r3, r3, #1
 800164a:	3b01      	subs	r3, #1
 800164c:	041b      	lsls	r3, r3, #16
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	491b      	ldr	r1, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff fb53 	bl	8000d0c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fb4f 	bl	8000d0c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e05c      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x416>
 8001688:	e054      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_OscConfig+0x478>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb3c 	bl	8000d0c <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb38 	bl	8000d0c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e045      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x470>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x444>
 80016b6:	e03d      	b.n	8001734 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e038      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40007000 	.word	0x40007000
 80016cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4ec>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d028      	beq.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d121      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d11a      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001700:	4013      	ands	r3, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001706:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	3b01      	subs	r3, #1
 800171a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	429a      	cmp	r2, r3
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff fa6a 	bl	8000d0c <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff fa66 	bl	8000d0c <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f86a 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08005270 	.word	0x08005270
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001914:	b094      	sub	sp, #80	; 0x50
 8001916:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
 800191c:	2300      	movs	r3, #0
 800191e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b08      	cmp	r3, #8
 8001932:	d00d      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 8001934:	2b08      	cmp	r3, #8
 8001936:	f200 80e1 	bhi.w	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x34>
 800193e:	2b04      	cmp	r3, #4
 8001940:	d003      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x3a>
 8001942:	e0db      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001948:	e0db      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b73      	ldr	r3, [pc, #460]	; (8001b18 <HAL_RCC_GetSysClockFreq+0x208>)
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800194e:	e0d8      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b6d      	ldr	r3, [pc, #436]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d063      	beq.n	8001a2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b6a      	ldr	r3, [pc, #424]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001970:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	2300      	movs	r3, #0
 800197c:	637b      	str	r3, [r7, #52]	; 0x34
 800197e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001982:	4622      	mov	r2, r4
 8001984:	462b      	mov	r3, r5
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	0159      	lsls	r1, r3, #5
 8001990:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001994:	0150      	lsls	r0, r2, #5
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4621      	mov	r1, r4
 800199c:	1a51      	subs	r1, r2, r1
 800199e:	6139      	str	r1, [r7, #16]
 80019a0:	4629      	mov	r1, r5
 80019a2:	eb63 0301 	sbc.w	r3, r3, r1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019b4:	4659      	mov	r1, fp
 80019b6:	018b      	lsls	r3, r1, #6
 80019b8:	4651      	mov	r1, sl
 80019ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019be:	4651      	mov	r1, sl
 80019c0:	018a      	lsls	r2, r1, #6
 80019c2:	4651      	mov	r1, sl
 80019c4:	ebb2 0801 	subs.w	r8, r2, r1
 80019c8:	4659      	mov	r1, fp
 80019ca:	eb63 0901 	sbc.w	r9, r3, r1
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019e2:	4690      	mov	r8, r2
 80019e4:	4699      	mov	r9, r3
 80019e6:	4623      	mov	r3, r4
 80019e8:	eb18 0303 	adds.w	r3, r8, r3
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	462b      	mov	r3, r5
 80019f0:	eb49 0303 	adc.w	r3, r9, r3
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a02:	4629      	mov	r1, r5
 8001a04:	024b      	lsls	r3, r1, #9
 8001a06:	4621      	mov	r1, r4
 8001a08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	024a      	lsls	r2, r1, #9
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a16:	2200      	movs	r2, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a20:	f7fe fbd6 	bl	80001d0 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a2c:	e058      	b.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2e:	4b38      	ldr	r3, [pc, #224]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	099b      	lsrs	r3, r3, #6
 8001a34:	2200      	movs	r2, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4611      	mov	r1, r2
 8001a3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a48:	4642      	mov	r2, r8
 8001a4a:	464b      	mov	r3, r9
 8001a4c:	f04f 0000 	mov.w	r0, #0
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	0159      	lsls	r1, r3, #5
 8001a56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a5a:	0150      	lsls	r0, r2, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4641      	mov	r1, r8
 8001a62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a66:	4649      	mov	r1, r9
 8001a68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a80:	ebb2 040a 	subs.w	r4, r2, sl
 8001a84:	eb63 050b 	sbc.w	r5, r3, fp
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	00eb      	lsls	r3, r5, #3
 8001a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a96:	00e2      	lsls	r2, r4, #3
 8001a98:	4614      	mov	r4, r2
 8001a9a:	461d      	mov	r5, r3
 8001a9c:	4643      	mov	r3, r8
 8001a9e:	18e3      	adds	r3, r4, r3
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	464b      	mov	r3, r9
 8001aa4:	eb45 0303 	adc.w	r3, r5, r3
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	028b      	lsls	r3, r1, #10
 8001aba:	4621      	mov	r1, r4
 8001abc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	028a      	lsls	r2, r1, #10
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aca:	2200      	movs	r2, #0
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	61fa      	str	r2, [r7, #28]
 8001ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad4:	f7fe fb7c 	bl	80001d0 <__aeabi_uldivmod>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4613      	mov	r3, r2
 8001ade:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	0c1b      	lsrs	r3, r3, #16
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	3301      	adds	r3, #1
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001af0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3750      	adds	r7, #80	; 0x50
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	00f42400 	.word	0x00f42400
 8001b18:	007a1200 	.word	0x007a1200

08001b1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000000 	.word	0x20000000

08001b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b38:	f7ff fff0 	bl	8001b1c <HAL_RCC_GetHCLKFreq>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	0a9b      	lsrs	r3, r3, #10
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	4903      	ldr	r1, [pc, #12]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4a:	5ccb      	ldrb	r3, [r1, r3]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40023800 	.word	0x40023800
 8001b58:	08005280 	.word	0x08005280

08001b5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	220f      	movs	r2, #15
 8001b6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f003 0203 	and.w	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	08db      	lsrs	r3, r3, #3
 8001b96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <HAL_RCC_GetClockConfig+0x60>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0207 	and.w	r2, r3, #7
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	601a      	str	r2, [r3, #0]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e041      	b.n	8001c56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f839 	bl	8001c5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4610      	mov	r0, r2
 8001c00:	f000 f9c0 	bl	8001f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d001      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e04e      	b.n	8001d2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <HAL_TIM_Base_Start_IT+0xc4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d022      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cb6:	d01d      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	; (8001d3c <HAL_TIM_Base_Start_IT+0xc8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d018      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	; (8001d40 <HAL_TIM_Base_Start_IT+0xcc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d013      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <HAL_TIM_Base_Start_IT+0xd0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00e      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d009      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d004      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x80>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d010      	beq.n	8001d28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d16:	e007      	b.n	8001d28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	40000400 	.word	0x40000400
 8001d40:	40000800 	.word	0x40000800
 8001d44:	40000c00 	.word	0x40000c00
 8001d48:	40010400 	.word	0x40010400
 8001d4c:	40014000 	.word	0x40014000
 8001d50:	40001800 	.word	0x40001800

08001d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d020      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0202 	mvn.w	r2, #2
 8001d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8d2 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8c4 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8d5 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d020      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0204 	mvn.w	r2, #4
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8ac 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f89e 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8af 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0208 	mvn.w	r2, #8
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f886 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f878 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f889 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0210 	mvn.w	r2, #16
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2208      	movs	r2, #8
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f860 	bl	8001f48 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f852 	bl	8001f34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f863 	bl	8001f5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0201 	mvn.w	r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7fe fd3e 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00c      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f906 	bl	80020f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f834 	bl	8001f70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00c      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0320 	and.w	r3, r3, #32
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0220 	mvn.w	r2, #32
 8001f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8d8 	bl	80020dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a46      	ldr	r2, [pc, #280]	; (80020b0 <TIM_Base_SetConfig+0x12c>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d00f      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a43      	ldr	r2, [pc, #268]	; (80020b4 <TIM_Base_SetConfig+0x130>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d00b      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a42      	ldr	r2, [pc, #264]	; (80020b8 <TIM_Base_SetConfig+0x134>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d007      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a41      	ldr	r2, [pc, #260]	; (80020bc <TIM_Base_SetConfig+0x138>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d003      	beq.n	8001fc4 <TIM_Base_SetConfig+0x40>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <TIM_Base_SetConfig+0x13c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a35      	ldr	r2, [pc, #212]	; (80020b0 <TIM_Base_SetConfig+0x12c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d02b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe4:	d027      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <TIM_Base_SetConfig+0x130>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d023      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a31      	ldr	r2, [pc, #196]	; (80020b8 <TIM_Base_SetConfig+0x134>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a30      	ldr	r2, [pc, #192]	; (80020bc <TIM_Base_SetConfig+0x138>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a2f      	ldr	r2, [pc, #188]	; (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d017      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <TIM_Base_SetConfig+0x140>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <TIM_Base_SetConfig+0x144>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00f      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a2c      	ldr	r2, [pc, #176]	; (80020cc <TIM_Base_SetConfig+0x148>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00b      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <TIM_Base_SetConfig+0x14c>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2a      	ldr	r2, [pc, #168]	; (80020d4 <TIM_Base_SetConfig+0x150>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d003      	beq.n	8002036 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <TIM_Base_SetConfig+0x154>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d108      	bne.n	8002048 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <TIM_Base_SetConfig+0x12c>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d003      	beq.n	800207c <TIM_Base_SetConfig+0xf8>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <TIM_Base_SetConfig+0x13c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d103      	bne.n	8002084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f023 0201 	bic.w	r2, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
  }
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00
 80020c0:	40010400 	.word	0x40010400
 80020c4:	40014000 	.word	0x40014000
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40014800 	.word	0x40014800
 80020d0:	40001800 	.word	0x40001800
 80020d4:	40001c00 	.word	0x40001c00
 80020d8:	40002000 	.word	0x40002000

080020dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Handler+0x1c>)
 800210a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800210c:	f001 fb4e 	bl	80037ac <xTaskGetSchedulerState>
 8002110:	4603      	mov	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d001      	beq.n	800211a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002116:	f002 f937 	bl	8004388 <xPortSysTickHandler>
  }
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <vApplicationGetIdleTaskMemory+0x2c>)
 8002134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4a06      	ldr	r2, [pc, #24]	; (8002154 <vApplicationGetIdleTaskMemory+0x30>)
 800213a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	601a      	str	r2, [r3, #0]
}
 8002142:	bf00      	nop
 8002144:	3714      	adds	r7, #20
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	200000d4 	.word	0x200000d4
 8002154:	20000130 	.word	0x20000130

08002158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4a07      	ldr	r2, [pc, #28]	; (8002184 <vApplicationGetTimerTaskMemory+0x2c>)
 8002168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4a06      	ldr	r2, [pc, #24]	; (8002188 <vApplicationGetTimerTaskMemory+0x30>)
 800216e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20000330 	.word	0x20000330
 8002188:	2000038c 	.word	0x2000038c

0800218c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0208 	add.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f103 0208 	add.w	r2, r3, #8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d103      	bne.n	800224e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e00c      	b.n	8002268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3308      	adds	r3, #8
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e002      	b.n	800225c <vListInsert+0x2e>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	429a      	cmp	r2, r3
 8002266:	d2f6      	bcs.n	8002256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6892      	ldr	r2, [r2, #8]
 80022b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6852      	ldr	r2, [r2, #4]
 80022c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d103      	bne.n	80022d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <xQueueGenericReset+0x2a>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	60bb      	str	r3, [r7, #8]
}
 800231a:	bf00      	nop
 800231c:	e7fe      	b.n	800231c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800231e:	f001 ffa1 	bl	8004264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	68f9      	ldr	r1, [r7, #12]
 800232c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800232e:	fb01 f303 	mul.w	r3, r1, r3
 8002332:	441a      	add	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	3b01      	subs	r3, #1
 8002350:	68f9      	ldr	r1, [r7, #12]
 8002352:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	441a      	add	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	22ff      	movs	r2, #255	; 0xff
 8002362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	22ff      	movs	r2, #255	; 0xff
 800236a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00f      	beq.n	800239c <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3310      	adds	r3, #16
 8002380:	4618      	mov	r0, r3
 8002382:	f001 f85b 	bl	800343c <xTaskRemoveFromEventList>
 8002386:	e009      	b.n	800239c <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	3310      	adds	r3, #16
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff fefd 	bl	800218c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3324      	adds	r3, #36	; 0x24
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fef8 	bl	800218c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800239c:	f001 ff92 	bl	80042c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b08e      	sub	sp, #56	; 0x38
 80023ae:	af02      	add	r7, sp, #8
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c2:	f383 8811 	msr	BASEPRI, r3
 80023c6:	f3bf 8f6f 	isb	sy
 80023ca:	f3bf 8f4f 	dsb	sy
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023d0:	bf00      	nop
 80023d2:	e7fe      	b.n	80023d2 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10a      	bne.n	80023f0 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023de:	f383 8811 	msr	BASEPRI, r3
 80023e2:	f3bf 8f6f 	isb	sy
 80023e6:	f3bf 8f4f 	dsb	sy
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023ec:	bf00      	nop
 80023ee:	e7fe      	b.n	80023ee <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <xQueueGenericCreateStatic+0x52>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <xQueueGenericCreateStatic+0x56>
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <xQueueGenericCreateStatic+0x58>
 8002400:	2300      	movs	r3, #0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240a:	f383 8811 	msr	BASEPRI, r3
 800240e:	f3bf 8f6f 	isb	sy
 8002412:	f3bf 8f4f 	dsb	sy
 8002416:	623b      	str	r3, [r7, #32]
}
 8002418:	bf00      	nop
 800241a:	e7fe      	b.n	800241a <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <xQueueGenericCreateStatic+0x7e>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <xQueueGenericCreateStatic+0x82>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <xQueueGenericCreateStatic+0x84>
 800242c:	2300      	movs	r3, #0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	61fb      	str	r3, [r7, #28]
}
 8002444:	bf00      	nop
 8002446:	e7fe      	b.n	8002446 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002448:	2350      	movs	r3, #80	; 0x50
 800244a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b50      	cmp	r3, #80	; 0x50
 8002450:	d00a      	beq.n	8002468 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61bb      	str	r3, [r7, #24]
}
 8002464:	bf00      	nop
 8002466:	e7fe      	b.n	8002466 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002468:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800246e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00d      	beq.n	8002490 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800247c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	4613      	mov	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f805 	bl	800249a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002492:	4618      	mov	r0, r3
 8002494:	3730      	adds	r7, #48	; 0x30
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
 80024a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e002      	b.n	80024bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024c8:	2101      	movs	r1, #1
 80024ca:	69b8      	ldr	r0, [r7, #24]
 80024cc:	f7ff ff12 	bl	80022f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	78fa      	ldrb	r2, [r7, #3]
 80024d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024d8:	bf00      	nop
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08e      	sub	sp, #56	; 0x38
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <xQueueGenericSend+0x32>
	__asm volatile
 80024fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002500:	f383 8811 	msr	BASEPRI, r3
 8002504:	f3bf 8f6f 	isb	sy
 8002508:	f3bf 8f4f 	dsb	sy
 800250c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800250e:	bf00      	nop
 8002510:	e7fe      	b.n	8002510 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d103      	bne.n	8002520 <xQueueGenericSend+0x40>
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <xQueueGenericSend+0x44>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <xQueueGenericSend+0x46>
 8002524:	2300      	movs	r3, #0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10a      	bne.n	8002540 <xQueueGenericSend+0x60>
	__asm volatile
 800252a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252e:	f383 8811 	msr	BASEPRI, r3
 8002532:	f3bf 8f6f 	isb	sy
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800253c:	bf00      	nop
 800253e:	e7fe      	b.n	800253e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x6e>
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <xQueueGenericSend+0x72>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <xQueueGenericSend+0x74>
 8002552:	2300      	movs	r3, #0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10a      	bne.n	800256e <xQueueGenericSend+0x8e>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	623b      	str	r3, [r7, #32]
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800256e:	f001 f91d 	bl	80037ac <xTaskGetSchedulerState>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <xQueueGenericSend+0x9e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <xQueueGenericSend+0xa2>
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <xQueueGenericSend+0xa4>
 8002582:	2300      	movs	r3, #0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <xQueueGenericSend+0xbe>
	__asm volatile
 8002588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258c:	f383 8811 	msr	BASEPRI, r3
 8002590:	f3bf 8f6f 	isb	sy
 8002594:	f3bf 8f4f 	dsb	sy
 8002598:	61fb      	str	r3, [r7, #28]
}
 800259a:	bf00      	nop
 800259c:	e7fe      	b.n	800259c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800259e:	f001 fe61 	bl	8004264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <xQueueGenericSend+0xd4>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d112      	bne.n	80025da <xQueueGenericSend+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	68b9      	ldr	r1, [r7, #8]
 80025b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ba:	f000 f9e7 	bl	800298c <prvCopyDataToQueue>
 80025be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <xQueueGenericSend+0xf2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	3324      	adds	r3, #36	; 0x24
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 ff35 	bl	800343c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025d2:	f001 fe77 	bl	80042c4 <vPortExitCritical>
				return pdPASS;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e062      	b.n	80026a0 <xQueueGenericSend+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d103      	bne.n	80025e8 <xQueueGenericSend+0x108>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025e0:	f001 fe70 	bl	80042c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e05b      	b.n	80026a0 <xQueueGenericSend+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <xQueueGenericSend+0x11c>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025ee:	f107 0314 	add.w	r3, r7, #20
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 ff86 	bl	8003504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025f8:	2301      	movs	r3, #1
 80025fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025fc:	f001 fe62 	bl	80042c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002600:	f000 fd2a 	bl	8003058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002604:	f001 fe2e 	bl	8004264 <vPortEnterCritical>
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800260e:	b25b      	sxtb	r3, r3
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d103      	bne.n	800261e <xQueueGenericSend+0x13e>
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002624:	b25b      	sxtb	r3, r3
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d103      	bne.n	8002634 <xQueueGenericSend+0x154>
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002634:	f001 fe46 	bl	80042c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002638:	1d3a      	adds	r2, r7, #4
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f000 ff75 	bl	8003530 <xTaskCheckForTimeOut>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d123      	bne.n	8002694 <xQueueGenericSend+0x1b4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800264c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800264e:	f000 fa95 	bl	8002b7c <prvIsQueueFull>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d017      	beq.n	8002688 <xQueueGenericSend+0x1a8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265a:	3310      	adds	r3, #16
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f000 fe9b 	bl	800339c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002668:	f000 fa20 	bl	8002aac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800266c:	f000 fd02 	bl	8003074 <xTaskResumeAll>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d193      	bne.n	800259e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <xQueueGenericSend+0x1c8>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	e78a      	b.n	800259e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800268a:	f000 fa0f 	bl	8002aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800268e:	f000 fcf1 	bl	8003074 <xTaskResumeAll>
 8002692:	e784      	b.n	800259e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002696:	f000 fa09 	bl	8002aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800269a:	f000 fceb 	bl	8003074 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800269e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3738      	adds	r7, #56	; 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	e000ed04 	.word	0xe000ed04

080026ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	; 0x40
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
 80026b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80026be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d10a      	bne.n	80026da <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80026c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c8:	f383 8811 	msr	BASEPRI, r3
 80026cc:	f3bf 8f6f 	isb	sy
 80026d0:	f3bf 8f4f 	dsb	sy
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026d6:	bf00      	nop
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d103      	bne.n	80026e8 <xQueueGenericSendFromISR+0x3c>
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueGenericSendFromISR+0x40>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueGenericSendFromISR+0x42>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10a      	bne.n	8002708 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d103      	bne.n	8002716 <xQueueGenericSendFromISR+0x6a>
 800270e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <xQueueGenericSendFromISR+0x6e>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <xQueueGenericSendFromISR+0x70>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	623b      	str	r3, [r7, #32]
}
 8002732:	bf00      	nop
 8002734:	e7fe      	b.n	8002734 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002736:	f001 fe77 	bl	8004428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800273a:	f3ef 8211 	mrs	r2, BASEPRI
 800273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002742:	f383 8811 	msr	BASEPRI, r3
 8002746:	f3bf 8f6f 	isb	sy
 800274a:	f3bf 8f4f 	dsb	sy
 800274e:	61fa      	str	r2, [r7, #28]
 8002750:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002752:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002754:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800275a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <xQueueGenericSendFromISR+0xbc>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d12f      	bne.n	80027c8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800276e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800277e:	f000 f905 	bl	800298c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002782:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d112      	bne.n	80027b2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	3324      	adds	r3, #36	; 0x24
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fe4f 	bl	800343c <xTaskRemoveFromEventList>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e007      	b.n	80027c2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027b6:	3301      	adds	r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	b25a      	sxtb	r2, r3
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80027c2:	2301      	movs	r3, #1
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80027c6:	e001      	b.n	80027cc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027d6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3740      	adds	r7, #64	; 0x40
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08c      	sub	sp, #48	; 0x30
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10a      	bne.n	8002814 <xQueueReceive+0x30>
	__asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	623b      	str	r3, [r7, #32]
}
 8002810:	bf00      	nop
 8002812:	e7fe      	b.n	8002812 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d103      	bne.n	8002822 <xQueueReceive+0x3e>
 800281a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <xQueueReceive+0x42>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <xQueueReceive+0x44>
 8002826:	2300      	movs	r3, #0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <xQueueReceive+0x5e>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	61fb      	str	r3, [r7, #28]
}
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002842:	f000 ffb3 	bl	80037ac <xTaskGetSchedulerState>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <xQueueReceive+0x6e>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <xQueueReceive+0x72>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueReceive+0x74>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xQueueReceive+0x8e>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	61bb      	str	r3, [r7, #24]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002872:	f001 fcf7 	bl	8004264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	2b00      	cmp	r3, #0
 8002880:	d014      	beq.n	80028ac <xQueueReceive+0xc8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002886:	f000 f8eb 	bl	8002a60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d004      	beq.n	80028a4 <xQueueReceive+0xc0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	3310      	adds	r3, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fdcc 	bl	800343c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028a4:	f001 fd0e 	bl	80042c4 <vPortExitCritical>
				return pdPASS;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e069      	b.n	8002980 <xQueueReceive+0x19c>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <xQueueReceive+0xd6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028b2:	f001 fd07 	bl	80042c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e062      	b.n	8002980 <xQueueReceive+0x19c>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d106      	bne.n	80028ce <xQueueReceive+0xea>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fe1d 	bl	8003504 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ce:	f001 fcf9 	bl	80042c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028d2:	f000 fbc1 	bl	8003058 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028d6:	f001 fcc5 	bl	8004264 <vPortEnterCritical>
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028e0:	b25b      	sxtb	r3, r3
 80028e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e6:	d103      	bne.n	80028f0 <xQueueReceive+0x10c>
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028f6:	b25b      	sxtb	r3, r3
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d103      	bne.n	8002906 <xQueueReceive+0x122>
 80028fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002906:	f001 fcdd 	bl	80042c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800290a:	1d3a      	adds	r2, r7, #4
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fe0c 	bl	8003530 <xTaskCheckForTimeOut>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d123      	bne.n	8002966 <xQueueReceive+0x182>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800291e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002920:	f000 f916 	bl	8002b50 <prvIsQueueEmpty>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d017      	beq.n	800295a <xQueueReceive+0x176>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	3324      	adds	r3, #36	; 0x24
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4611      	mov	r1, r2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fd32 	bl	800339c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002938:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800293a:	f000 f8b7 	bl	8002aac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800293e:	f000 fb99 	bl	8003074 <xTaskResumeAll>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d194      	bne.n	8002872 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002948:	4b0f      	ldr	r3, [pc, #60]	; (8002988 <xQueueReceive+0x1a4>)
 800294a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	e78b      	b.n	8002872 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800295a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800295c:	f000 f8a6 	bl	8002aac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002960:	f000 fb88 	bl	8003074 <xTaskResumeAll>
 8002964:	e785      	b.n	8002872 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002968:	f000 f8a0 	bl	8002aac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800296c:	f000 fb82 	bl	8003074 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002972:	f000 f8ed 	bl	8002b50 <prvIsQueueEmpty>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	f43f af7a 	beq.w	8002872 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800297e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	; 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10d      	bne.n	80029c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d14d      	bne.n	8002a4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 ff16 	bl	80037e8 <xTaskPriorityDisinherit>
 80029bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e043      	b.n	8002a4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d119      	bne.n	8002a00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6858      	ldr	r0, [r3, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	461a      	mov	r2, r3
 80029d6:	68b9      	ldr	r1, [r7, #8]
 80029d8:	f002 f9bb 	bl	8004d52 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	441a      	add	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d32b      	bcc.n	8002a4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	e026      	b.n	8002a4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68d8      	ldr	r0, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68b9      	ldr	r1, [r7, #8]
 8002a0c:	f002 f9a1 	bl	8004d52 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	425b      	negs	r3, r3
 8002a1a:	441a      	add	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	425b      	negs	r3, r3
 8002a36:	441a      	add	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d105      	bne.n	8002a4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a56:	697b      	ldr	r3, [r7, #20]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d018      	beq.n	8002aa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	441a      	add	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d303      	bcc.n	8002a94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68d9      	ldr	r1, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	6838      	ldr	r0, [r7, #0]
 8002aa0:	f002 f957 	bl	8004d52 <memcpy>
	}
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ab4:	f001 fbd6 	bl	8004264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002abe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ac0:	e011      	b.n	8002ae6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fcb4 	bl	800343c <xTaskRemoveFromEventList>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ada:	f000 fd8b 	bl	80035f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	dce9      	bgt.n	8002ac2 <prvUnlockQueue+0x16>
 8002aee:	e000      	b.n	8002af2 <prvUnlockQueue+0x46>
					break;
 8002af0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002afa:	f001 fbe3 	bl	80042c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002afe:	f001 fbb1 	bl	8004264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b0a:	e011      	b.n	8002b30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3310      	adds	r3, #16
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 fc8f 	bl	800343c <xTaskRemoveFromEventList>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b24:	f000 fd66 	bl	80035f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b28:	7bbb      	ldrb	r3, [r7, #14]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	dce9      	bgt.n	8002b0c <prvUnlockQueue+0x60>
 8002b38:	e000      	b.n	8002b3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	22ff      	movs	r2, #255	; 0xff
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002b44:	f001 fbbe 	bl	80042c4 <vPortExitCritical>
}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b58:	f001 fb84 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b64:	2301      	movs	r3, #1
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e001      	b.n	8002b6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b6e:	f001 fba9 	bl	80042c4 <vPortExitCritical>

	return xReturn;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b84:	f001 fb6e 	bl	8004264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d102      	bne.n	8002b9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	e001      	b.n	8002b9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b9e:	f001 fb91 	bl	80042c4 <vPortExitCritical>

	return xReturn;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e014      	b.n	8002be6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	; (8002bfc <vQueueAddToRegistry+0x50>)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10b      	bne.n	8002be0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002bc8:	490c      	ldr	r1, [pc, #48]	; (8002bfc <vQueueAddToRegistry+0x50>)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <vQueueAddToRegistry+0x50>)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002bde:	e006      	b.n	8002bee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2b07      	cmp	r3, #7
 8002bea:	d9e7      	bls.n	8002bbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	2000078c 	.word	0x2000078c

08002c00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c10:	f001 fb28 	bl	8004264 <vPortEnterCritical>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c1a:	b25b      	sxtb	r3, r3
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d103      	bne.n	8002c2a <vQueueWaitForMessageRestricted+0x2a>
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c30:	b25b      	sxtb	r3, r3
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d103      	bne.n	8002c40 <vQueueWaitForMessageRestricted+0x40>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c40:	f001 fb40 	bl	80042c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d106      	bne.n	8002c5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3324      	adds	r3, #36	; 0x24
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 fbc5 	bl	80033e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff26 	bl	8002aac <prvUnlockQueue>
	}
 8002c60:	bf00      	nop
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	; 0x38
 8002c6c:	af04      	add	r7, sp, #16
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10a      	bne.n	8002c92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	623b      	str	r3, [r7, #32]
}
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xTaskCreateStatic+0x46>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	61fb      	str	r3, [r7, #28]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cae:	235c      	movs	r3, #92	; 0x5c
 8002cb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8002cb6:	d00a      	beq.n	8002cce <xTaskCreateStatic+0x66>
	__asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	f383 8811 	msr	BASEPRI, r3
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	61bb      	str	r3, [r7, #24]
}
 8002cca:	bf00      	nop
 8002ccc:	e7fe      	b.n	8002ccc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002cce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d01e      	beq.n	8002d14 <xTaskCreateStatic+0xac>
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d01b      	beq.n	8002d14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9303      	str	r3, [sp, #12]
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	9302      	str	r3, [sp, #8]
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f850 	bl	8002dac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d0e:	f000 f8dd 	bl	8002ecc <prvAddNewTaskToReadyList>
 8002d12:	e001      	b.n	8002d18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d18:	697b      	ldr	r3, [r7, #20]
	}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b08c      	sub	sp, #48	; 0x30
 8002d26:	af04      	add	r7, sp, #16
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fbb6 	bl	80044a8 <pvPortMalloc>
 8002d3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d44:	205c      	movs	r0, #92	; 0x5c
 8002d46:	f001 fbaf 	bl	80044a8 <pvPortMalloc>
 8002d4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
 8002d58:	e005      	b.n	8002d66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d5a:	6978      	ldr	r0, [r7, #20]
 8002d5c:	f001 fc70 	bl	8004640 <vPortFree>
 8002d60:	e001      	b.n	8002d66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d74:	88fa      	ldrh	r2, [r7, #6]
 8002d76:	2300      	movs	r3, #0
 8002d78:	9303      	str	r3, [sp, #12]
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68b9      	ldr	r1, [r7, #8]
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f80e 	bl	8002dac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d90:	69f8      	ldr	r0, [r7, #28]
 8002d92:	f000 f89b 	bl	8002ecc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61bb      	str	r3, [r7, #24]
 8002d9a:	e002      	b.n	8002da2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002da0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002da2:	69bb      	ldr	r3, [r7, #24]
	}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3720      	adds	r7, #32
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	21a5      	movs	r1, #165	; 0xa5
 8002dc6:	f001 ff4f 	bl	8004c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	f023 0307 	bic.w	r3, r3, #7
 8002de2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	617b      	str	r3, [r7, #20]
}
 8002e00:	bf00      	nop
 8002e02:	e7fe      	b.n	8002e02 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01f      	beq.n	8002e4a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e012      	b.n	8002e36 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	7819      	ldrb	r1, [r3, #0]
 8002e18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3334      	adds	r3, #52	; 0x34
 8002e20:	460a      	mov	r2, r1
 8002e22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	4413      	add	r3, r2
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d006      	beq.n	8002e3e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	3301      	adds	r3, #1
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	2b0f      	cmp	r3, #15
 8002e3a:	d9e9      	bls.n	8002e10 <prvInitialiseNewTask+0x64>
 8002e3c:	e000      	b.n	8002e40 <prvInitialiseNewTask+0x94>
			{
				break;
 8002e3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e48:	e003      	b.n	8002e52 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	2b37      	cmp	r3, #55	; 0x37
 8002e56:	d901      	bls.n	8002e5c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e58:	2337      	movs	r3, #55	; 0x37
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	3304      	adds	r3, #4
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f9aa 	bl	80021cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	3318      	adds	r3, #24
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff f9a5 	bl	80021cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	68f9      	ldr	r1, [r7, #12]
 8002eaa:	69b8      	ldr	r0, [r7, #24]
 8002eac:	f001 f8ac 	bl	8004008 <pxPortInitialiseStack>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec2:	bf00      	nop
 8002ec4:	3720      	adds	r7, #32
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002ed4:	f001 f9c6 	bl	8004264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <prvAddNewTaskToReadyList+0xa8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <prvAddNewTaskToReadyList+0xa8>)
 8002ee0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ee2:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <prvAddNewTaskToReadyList+0xac>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002eea:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <prvAddNewTaskToReadyList+0xac>)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <prvAddNewTaskToReadyList+0xa8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d110      	bne.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ef8:	f000 fb9a 	bl	8003630 <prvInitialiseTaskLists>
 8002efc:	e00d      	b.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002efe:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <prvAddNewTaskToReadyList+0xb0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <prvAddNewTaskToReadyList+0xac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d802      	bhi.n	8002f1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f14:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <prvAddNewTaskToReadyList+0xac>)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <prvAddNewTaskToReadyList+0xb4>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	4a17      	ldr	r2, [pc, #92]	; (8002f80 <prvAddNewTaskToReadyList+0xb4>)
 8002f22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f24:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <prvAddNewTaskToReadyList+0xb4>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <prvAddNewTaskToReadyList+0xb8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d903      	bls.n	8002f40 <prvAddNewTaskToReadyList+0x74>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3c:	4a11      	ldr	r2, [pc, #68]	; (8002f84 <prvAddNewTaskToReadyList+0xb8>)
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <prvAddNewTaskToReadyList+0xbc>)
 8002f4e:	441a      	add	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7ff f945 	bl	80021e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f5c:	f001 f9b2 	bl	80042c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f60:	4b06      	ldr	r3, [pc, #24]	; (8002f7c <prvAddNewTaskToReadyList+0xb0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <prvAddNewTaskToReadyList+0xa0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <prvAddNewTaskToReadyList+0xac>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f6c:	bf00      	nop
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000ca0 	.word	0x20000ca0
 8002f78:	200007cc 	.word	0x200007cc
 8002f7c:	20000cac 	.word	0x20000cac
 8002f80:	20000cbc 	.word	0x20000cbc
 8002f84:	20000ca8 	.word	0x20000ca8
 8002f88:	200007d0 	.word	0x200007d0

08002f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f9a:	463a      	mov	r2, r7
 8002f9c:	1d39      	adds	r1, r7, #4
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f8be 	bl	8002124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	9202      	str	r2, [sp, #8]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	460a      	mov	r2, r1
 8002fba:	4921      	ldr	r1, [pc, #132]	; (8003040 <vTaskStartScheduler+0xb4>)
 8002fbc:	4821      	ldr	r0, [pc, #132]	; (8003044 <vTaskStartScheduler+0xb8>)
 8002fbe:	f7ff fe53 	bl	8002c68 <xTaskCreateStatic>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a20      	ldr	r2, [pc, #128]	; (8003048 <vTaskStartScheduler+0xbc>)
 8002fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <vTaskStartScheduler+0xbc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	e001      	b.n	8002fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d102      	bne.n	8002fe6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002fe0:	f000 fcc4 	bl	800396c <xTimerCreateTimerTask>
 8002fe4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d116      	bne.n	800301a <vTaskStartScheduler+0x8e>
	__asm volatile
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	613b      	str	r3, [r7, #16]
}
 8002ffe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <vTaskStartScheduler+0xc0>)
 8003002:	f04f 32ff 	mov.w	r2, #4294967295
 8003006:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <vTaskStartScheduler+0xc4>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <vTaskStartScheduler+0xc8>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003014:	f001 f884 	bl	8004120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003018:	e00e      	b.n	8003038 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003020:	d10a      	bne.n	8003038 <vTaskStartScheduler+0xac>
	__asm volatile
 8003022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003026:	f383 8811 	msr	BASEPRI, r3
 800302a:	f3bf 8f6f 	isb	sy
 800302e:	f3bf 8f4f 	dsb	sy
 8003032:	60fb      	str	r3, [r7, #12]
}
 8003034:	bf00      	nop
 8003036:	e7fe      	b.n	8003036 <vTaskStartScheduler+0xaa>
}
 8003038:	bf00      	nop
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	08005258 	.word	0x08005258
 8003044:	0800360d 	.word	0x0800360d
 8003048:	20000cc4 	.word	0x20000cc4
 800304c:	20000cc0 	.word	0x20000cc0
 8003050:	20000cac 	.word	0x20000cac
 8003054:	20000ca4 	.word	0x20000ca4

08003058 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800305c:	4b04      	ldr	r3, [pc, #16]	; (8003070 <vTaskSuspendAll+0x18>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	4a03      	ldr	r2, [pc, #12]	; (8003070 <vTaskSuspendAll+0x18>)
 8003064:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	20000cc8 	.word	0x20000cc8

08003074 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <xTaskResumeAll+0x100>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10a      	bne.n	80030a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	603b      	str	r3, [r7, #0]
}
 800309c:	bf00      	nop
 800309e:	e7fe      	b.n	800309e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030a0:	f001 f8e0 	bl	8004264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <xTaskResumeAll+0x100>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	4a32      	ldr	r2, [pc, #200]	; (8003174 <xTaskResumeAll+0x100>)
 80030ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <xTaskResumeAll+0x100>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d156      	bne.n	8003164 <xTaskResumeAll+0xf0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <xTaskResumeAll+0x104>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d052      	beq.n	8003164 <xTaskResumeAll+0xf0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030be:	e02f      	b.n	8003120 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c0:	4b2e      	ldr	r3, [pc, #184]	; (800317c <xTaskResumeAll+0x108>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3318      	adds	r3, #24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff f8e7 	bl	80022a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3304      	adds	r3, #4
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f8e2 	bl	80022a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	4b27      	ldr	r3, [pc, #156]	; (8003180 <xTaskResumeAll+0x10c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d903      	bls.n	80030f0 <xTaskResumeAll+0x7c>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4a24      	ldr	r2, [pc, #144]	; (8003180 <xTaskResumeAll+0x10c>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <xTaskResumeAll+0x110>)
 80030fe:	441a      	add	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7ff f86d 	bl	80021e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <xTaskResumeAll+0x114>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	429a      	cmp	r2, r3
 8003118:	d302      	bcc.n	8003120 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800311a:	4b1c      	ldr	r3, [pc, #112]	; (800318c <xTaskResumeAll+0x118>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003120:	4b16      	ldr	r3, [pc, #88]	; (800317c <xTaskResumeAll+0x108>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1cb      	bne.n	80030c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800312e:	f000 fb1d 	bl	800376c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003132:	4b17      	ldr	r3, [pc, #92]	; (8003190 <xTaskResumeAll+0x11c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800313e:	f000 f839 	bl	80031b4 <xTaskIncrementTick>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <xTaskResumeAll+0x118>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3b01      	subs	r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f1      	bne.n	800313e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <xTaskResumeAll+0x11c>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003160:	4b0a      	ldr	r3, [pc, #40]	; (800318c <xTaskResumeAll+0x118>)
 8003162:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003164:	f001 f8ae 	bl	80042c4 <vPortExitCritical>

	return xAlreadyYielded;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000cc8 	.word	0x20000cc8
 8003178:	20000ca0 	.word	0x20000ca0
 800317c:	20000c60 	.word	0x20000c60
 8003180:	20000ca8 	.word	0x20000ca8
 8003184:	200007d0 	.word	0x200007d0
 8003188:	200007cc 	.word	0x200007cc
 800318c:	20000cb4 	.word	0x20000cb4
 8003190:	20000cb0 	.word	0x20000cb0

08003194 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <xTaskGetTickCount+0x1c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031a0:	687b      	ldr	r3, [r7, #4]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20000ca4 	.word	0x20000ca4

080031b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031be:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <xTaskIncrementTick+0x108>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d170      	bne.n	80032a8 <xTaskIncrementTick+0xf4>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <xTaskIncrementTick+0x10c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031ce:	4a3c      	ldr	r2, [pc, #240]	; (80032c0 <xTaskIncrementTick+0x10c>)
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d120      	bne.n	800321c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80031da:	4b3a      	ldr	r3, [pc, #232]	; (80032c4 <xTaskIncrementTick+0x110>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <xTaskIncrementTick+0x46>
	__asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	603b      	str	r3, [r7, #0]
}
 80031f6:	bf00      	nop
 80031f8:	e7fe      	b.n	80031f8 <xTaskIncrementTick+0x44>
 80031fa:	4b32      	ldr	r3, [pc, #200]	; (80032c4 <xTaskIncrementTick+0x110>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <xTaskIncrementTick+0x114>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2f      	ldr	r2, [pc, #188]	; (80032c4 <xTaskIncrementTick+0x110>)
 8003206:	6013      	str	r3, [r2, #0]
 8003208:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <xTaskIncrementTick+0x114>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <xTaskIncrementTick+0x118>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3301      	adds	r3, #1
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <xTaskIncrementTick+0x118>)
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	f000 faa8 	bl	800376c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800321c:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <xTaskIncrementTick+0x11c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	429a      	cmp	r2, r3
 8003224:	d345      	bcc.n	80032b2 <xTaskIncrementTick+0xfe>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <xTaskIncrementTick+0x110>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d104      	bne.n	800323a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003230:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <xTaskIncrementTick+0x11c>)
 8003232:	f04f 32ff 	mov.w	r2, #4294967295
 8003236:	601a      	str	r2, [r3, #0]
					break;
 8003238:	e03b      	b.n	80032b2 <xTaskIncrementTick+0xfe>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <xTaskIncrementTick+0x110>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d203      	bcs.n	800325a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003252:	4a1f      	ldr	r2, [pc, #124]	; (80032d0 <xTaskIncrementTick+0x11c>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003258:	e02b      	b.n	80032b2 <xTaskIncrementTick+0xfe>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3304      	adds	r3, #4
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f81e 	bl	80022a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3318      	adds	r3, #24
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff f815 	bl	80022a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327a:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <xTaskIncrementTick+0x120>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d903      	bls.n	800328a <xTaskIncrementTick+0xd6>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <xTaskIncrementTick+0x120>)
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800328e:	4613      	mov	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <xTaskIncrementTick+0x124>)
 8003298:	441a      	add	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3304      	adds	r3, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7fe ffa0 	bl	80021e6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032a6:	e7be      	b.n	8003226 <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032a8:	4b0c      	ldr	r3, [pc, #48]	; (80032dc <xTaskIncrementTick+0x128>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3301      	adds	r3, #1
 80032ae:	4a0b      	ldr	r2, [pc, #44]	; (80032dc <xTaskIncrementTick+0x128>)
 80032b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032b2:	697b      	ldr	r3, [r7, #20]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000cc8 	.word	0x20000cc8
 80032c0:	20000ca4 	.word	0x20000ca4
 80032c4:	20000c58 	.word	0x20000c58
 80032c8:	20000c5c 	.word	0x20000c5c
 80032cc:	20000cb8 	.word	0x20000cb8
 80032d0:	20000cc0 	.word	0x20000cc0
 80032d4:	20000ca8 	.word	0x20000ca8
 80032d8:	200007d0 	.word	0x200007d0
 80032dc:	20000cb0 	.word	0x20000cb0

080032e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <vTaskSwitchContext+0xa8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032ee:	4b27      	ldr	r3, [pc, #156]	; (800338c <vTaskSwitchContext+0xac>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032f4:	e041      	b.n	800337a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <vTaskSwitchContext+0xac>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <vTaskSwitchContext+0xb0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	e010      	b.n	8003326 <vTaskSwitchContext+0x46>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <vTaskSwitchContext+0x40>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	607b      	str	r3, [r7, #4]
}
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <vTaskSwitchContext+0x3e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3b01      	subs	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <vTaskSwitchContext+0xb4>)
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4613      	mov	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0e4      	beq.n	8003304 <vTaskSwitchContext+0x24>
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <vTaskSwitchContext+0xb4>)
 8003346:	4413      	add	r3, r2
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3308      	adds	r3, #8
 800335c:	429a      	cmp	r2, r3
 800335e:	d104      	bne.n	800336a <vTaskSwitchContext+0x8a>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <vTaskSwitchContext+0xb8>)
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <vTaskSwitchContext+0xb0>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6013      	str	r3, [r2, #0]
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	20000cc8 	.word	0x20000cc8
 800338c:	20000cb4 	.word	0x20000cb4
 8003390:	20000ca8 	.word	0x20000ca8
 8003394:	200007d0 	.word	0x200007d0
 8003398:	200007cc 	.word	0x200007cc

0800339c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10a      	bne.n	80033c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	60fb      	str	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033c2:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <vTaskPlaceOnEventList+0x44>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3318      	adds	r3, #24
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fe ff2f 	bl	800222e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033d0:	2101      	movs	r1, #1
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	f000 fa76 	bl	80038c4 <prvAddCurrentTaskToDelayedList>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	200007cc 	.word	0x200007cc

080033e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10a      	bne.n	800340c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	617b      	str	r3, [r7, #20]
}
 8003408:	bf00      	nop
 800340a:	e7fe      	b.n	800340a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <vTaskPlaceOnEventListRestricted+0x54>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3318      	adds	r3, #24
 8003412:	4619      	mov	r1, r3
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f7fe fee6 	bl	80021e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d002      	beq.n	8003426 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003420:	f04f 33ff 	mov.w	r3, #4294967295
 8003424:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	68b8      	ldr	r0, [r7, #8]
 800342a:	f000 fa4b 	bl	80038c4 <prvAddCurrentTaskToDelayedList>
	}
 800342e:	bf00      	nop
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200007cc 	.word	0x200007cc

0800343c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	60fb      	str	r3, [r7, #12]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	3318      	adds	r3, #24
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe ff17 	bl	80022a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <xTaskRemoveFromEventList+0xb0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d11d      	bne.n	80034b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3304      	adds	r3, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f7fe ff0e 	bl	80022a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	4b19      	ldr	r3, [pc, #100]	; (80034f0 <xTaskRemoveFromEventList+0xb4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d903      	bls.n	8003498 <xTaskRemoveFromEventList+0x5c>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <xTaskRemoveFromEventList+0xb4>)
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4a13      	ldr	r2, [pc, #76]	; (80034f4 <xTaskRemoveFromEventList+0xb8>)
 80034a6:	441a      	add	r2, r3
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	3304      	adds	r3, #4
 80034ac:	4619      	mov	r1, r3
 80034ae:	4610      	mov	r0, r2
 80034b0:	f7fe fe99 	bl	80021e6 <vListInsertEnd>
 80034b4:	e005      	b.n	80034c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	3318      	adds	r3, #24
 80034ba:	4619      	mov	r1, r3
 80034bc:	480e      	ldr	r0, [pc, #56]	; (80034f8 <xTaskRemoveFromEventList+0xbc>)
 80034be:	f7fe fe92 	bl	80021e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <xTaskRemoveFromEventList+0xc0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d905      	bls.n	80034dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034d0:	2301      	movs	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <xTaskRemoveFromEventList+0xc4>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e001      	b.n	80034e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80034e0:	697b      	ldr	r3, [r7, #20]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000cc8 	.word	0x20000cc8
 80034f0:	20000ca8 	.word	0x20000ca8
 80034f4:	200007d0 	.word	0x200007d0
 80034f8:	20000c60 	.word	0x20000c60
 80034fc:	200007cc 	.word	0x200007cc
 8003500:	20000cb4 	.word	0x20000cb4

08003504 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800350c:	4b06      	ldr	r3, [pc, #24]	; (8003528 <vTaskInternalSetTimeOutState+0x24>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <vTaskInternalSetTimeOutState+0x28>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	605a      	str	r2, [r3, #4]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	20000cb8 	.word	0x20000cb8
 800352c:	20000ca4 	.word	0x20000ca4

08003530 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	613b      	str	r3, [r7, #16]
}
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	60fb      	str	r3, [r7, #12]
}
 800356e:	bf00      	nop
 8003570:	e7fe      	b.n	8003570 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003572:	f000 fe77 	bl	8004264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <xTaskCheckForTimeOut+0xbc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d102      	bne.n	8003596 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]
 8003594:	e023      	b.n	80035de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <xTaskCheckForTimeOut+0xc0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d007      	beq.n	80035b2 <xTaskCheckForTimeOut+0x82>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
 80035b0:	e015      	b.n	80035de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d20b      	bcs.n	80035d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	1ad2      	subs	r2, r2, r3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff9b 	bl	8003504 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	e004      	b.n	80035de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80035da:	2301      	movs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80035de:	f000 fe71 	bl	80042c4 <vPortExitCritical>

	return xReturn;
 80035e2:	69fb      	ldr	r3, [r7, #28]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000ca4 	.word	0x20000ca4
 80035f0:	20000cb8 	.word	0x20000cb8

080035f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <vTaskMissedYield+0x14>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	20000cb4 	.word	0x20000cb4

0800360c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003614:	f000 f84c 	bl	80036b0 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003618:	4b04      	ldr	r3, [pc, #16]	; (800362c <prvIdleTask+0x20>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003628:	e7f4      	b.n	8003614 <prvIdleTask+0x8>
 800362a:	bf00      	nop
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	e00c      	b.n	8003656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4a12      	ldr	r2, [pc, #72]	; (8003690 <prvInitialiseTaskLists+0x60>)
 8003648:	4413      	add	r3, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fd9e 	bl	800218c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3301      	adds	r3, #1
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b37      	cmp	r3, #55	; 0x37
 800365a:	d9ef      	bls.n	800363c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800365c:	480d      	ldr	r0, [pc, #52]	; (8003694 <prvInitialiseTaskLists+0x64>)
 800365e:	f7fe fd95 	bl	800218c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003662:	480d      	ldr	r0, [pc, #52]	; (8003698 <prvInitialiseTaskLists+0x68>)
 8003664:	f7fe fd92 	bl	800218c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003668:	480c      	ldr	r0, [pc, #48]	; (800369c <prvInitialiseTaskLists+0x6c>)
 800366a:	f7fe fd8f 	bl	800218c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800366e:	480c      	ldr	r0, [pc, #48]	; (80036a0 <prvInitialiseTaskLists+0x70>)
 8003670:	f7fe fd8c 	bl	800218c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003674:	480b      	ldr	r0, [pc, #44]	; (80036a4 <prvInitialiseTaskLists+0x74>)
 8003676:	f7fe fd89 	bl	800218c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <prvInitialiseTaskLists+0x78>)
 800367c:	4a05      	ldr	r2, [pc, #20]	; (8003694 <prvInitialiseTaskLists+0x64>)
 800367e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003680:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <prvInitialiseTaskLists+0x7c>)
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <prvInitialiseTaskLists+0x68>)
 8003684:	601a      	str	r2, [r3, #0]
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	200007d0 	.word	0x200007d0
 8003694:	20000c30 	.word	0x20000c30
 8003698:	20000c44 	.word	0x20000c44
 800369c:	20000c60 	.word	0x20000c60
 80036a0:	20000c74 	.word	0x20000c74
 80036a4:	20000c8c 	.word	0x20000c8c
 80036a8:	20000c58 	.word	0x20000c58
 80036ac:	20000c5c 	.word	0x20000c5c

080036b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036b6:	e019      	b.n	80036ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036b8:	f000 fdd4 	bl	8004264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <prvCheckTasksWaitingTermination+0x50>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fe fde9 	bl	80022a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <prvCheckTasksWaitingTermination+0x54>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <prvCheckTasksWaitingTermination+0x54>)
 80036d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80036d8:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <prvCheckTasksWaitingTermination+0x58>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3b01      	subs	r3, #1
 80036de:	4a0a      	ldr	r2, [pc, #40]	; (8003708 <prvCheckTasksWaitingTermination+0x58>)
 80036e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80036e2:	f000 fdef 	bl	80042c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f810 	bl	800370c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <prvCheckTasksWaitingTermination+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e1      	bne.n	80036b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000c74 	.word	0x20000c74
 8003704:	20000ca0 	.word	0x20000ca0
 8003708:	20000c88 	.word	0x20000c88

0800370c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4618      	mov	r0, r3
 8003724:	f000 ff8c 	bl	8004640 <vPortFree>
				vPortFree( pxTCB );
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 ff89 	bl	8004640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800372e:	e018      	b.n	8003762 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003736:	2b01      	cmp	r3, #1
 8003738:	d103      	bne.n	8003742 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 ff80 	bl	8004640 <vPortFree>
	}
 8003740:	e00f      	b.n	8003762 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003748:	2b02      	cmp	r3, #2
 800374a:	d00a      	beq.n	8003762 <prvDeleteTCB+0x56>
	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60fb      	str	r3, [r7, #12]
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <prvDeleteTCB+0x54>
	}
 8003762:	bf00      	nop
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <prvResetNextTaskUnblockTime+0x38>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d104      	bne.n	8003786 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <prvResetNextTaskUnblockTime+0x3c>)
 800377e:	f04f 32ff 	mov.w	r2, #4294967295
 8003782:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003784:	e008      	b.n	8003798 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <prvResetNextTaskUnblockTime+0x38>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <prvResetNextTaskUnblockTime+0x3c>)
 8003796:	6013      	str	r3, [r2, #0]
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	20000c58 	.word	0x20000c58
 80037a8:	20000cc0 	.word	0x20000cc0

080037ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <xTaskGetSchedulerState+0x34>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d102      	bne.n	80037c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037ba:	2301      	movs	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
 80037be:	e008      	b.n	80037d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <xTaskGetSchedulerState+0x38>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80037c8:	2302      	movs	r3, #2
 80037ca:	607b      	str	r3, [r7, #4]
 80037cc:	e001      	b.n	80037d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80037ce:	2300      	movs	r3, #0
 80037d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80037d2:	687b      	ldr	r3, [r7, #4]
	}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000cac 	.word	0x20000cac
 80037e4:	20000cc8 	.word	0x20000cc8

080037e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d056      	beq.n	80038ac <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80037fe:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <xTaskPriorityDisinherit+0xd0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	429a      	cmp	r2, r3
 8003806:	d00a      	beq.n	800381e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	60fb      	str	r3, [r7, #12]
}
 800381a:	bf00      	nop
 800381c:	e7fe      	b.n	800381c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60bb      	str	r3, [r7, #8]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003840:	1e5a      	subs	r2, r3, #1
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384e:	429a      	cmp	r2, r3
 8003850:	d02c      	beq.n	80038ac <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003856:	2b00      	cmp	r3, #0
 8003858:	d128      	bne.n	80038ac <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	3304      	adds	r3, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe fd1e 	bl	80022a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387c:	4b0f      	ldr	r3, [pc, #60]	; (80038bc <xTaskPriorityDisinherit+0xd4>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d903      	bls.n	800388c <xTaskPriorityDisinherit+0xa4>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <xTaskPriorityDisinherit+0xd4>)
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4a09      	ldr	r2, [pc, #36]	; (80038c0 <xTaskPriorityDisinherit+0xd8>)
 800389a:	441a      	add	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	3304      	adds	r3, #4
 80038a0:	4619      	mov	r1, r3
 80038a2:	4610      	mov	r0, r2
 80038a4:	f7fe fc9f 	bl	80021e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038ac:	697b      	ldr	r3, [r7, #20]
	}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200007cc 	.word	0x200007cc
 80038bc:	20000ca8 	.word	0x20000ca8
 80038c0:	200007d0 	.word	0x200007d0

080038c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <prvAddCurrentTaskToDelayedList+0x90>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038d4:	4b20      	ldr	r3, [pc, #128]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3304      	adds	r3, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fce0 	bl	80022a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d10a      	bne.n	80038fe <prvAddCurrentTaskToDelayedList+0x3a>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4819      	ldr	r0, [pc, #100]	; (800395c <prvAddCurrentTaskToDelayedList+0x98>)
 80038f8:	f7fe fc75 	bl	80021e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038fc:	e026      	b.n	800394c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	429a      	cmp	r2, r3
 8003914:	d209      	bcs.n	800392a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7fe fc83 	bl	800222e <vListInsert>
}
 8003928:	e010      	b.n	800394c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <prvAddCurrentTaskToDelayedList+0xa0>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7fe fc79 	bl	800222e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvAddCurrentTaskToDelayedList+0xa4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d202      	bcs.n	800394c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000ca4 	.word	0x20000ca4
 8003958:	200007cc 	.word	0x200007cc
 800395c:	20000c8c 	.word	0x20000c8c
 8003960:	20000c5c 	.word	0x20000c5c
 8003964:	20000c58 	.word	0x20000c58
 8003968:	20000cc0 	.word	0x20000cc0

0800396c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003976:	f000 fb07 	bl	8003f88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <xTimerCreateTimerTask+0x80>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d021      	beq.n	80039c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800398a:	1d3a      	adds	r2, r7, #4
 800398c:	f107 0108 	add.w	r1, r7, #8
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fbdf 	bl	8002158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	9202      	str	r2, [sp, #8]
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	2302      	movs	r3, #2
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	460a      	mov	r2, r1
 80039ac:	4910      	ldr	r1, [pc, #64]	; (80039f0 <xTimerCreateTimerTask+0x84>)
 80039ae:	4811      	ldr	r0, [pc, #68]	; (80039f4 <xTimerCreateTimerTask+0x88>)
 80039b0:	f7ff f95a 	bl	8002c68 <xTaskCreateStatic>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <xTimerCreateTimerTask+0x8c>)
 80039b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <xTimerCreateTimerTask+0x8c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039c2:	2301      	movs	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	613b      	str	r3, [r7, #16]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000cfc 	.word	0x20000cfc
 80039f0:	08005260 	.word	0x08005260
 80039f4:	08003b31 	.word	0x08003b31
 80039f8:	20000d00 	.word	0x20000d00

080039fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	623b      	str	r3, [r7, #32]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02a      	beq.n	8003a88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	dc18      	bgt.n	8003a76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a44:	f7ff feb2 	bl	80037ac <xTaskGetSchedulerState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d109      	bne.n	8003a62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f107 0110 	add.w	r1, r7, #16
 8003a56:	2300      	movs	r3, #0
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	f7fe fd41 	bl	80024e0 <xQueueGenericSend>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a60:	e012      	b.n	8003a88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f107 0110 	add.w	r1, r7, #16
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f7fe fd37 	bl	80024e0 <xQueueGenericSend>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24
 8003a74:	e008      	b.n	8003a88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f107 0110 	add.w	r1, r7, #16
 8003a7e:	2300      	movs	r3, #0
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	f7fe fe13 	bl	80026ac <xQueueGenericSendFromISR>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000cfc 	.word	0x20000cfc

08003a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <prvProcessExpiredTimer+0x94>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe fbf5 	bl	80022a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d022      	beq.n	8003b0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	699a      	ldr	r2, [r3, #24]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	18d1      	adds	r1, r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	6978      	ldr	r0, [r7, #20]
 8003ad2:	f000 f8d1 	bl	8003c78 <prvInsertTimerInActiveList>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01f      	beq.n	8003b1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003adc:	2300      	movs	r3, #0
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	6978      	ldr	r0, [r7, #20]
 8003ae8:	f7ff ff88 	bl	80039fc <xTimerGenericCommand>
 8003aec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d113      	bne.n	8003b1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
}
 8003b06:	bf00      	nop
 8003b08:	e7fe      	b.n	8003b08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	6978      	ldr	r0, [r7, #20]
 8003b22:	4798      	blx	r3
}
 8003b24:	bf00      	nop
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000cf4 	.word	0x20000cf4

08003b30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 f857 	bl	8003bf0 <prvGetNextExpireTime>
 8003b42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	4619      	mov	r1, r3
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f803 	bl	8003b54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b4e:	f000 f8d5 	bl	8003cfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b52:	e7f1      	b.n	8003b38 <prvTimerTask+0x8>

08003b54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b5e:	f7ff fa7b 	bl	8003058 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b62:	f107 0308 	add.w	r3, r7, #8
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 f866 	bl	8003c38 <prvSampleTimeNow>
 8003b6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d130      	bne.n	8003bd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10a      	bne.n	8003b90 <prvProcessTimerOrBlockTask+0x3c>
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d806      	bhi.n	8003b90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b82:	f7ff fa77 	bl	8003074 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff85 	bl	8003a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b8e:	e024      	b.n	8003bda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <prvProcessTimerOrBlockTask+0x90>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <prvProcessTimerOrBlockTask+0x50>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <prvProcessTimerOrBlockTask+0x52>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ba8:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <prvProcessTimerOrBlockTask+0x94>)
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f7ff f823 	bl	8002c00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bba:	f7ff fa5b 	bl	8003074 <xTaskResumeAll>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10a      	bne.n	8003bda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bc4:	4b09      	ldr	r3, [pc, #36]	; (8003bec <prvProcessTimerOrBlockTask+0x98>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
}
 8003bd4:	e001      	b.n	8003bda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bd6:	f7ff fa4d 	bl	8003074 <xTaskResumeAll>
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000cf8 	.word	0x20000cf8
 8003be8:	20000cfc 	.word	0x20000cfc
 8003bec:	e000ed04 	.word	0xe000ed04

08003bf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <prvGetNextExpireTime+0x44>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <prvGetNextExpireTime+0x16>
 8003c02:	2201      	movs	r2, #1
 8003c04:	e000      	b.n	8003c08 <prvGetNextExpireTime+0x18>
 8003c06:	2200      	movs	r2, #0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d105      	bne.n	8003c20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <prvGetNextExpireTime+0x44>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e001      	b.n	8003c24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c24:	68fb      	ldr	r3, [r7, #12]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000cf4 	.word	0x20000cf4

08003c38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c40:	f7ff faa8 	bl	8003194 <xTaskGetTickCount>
 8003c44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <prvSampleTimeNow+0x3c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d205      	bcs.n	8003c5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c50:	f000 f936 	bl	8003ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c62:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <prvSampleTimeNow+0x3c>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c68:	68fb      	ldr	r3, [r7, #12]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000d04 	.word	0x20000d04

08003c78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d812      	bhi.n	8003cc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d302      	bcc.n	8003cb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cac:	2301      	movs	r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	e01b      	b.n	8003cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <prvInsertTimerInActiveList+0x7c>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	f7fe fab6 	bl	800222e <vListInsert>
 8003cc2:	e012      	b.n	8003cea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d206      	bcs.n	8003cda <prvInsertTimerInActiveList+0x62>
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	e007      	b.n	8003cea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <prvInsertTimerInActiveList+0x80>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	f7fe faa2 	bl	800222e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cea:	697b      	ldr	r3, [r7, #20]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000cf8 	.word	0x20000cf8
 8003cf8:	20000cf4 	.word	0x20000cf4

08003cfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d02:	e0ca      	b.n	8003e9a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	da18      	bge.n	8003d3c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	61fb      	str	r3, [r7, #28]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d32:	6850      	ldr	r0, [r2, #4]
 8003d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d36:	6892      	ldr	r2, [r2, #8]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f2c0 80ab 	blt.w	8003e9a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d004      	beq.n	8003d5a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	3304      	adds	r3, #4
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fe faa3 	bl	80022a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff6b 	bl	8003c38 <prvSampleTimeNow>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b09      	cmp	r3, #9
 8003d68:	f200 8096 	bhi.w	8003e98 <prvProcessReceivedCommands+0x19c>
 8003d6c:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <prvProcessReceivedCommands+0x78>)
 8003d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d72:	bf00      	nop
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003e11 	.word	0x08003e11
 8003d84:	08003e25 	.word	0x08003e25
 8003d88:	08003e6f 	.word	0x08003e6f
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003d9d 	.word	0x08003d9d
 8003d94:	08003e11 	.word	0x08003e11
 8003d98:	08003e25 	.word	0x08003e25
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dae:	68ba      	ldr	r2, [r7, #8]
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	18d1      	adds	r1, r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dbc:	f7ff ff5c 	bl	8003c78 <prvInsertTimerInActiveList>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d069      	beq.n	8003e9a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05e      	beq.n	8003e9a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	441a      	add	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	2100      	movs	r1, #0
 8003dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dee:	f7ff fe05 	bl	80039fc <xTimerGenericCommand>
 8003df2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d14f      	bne.n	8003e9a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	61bb      	str	r3, [r7, #24]
}
 8003e0c:	bf00      	nop
 8003e0e:	e7fe      	b.n	8003e0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e22:	e03a      	b.n	8003e9a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	617b      	str	r3, [r7, #20]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	18d1      	adds	r1, r2, r3
 8003e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e68:	f7ff ff06 	bl	8003c78 <prvInsertTimerInActiveList>
					break;
 8003e6c:	e015      	b.n	8003e9a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d103      	bne.n	8003e84 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e7e:	f000 fbdf 	bl	8004640 <vPortFree>
 8003e82:	e00a      	b.n	8003e9a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e96:	e000      	b.n	8003e9a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <prvProcessReceivedCommands+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	1d39      	adds	r1, r7, #4
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fc9e 	bl	80027e4 <xQueueReceive>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f47f af2a 	bne.w	8003d04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3730      	adds	r7, #48	; 0x30
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000cfc 	.word	0x20000cfc

08003ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ec6:	e048      	b.n	8003f5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <prvSwitchTimerLists+0xc0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ed2:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <prvSwitchTimerLists+0xc0>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fe f9dd 	bl	80022a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d02e      	beq.n	8003f5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d90e      	bls.n	8003f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <prvSwitchTimerLists+0xc0>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fe f982 	bl	800222e <vListInsert>
 8003f2a:	e016      	b.n	8003f5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	2100      	movs	r1, #0
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fd60 	bl	80039fc <xTimerGenericCommand>
 8003f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10a      	bne.n	8003f5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	603b      	str	r3, [r7, #0]
}
 8003f56:	bf00      	nop
 8003f58:	e7fe      	b.n	8003f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <prvSwitchTimerLists+0xc0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1b1      	bne.n	8003ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <prvSwitchTimerLists+0xc0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <prvSwitchTimerLists+0xc4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <prvSwitchTimerLists+0xc0>)
 8003f70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003f72:	4a04      	ldr	r2, [pc, #16]	; (8003f84 <prvSwitchTimerLists+0xc4>)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000cf4 	.word	0x20000cf4
 8003f84:	20000cf8 	.word	0x20000cf8

08003f88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f8e:	f000 f969 	bl	8004264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f92:	4b15      	ldr	r3, [pc, #84]	; (8003fe8 <prvCheckForValidListAndQueue+0x60>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d120      	bne.n	8003fdc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f9a:	4814      	ldr	r0, [pc, #80]	; (8003fec <prvCheckForValidListAndQueue+0x64>)
 8003f9c:	f7fe f8f6 	bl	800218c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fa0:	4813      	ldr	r0, [pc, #76]	; (8003ff0 <prvCheckForValidListAndQueue+0x68>)
 8003fa2:	f7fe f8f3 	bl	800218c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fa6:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <prvCheckForValidListAndQueue+0x6c>)
 8003fa8:	4a10      	ldr	r2, [pc, #64]	; (8003fec <prvCheckForValidListAndQueue+0x64>)
 8003faa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <prvCheckForValidListAndQueue+0x70>)
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <prvCheckForValidListAndQueue+0x68>)
 8003fb0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <prvCheckForValidListAndQueue+0x74>)
 8003fb8:	4a11      	ldr	r2, [pc, #68]	; (8004000 <prvCheckForValidListAndQueue+0x78>)
 8003fba:	2110      	movs	r1, #16
 8003fbc:	200a      	movs	r0, #10
 8003fbe:	f7fe f9f4 	bl	80023aa <xQueueGenericCreateStatic>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4a08      	ldr	r2, [pc, #32]	; (8003fe8 <prvCheckForValidListAndQueue+0x60>)
 8003fc6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <prvCheckForValidListAndQueue+0x60>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d005      	beq.n	8003fdc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <prvCheckForValidListAndQueue+0x60>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	490b      	ldr	r1, [pc, #44]	; (8004004 <prvCheckForValidListAndQueue+0x7c>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fde8 	bl	8002bac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fdc:	f000 f972 	bl	80042c4 <vPortExitCritical>
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000cfc 	.word	0x20000cfc
 8003fec:	20000ccc 	.word	0x20000ccc
 8003ff0:	20000ce0 	.word	0x20000ce0
 8003ff4:	20000cf4 	.word	0x20000cf4
 8003ff8:	20000cf8 	.word	0x20000cf8
 8003ffc:	20000da8 	.word	0x20000da8
 8004000:	20000d08 	.word	0x20000d08
 8004004:	08005268 	.word	0x08005268

08004008 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3b04      	subs	r3, #4
 8004018:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3b04      	subs	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f023 0201 	bic.w	r2, r3, #1
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b04      	subs	r3, #4
 8004036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004038:	4a0c      	ldr	r2, [pc, #48]	; (800406c <pxPortInitialiseStack+0x64>)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b14      	subs	r3, #20
 8004042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b04      	subs	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f06f 0202 	mvn.w	r2, #2
 8004056:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3b20      	subs	r3, #32
 800405c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800405e:	68fb      	ldr	r3, [r7, #12]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	08004071 	.word	0x08004071

08004070 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <prvTaskExitError+0x54>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d00a      	beq.n	800409a <prvTaskExitError+0x2a>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	60fb      	str	r3, [r7, #12]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <prvTaskExitError+0x28>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60bb      	str	r3, [r7, #8]
}
 80040ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ae:	bf00      	nop
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0fc      	beq.n	80040b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	2000000c 	.word	0x2000000c
	...

080040d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <pxCurrentTCBConst2>)
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	6808      	ldr	r0, [r1, #0]
 80040d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040da:	f380 8809 	msr	PSP, r0
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f04f 0000 	mov.w	r0, #0
 80040e6:	f380 8811 	msr	BASEPRI, r0
 80040ea:	4770      	bx	lr
 80040ec:	f3af 8000 	nop.w

080040f0 <pxCurrentTCBConst2>:
 80040f0:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040f4:	bf00      	nop
 80040f6:	bf00      	nop

080040f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040f8:	4808      	ldr	r0, [pc, #32]	; (800411c <prvPortStartFirstTask+0x24>)
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	6800      	ldr	r0, [r0, #0]
 80040fe:	f380 8808 	msr	MSP, r0
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8814 	msr	CONTROL, r0
 800410a:	b662      	cpsie	i
 800410c:	b661      	cpsie	f
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	df00      	svc	0
 8004118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800411a:	bf00      	nop
 800411c:	e000ed08 	.word	0xe000ed08

08004120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004126:	4b46      	ldr	r3, [pc, #280]	; (8004240 <xPortStartScheduler+0x120>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a46      	ldr	r2, [pc, #280]	; (8004244 <xPortStartScheduler+0x124>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10a      	bne.n	8004146 <xPortStartScheduler+0x26>
	__asm volatile
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	613b      	str	r3, [r7, #16]
}
 8004142:	bf00      	nop
 8004144:	e7fe      	b.n	8004144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004146:	4b3e      	ldr	r3, [pc, #248]	; (8004240 <xPortStartScheduler+0x120>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3f      	ldr	r2, [pc, #252]	; (8004248 <xPortStartScheduler+0x128>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10a      	bne.n	8004166 <xPortStartScheduler+0x46>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	60fb      	str	r3, [r7, #12]
}
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004166:	4b39      	ldr	r3, [pc, #228]	; (800424c <xPortStartScheduler+0x12c>)
 8004168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4b31      	ldr	r3, [pc, #196]	; (8004250 <xPortStartScheduler+0x130>)
 800418c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800418e:	4b31      	ldr	r3, [pc, #196]	; (8004254 <xPortStartScheduler+0x134>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004194:	e009      	b.n	80041aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004196:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <xPortStartScheduler+0x134>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <xPortStartScheduler+0x134>)
 800419e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b2:	2b80      	cmp	r3, #128	; 0x80
 80041b4:	d0ef      	beq.n	8004196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041b6:	4b27      	ldr	r3, [pc, #156]	; (8004254 <xPortStartScheduler+0x134>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f1c3 0307 	rsb	r3, r3, #7
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00a      	beq.n	80041d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	60bb      	str	r3, [r7, #8]
}
 80041d4:	bf00      	nop
 80041d6:	e7fe      	b.n	80041d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041d8:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <xPortStartScheduler+0x134>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	4a1d      	ldr	r2, [pc, #116]	; (8004254 <xPortStartScheduler+0x134>)
 80041e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <xPortStartScheduler+0x134>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ea:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <xPortStartScheduler+0x134>)
 80041ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041f6:	4b18      	ldr	r3, [pc, #96]	; (8004258 <xPortStartScheduler+0x138>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <xPortStartScheduler+0x138>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004202:	4b15      	ldr	r3, [pc, #84]	; (8004258 <xPortStartScheduler+0x138>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a14      	ldr	r2, [pc, #80]	; (8004258 <xPortStartScheduler+0x138>)
 8004208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800420c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800420e:	f000 f8dd 	bl	80043cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <xPortStartScheduler+0x13c>)
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004218:	f000 f8fc 	bl	8004414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800421c:	4b10      	ldr	r3, [pc, #64]	; (8004260 <xPortStartScheduler+0x140>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a0f      	ldr	r2, [pc, #60]	; (8004260 <xPortStartScheduler+0x140>)
 8004222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004228:	f7ff ff66 	bl	80040f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800422c:	f7ff f858 	bl	80032e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004230:	f7ff ff1e 	bl	8004070 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	e000ed00 	.word	0xe000ed00
 8004244:	410fc271 	.word	0x410fc271
 8004248:	410fc270 	.word	0x410fc270
 800424c:	e000e400 	.word	0xe000e400
 8004250:	20000df8 	.word	0x20000df8
 8004254:	20000dfc 	.word	0x20000dfc
 8004258:	e000ed20 	.word	0xe000ed20
 800425c:	2000000c 	.word	0x2000000c
 8004260:	e000ef34 	.word	0xe000ef34

08004264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	607b      	str	r3, [r7, #4]
}
 800427c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <vPortEnterCritical+0x58>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3301      	adds	r3, #1
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <vPortEnterCritical+0x58>)
 8004286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004288:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <vPortEnterCritical+0x58>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10f      	bne.n	80042b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004290:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <vPortEnterCritical+0x5c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	603b      	str	r3, [r7, #0]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <vPortEnterCritical+0x4a>
	}
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	2000000c 	.word	0x2000000c
 80042c0:	e000ed04 	.word	0xe000ed04

080042c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80042ca:	4b12      	ldr	r3, [pc, #72]	; (8004314 <vPortExitCritical+0x50>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10a      	bne.n	80042e8 <vPortExitCritical+0x24>
	__asm volatile
 80042d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d6:	f383 8811 	msr	BASEPRI, r3
 80042da:	f3bf 8f6f 	isb	sy
 80042de:	f3bf 8f4f 	dsb	sy
 80042e2:	607b      	str	r3, [r7, #4]
}
 80042e4:	bf00      	nop
 80042e6:	e7fe      	b.n	80042e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042e8:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <vPortExitCritical+0x50>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <vPortExitCritical+0x50>)
 80042f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <vPortExitCritical+0x50>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d105      	bne.n	8004306 <vPortExitCritical+0x42>
 80042fa:	2300      	movs	r3, #0
 80042fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	f383 8811 	msr	BASEPRI, r3
}
 8004304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	2000000c 	.word	0x2000000c
	...

08004320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004320:	f3ef 8009 	mrs	r0, PSP
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	4b15      	ldr	r3, [pc, #84]	; (8004380 <pxCurrentTCBConst>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f01e 0f10 	tst.w	lr, #16
 8004330:	bf08      	it	eq
 8004332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800433a:	6010      	str	r0, [r2, #0]
 800433c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004344:	f380 8811 	msr	BASEPRI, r0
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f7fe ffc6 	bl	80032e0 <vTaskSwitchContext>
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f380 8811 	msr	BASEPRI, r0
 800435c:	bc09      	pop	{r0, r3}
 800435e:	6819      	ldr	r1, [r3, #0]
 8004360:	6808      	ldr	r0, [r1, #0]
 8004362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004366:	f01e 0f10 	tst.w	lr, #16
 800436a:	bf08      	it	eq
 800436c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004370:	f380 8809 	msr	PSP, r0
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	f3af 8000 	nop.w

08004380 <pxCurrentTCBConst>:
 8004380:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop

08004388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	607b      	str	r3, [r7, #4]
}
 80043a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043a2:	f7fe ff07 	bl	80031b4 <xTaskIncrementTick>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <xPortSysTickHandler+0x40>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	2300      	movs	r3, #0
 80043b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f383 8811 	msr	BASEPRI, r3
}
 80043be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80043c0:	bf00      	nop
 80043c2:	3708      	adds	r7, #8
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <vPortSetupTimerInterrupt+0x34>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <vPortSetupTimerInterrupt+0x38>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <vPortSetupTimerInterrupt+0x3c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a0a      	ldr	r2, [pc, #40]	; (800440c <vPortSetupTimerInterrupt+0x40>)
 80043e2:	fba2 2303 	umull	r2, r3, r2, r3
 80043e6:	099b      	lsrs	r3, r3, #6
 80043e8:	4a09      	ldr	r2, [pc, #36]	; (8004410 <vPortSetupTimerInterrupt+0x44>)
 80043ea:	3b01      	subs	r3, #1
 80043ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ee:	4b04      	ldr	r3, [pc, #16]	; (8004400 <vPortSetupTimerInterrupt+0x34>)
 80043f0:	2207      	movs	r2, #7
 80043f2:	601a      	str	r2, [r3, #0]
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010
 8004404:	e000e018 	.word	0xe000e018
 8004408:	20000000 	.word	0x20000000
 800440c:	10624dd3 	.word	0x10624dd3
 8004410:	e000e014 	.word	0xe000e014

08004414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004424 <vPortEnableVFP+0x10>
 8004418:	6801      	ldr	r1, [r0, #0]
 800441a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800441e:	6001      	str	r1, [r0, #0]
 8004420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004422:	bf00      	nop
 8004424:	e000ed88 	.word	0xe000ed88

08004428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800442e:	f3ef 8305 	mrs	r3, IPSR
 8004432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b0f      	cmp	r3, #15
 8004438:	d914      	bls.n	8004464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800443a:	4a17      	ldr	r2, [pc, #92]	; (8004498 <vPortValidateInterruptPriority+0x70>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004444:	4b15      	ldr	r3, [pc, #84]	; (800449c <vPortValidateInterruptPriority+0x74>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	7afa      	ldrb	r2, [r7, #11]
 800444a:	429a      	cmp	r2, r3
 800444c:	d20a      	bcs.n	8004464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	607b      	str	r3, [r7, #4]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004464:	4b0e      	ldr	r3, [pc, #56]	; (80044a0 <vPortValidateInterruptPriority+0x78>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <vPortValidateInterruptPriority+0x7c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d90a      	bls.n	800448a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	603b      	str	r3, [r7, #0]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <vPortValidateInterruptPriority+0x60>
	}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	e000e3f0 	.word	0xe000e3f0
 800449c:	20000df8 	.word	0x20000df8
 80044a0:	e000ed0c 	.word	0xe000ed0c
 80044a4:	20000dfc 	.word	0x20000dfc

080044a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b08a      	sub	sp, #40	; 0x28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044b4:	f7fe fdd0 	bl	8003058 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044b8:	4b5b      	ldr	r3, [pc, #364]	; (8004628 <pvPortMalloc+0x180>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80044c0:	f000 f920 	bl	8004704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <pvPortMalloc+0x184>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4013      	ands	r3, r2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f040 8093 	bne.w	80045f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01d      	beq.n	8004514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80044d8:	2208      	movs	r2, #8
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4413      	add	r3, r2
 80044de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d014      	beq.n	8004514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f023 0307 	bic.w	r3, r3, #7
 80044f0:	3308      	adds	r3, #8
 80044f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00a      	beq.n	8004514 <pvPortMalloc+0x6c>
	__asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	617b      	str	r3, [r7, #20]
}
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d06e      	beq.n	80045f8 <pvPortMalloc+0x150>
 800451a:	4b45      	ldr	r3, [pc, #276]	; (8004630 <pvPortMalloc+0x188>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	429a      	cmp	r2, r3
 8004522:	d869      	bhi.n	80045f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004524:	4b43      	ldr	r3, [pc, #268]	; (8004634 <pvPortMalloc+0x18c>)
 8004526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004528:	4b42      	ldr	r3, [pc, #264]	; (8004634 <pvPortMalloc+0x18c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800452e:	e004      	b.n	800453a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d903      	bls.n	800454c <pvPortMalloc+0xa4>
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f1      	bne.n	8004530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800454c:	4b36      	ldr	r3, [pc, #216]	; (8004628 <pvPortMalloc+0x180>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	429a      	cmp	r2, r3
 8004554:	d050      	beq.n	80045f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2208      	movs	r2, #8
 800455c:	4413      	add	r3, r2
 800455e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1ad2      	subs	r2, r2, r3
 8004570:	2308      	movs	r3, #8
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	429a      	cmp	r2, r3
 8004576:	d91f      	bls.n	80045b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00a      	beq.n	80045a0 <pvPortMalloc+0xf8>
	__asm volatile
 800458a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	613b      	str	r3, [r7, #16]
}
 800459c:	bf00      	nop
 800459e:	e7fe      	b.n	800459e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	1ad2      	subs	r2, r2, r3
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045b2:	69b8      	ldr	r0, [r7, #24]
 80045b4:	f000 f908 	bl	80047c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <pvPortMalloc+0x188>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <pvPortMalloc+0x188>)
 80045c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <pvPortMalloc+0x188>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <pvPortMalloc+0x190>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d203      	bcs.n	80045da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80045d2:	4b17      	ldr	r3, [pc, #92]	; (8004630 <pvPortMalloc+0x188>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a18      	ldr	r2, [pc, #96]	; (8004638 <pvPortMalloc+0x190>)
 80045d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <pvPortMalloc+0x184>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80045ee:	4b13      	ldr	r3, [pc, #76]	; (800463c <pvPortMalloc+0x194>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a11      	ldr	r2, [pc, #68]	; (800463c <pvPortMalloc+0x194>)
 80045f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80045f8:	f7fe fd3c 	bl	8003074 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <pvPortMalloc+0x174>
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	60fb      	str	r3, [r7, #12]
}
 8004618:	bf00      	nop
 800461a:	e7fe      	b.n	800461a <pvPortMalloc+0x172>
	return pvReturn;
 800461c:	69fb      	ldr	r3, [r7, #28]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3728      	adds	r7, #40	; 0x28
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20004a08 	.word	0x20004a08
 800462c:	20004a1c 	.word	0x20004a1c
 8004630:	20004a0c 	.word	0x20004a0c
 8004634:	20004a00 	.word	0x20004a00
 8004638:	20004a10 	.word	0x20004a10
 800463c:	20004a14 	.word	0x20004a14

08004640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d04d      	beq.n	80046ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004652:	2308      	movs	r3, #8
 8004654:	425b      	negs	r3, r3
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4413      	add	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	4b24      	ldr	r3, [pc, #144]	; (80046f8 <vPortFree+0xb8>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <vPortFree+0x44>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	60fb      	str	r3, [r7, #12]
}
 8004680:	bf00      	nop
 8004682:	e7fe      	b.n	8004682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <vPortFree+0x62>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	60bb      	str	r3, [r7, #8]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <vPortFree+0xb8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01e      	beq.n	80046ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d11a      	bne.n	80046ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	4b0e      	ldr	r3, [pc, #56]	; (80046f8 <vPortFree+0xb8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	401a      	ands	r2, r3
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80046c8:	f7fe fcc6 	bl	8003058 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <vPortFree+0xbc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	4a09      	ldr	r2, [pc, #36]	; (80046fc <vPortFree+0xbc>)
 80046d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80046da:	6938      	ldr	r0, [r7, #16]
 80046dc:	f000 f874 	bl	80047c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80046e0:	4b07      	ldr	r3, [pc, #28]	; (8004700 <vPortFree+0xc0>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	4a06      	ldr	r2, [pc, #24]	; (8004700 <vPortFree+0xc0>)
 80046e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80046ea:	f7fe fcc3 	bl	8003074 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20004a1c 	.word	0x20004a1c
 80046fc:	20004a0c 	.word	0x20004a0c
 8004700:	20004a18 	.word	0x20004a18

08004704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800470a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800470e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004710:	4b27      	ldr	r3, [pc, #156]	; (80047b0 <prvHeapInit+0xac>)
 8004712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00c      	beq.n	8004738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3307      	adds	r3, #7
 8004722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0307 	bic.w	r3, r3, #7
 800472a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	4a1f      	ldr	r2, [pc, #124]	; (80047b0 <prvHeapInit+0xac>)
 8004734:	4413      	add	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800473c:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <prvHeapInit+0xb0>)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004742:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <prvHeapInit+0xb0>)
 8004744:	2200      	movs	r2, #0
 8004746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	4413      	add	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004750:	2208      	movs	r2, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a15      	ldr	r2, [pc, #84]	; (80047b8 <prvHeapInit+0xb4>)
 8004764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <prvHeapInit+0xb4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <prvHeapInit+0xb4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	1ad2      	subs	r2, r2, r3
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <prvHeapInit+0xb4>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <prvHeapInit+0xb8>)
 8004792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	4a09      	ldr	r2, [pc, #36]	; (80047c0 <prvHeapInit+0xbc>)
 800479a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800479c:	4b09      	ldr	r3, [pc, #36]	; (80047c4 <prvHeapInit+0xc0>)
 800479e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	20000e00 	.word	0x20000e00
 80047b4:	20004a00 	.word	0x20004a00
 80047b8:	20004a08 	.word	0x20004a08
 80047bc:	20004a10 	.word	0x20004a10
 80047c0:	20004a0c 	.word	0x20004a0c
 80047c4:	20004a1c 	.word	0x20004a1c

080047c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80047d0:	4b28      	ldr	r3, [pc, #160]	; (8004874 <prvInsertBlockIntoFreeList+0xac>)
 80047d2:	60fb      	str	r3, [r7, #12]
 80047d4:	e002      	b.n	80047dc <prvInsertBlockIntoFreeList+0x14>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d8f7      	bhi.n	80047d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	4413      	add	r3, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d108      	bne.n	800480a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	441a      	add	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	441a      	add	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d118      	bne.n	8004850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <prvInsertBlockIntoFreeList+0xb0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d00d      	beq.n	8004846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	441a      	add	r2, r3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e008      	b.n	8004858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <prvInsertBlockIntoFreeList+0xb0>)
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e003      	b.n	8004858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	429a      	cmp	r2, r3
 800485e:	d002      	beq.n	8004866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	20004a00 	.word	0x20004a00
 8004878:	20004a08 	.word	0x20004a08

0800487c <std>:
 800487c:	2300      	movs	r3, #0
 800487e:	b510      	push	{r4, lr}
 8004880:	4604      	mov	r4, r0
 8004882:	e9c0 3300 	strd	r3, r3, [r0]
 8004886:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800488a:	6083      	str	r3, [r0, #8]
 800488c:	8181      	strh	r1, [r0, #12]
 800488e:	6643      	str	r3, [r0, #100]	; 0x64
 8004890:	81c2      	strh	r2, [r0, #14]
 8004892:	6183      	str	r3, [r0, #24]
 8004894:	4619      	mov	r1, r3
 8004896:	2208      	movs	r2, #8
 8004898:	305c      	adds	r0, #92	; 0x5c
 800489a:	f000 f9e5 	bl	8004c68 <memset>
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <std+0x58>)
 80048a0:	6263      	str	r3, [r4, #36]	; 0x24
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <std+0x5c>)
 80048a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <std+0x60>)
 80048a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <std+0x64>)
 80048ac:	6323      	str	r3, [r4, #48]	; 0x30
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <std+0x68>)
 80048b0:	6224      	str	r4, [r4, #32]
 80048b2:	429c      	cmp	r4, r3
 80048b4:	d006      	beq.n	80048c4 <std+0x48>
 80048b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80048ba:	4294      	cmp	r4, r2
 80048bc:	d002      	beq.n	80048c4 <std+0x48>
 80048be:	33d0      	adds	r3, #208	; 0xd0
 80048c0:	429c      	cmp	r4, r3
 80048c2:	d105      	bne.n	80048d0 <std+0x54>
 80048c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048cc:	f000 ba3e 	b.w	8004d4c <__retarget_lock_init_recursive>
 80048d0:	bd10      	pop	{r4, pc}
 80048d2:	bf00      	nop
 80048d4:	08004ab9 	.word	0x08004ab9
 80048d8:	08004adb 	.word	0x08004adb
 80048dc:	08004b13 	.word	0x08004b13
 80048e0:	08004b37 	.word	0x08004b37
 80048e4:	20004a20 	.word	0x20004a20

080048e8 <stdio_exit_handler>:
 80048e8:	4a02      	ldr	r2, [pc, #8]	; (80048f4 <stdio_exit_handler+0xc>)
 80048ea:	4903      	ldr	r1, [pc, #12]	; (80048f8 <stdio_exit_handler+0x10>)
 80048ec:	4803      	ldr	r0, [pc, #12]	; (80048fc <stdio_exit_handler+0x14>)
 80048ee:	f000 b869 	b.w	80049c4 <_fwalk_sglue>
 80048f2:	bf00      	nop
 80048f4:	20000010 	.word	0x20000010
 80048f8:	0800506d 	.word	0x0800506d
 80048fc:	2000001c 	.word	0x2000001c

08004900 <cleanup_stdio>:
 8004900:	6841      	ldr	r1, [r0, #4]
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <cleanup_stdio+0x34>)
 8004904:	4299      	cmp	r1, r3
 8004906:	b510      	push	{r4, lr}
 8004908:	4604      	mov	r4, r0
 800490a:	d001      	beq.n	8004910 <cleanup_stdio+0x10>
 800490c:	f000 fbae 	bl	800506c <_fflush_r>
 8004910:	68a1      	ldr	r1, [r4, #8]
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <cleanup_stdio+0x38>)
 8004914:	4299      	cmp	r1, r3
 8004916:	d002      	beq.n	800491e <cleanup_stdio+0x1e>
 8004918:	4620      	mov	r0, r4
 800491a:	f000 fba7 	bl	800506c <_fflush_r>
 800491e:	68e1      	ldr	r1, [r4, #12]
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <cleanup_stdio+0x3c>)
 8004922:	4299      	cmp	r1, r3
 8004924:	d004      	beq.n	8004930 <cleanup_stdio+0x30>
 8004926:	4620      	mov	r0, r4
 8004928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800492c:	f000 bb9e 	b.w	800506c <_fflush_r>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	20004a20 	.word	0x20004a20
 8004938:	20004a88 	.word	0x20004a88
 800493c:	20004af0 	.word	0x20004af0

08004940 <global_stdio_init.part.0>:
 8004940:	b510      	push	{r4, lr}
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <global_stdio_init.part.0+0x30>)
 8004944:	4c0b      	ldr	r4, [pc, #44]	; (8004974 <global_stdio_init.part.0+0x34>)
 8004946:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <global_stdio_init.part.0+0x38>)
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	4620      	mov	r0, r4
 800494c:	2200      	movs	r2, #0
 800494e:	2104      	movs	r1, #4
 8004950:	f7ff ff94 	bl	800487c <std>
 8004954:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004958:	2201      	movs	r2, #1
 800495a:	2109      	movs	r1, #9
 800495c:	f7ff ff8e 	bl	800487c <std>
 8004960:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004964:	2202      	movs	r2, #2
 8004966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800496a:	2112      	movs	r1, #18
 800496c:	f7ff bf86 	b.w	800487c <std>
 8004970:	20004b58 	.word	0x20004b58
 8004974:	20004a20 	.word	0x20004a20
 8004978:	080048e9 	.word	0x080048e9

0800497c <__sfp_lock_acquire>:
 800497c:	4801      	ldr	r0, [pc, #4]	; (8004984 <__sfp_lock_acquire+0x8>)
 800497e:	f000 b9e6 	b.w	8004d4e <__retarget_lock_acquire_recursive>
 8004982:	bf00      	nop
 8004984:	20004b61 	.word	0x20004b61

08004988 <__sfp_lock_release>:
 8004988:	4801      	ldr	r0, [pc, #4]	; (8004990 <__sfp_lock_release+0x8>)
 800498a:	f000 b9e1 	b.w	8004d50 <__retarget_lock_release_recursive>
 800498e:	bf00      	nop
 8004990:	20004b61 	.word	0x20004b61

08004994 <__sinit>:
 8004994:	b510      	push	{r4, lr}
 8004996:	4604      	mov	r4, r0
 8004998:	f7ff fff0 	bl	800497c <__sfp_lock_acquire>
 800499c:	6a23      	ldr	r3, [r4, #32]
 800499e:	b11b      	cbz	r3, 80049a8 <__sinit+0x14>
 80049a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049a4:	f7ff bff0 	b.w	8004988 <__sfp_lock_release>
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <__sinit+0x28>)
 80049aa:	6223      	str	r3, [r4, #32]
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <__sinit+0x2c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f5      	bne.n	80049a0 <__sinit+0xc>
 80049b4:	f7ff ffc4 	bl	8004940 <global_stdio_init.part.0>
 80049b8:	e7f2      	b.n	80049a0 <__sinit+0xc>
 80049ba:	bf00      	nop
 80049bc:	08004901 	.word	0x08004901
 80049c0:	20004b58 	.word	0x20004b58

080049c4 <_fwalk_sglue>:
 80049c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049c8:	4607      	mov	r7, r0
 80049ca:	4688      	mov	r8, r1
 80049cc:	4614      	mov	r4, r2
 80049ce:	2600      	movs	r6, #0
 80049d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049d4:	f1b9 0901 	subs.w	r9, r9, #1
 80049d8:	d505      	bpl.n	80049e6 <_fwalk_sglue+0x22>
 80049da:	6824      	ldr	r4, [r4, #0]
 80049dc:	2c00      	cmp	r4, #0
 80049de:	d1f7      	bne.n	80049d0 <_fwalk_sglue+0xc>
 80049e0:	4630      	mov	r0, r6
 80049e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049e6:	89ab      	ldrh	r3, [r5, #12]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d907      	bls.n	80049fc <_fwalk_sglue+0x38>
 80049ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049f0:	3301      	adds	r3, #1
 80049f2:	d003      	beq.n	80049fc <_fwalk_sglue+0x38>
 80049f4:	4629      	mov	r1, r5
 80049f6:	4638      	mov	r0, r7
 80049f8:	47c0      	blx	r8
 80049fa:	4306      	orrs	r6, r0
 80049fc:	3568      	adds	r5, #104	; 0x68
 80049fe:	e7e9      	b.n	80049d4 <_fwalk_sglue+0x10>

08004a00 <_puts_r>:
 8004a00:	6a03      	ldr	r3, [r0, #32]
 8004a02:	b570      	push	{r4, r5, r6, lr}
 8004a04:	6884      	ldr	r4, [r0, #8]
 8004a06:	4605      	mov	r5, r0
 8004a08:	460e      	mov	r6, r1
 8004a0a:	b90b      	cbnz	r3, 8004a10 <_puts_r+0x10>
 8004a0c:	f7ff ffc2 	bl	8004994 <__sinit>
 8004a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a12:	07db      	lsls	r3, r3, #31
 8004a14:	d405      	bmi.n	8004a22 <_puts_r+0x22>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	0598      	lsls	r0, r3, #22
 8004a1a:	d402      	bmi.n	8004a22 <_puts_r+0x22>
 8004a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a1e:	f000 f996 	bl	8004d4e <__retarget_lock_acquire_recursive>
 8004a22:	89a3      	ldrh	r3, [r4, #12]
 8004a24:	0719      	lsls	r1, r3, #28
 8004a26:	d513      	bpl.n	8004a50 <_puts_r+0x50>
 8004a28:	6923      	ldr	r3, [r4, #16]
 8004a2a:	b18b      	cbz	r3, 8004a50 <_puts_r+0x50>
 8004a2c:	3e01      	subs	r6, #1
 8004a2e:	68a3      	ldr	r3, [r4, #8]
 8004a30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a34:	3b01      	subs	r3, #1
 8004a36:	60a3      	str	r3, [r4, #8]
 8004a38:	b9e9      	cbnz	r1, 8004a76 <_puts_r+0x76>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da2e      	bge.n	8004a9c <_puts_r+0x9c>
 8004a3e:	4622      	mov	r2, r4
 8004a40:	210a      	movs	r1, #10
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f87b 	bl	8004b3e <__swbuf_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d007      	beq.n	8004a5c <_puts_r+0x5c>
 8004a4c:	250a      	movs	r5, #10
 8004a4e:	e007      	b.n	8004a60 <_puts_r+0x60>
 8004a50:	4621      	mov	r1, r4
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f8b0 	bl	8004bb8 <__swsetup_r>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	d0e7      	beq.n	8004a2c <_puts_r+0x2c>
 8004a5c:	f04f 35ff 	mov.w	r5, #4294967295
 8004a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a62:	07da      	lsls	r2, r3, #31
 8004a64:	d405      	bmi.n	8004a72 <_puts_r+0x72>
 8004a66:	89a3      	ldrh	r3, [r4, #12]
 8004a68:	059b      	lsls	r3, r3, #22
 8004a6a:	d402      	bmi.n	8004a72 <_puts_r+0x72>
 8004a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a6e:	f000 f96f 	bl	8004d50 <__retarget_lock_release_recursive>
 8004a72:	4628      	mov	r0, r5
 8004a74:	bd70      	pop	{r4, r5, r6, pc}
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da04      	bge.n	8004a84 <_puts_r+0x84>
 8004a7a:	69a2      	ldr	r2, [r4, #24]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	dc06      	bgt.n	8004a8e <_puts_r+0x8e>
 8004a80:	290a      	cmp	r1, #10
 8004a82:	d004      	beq.n	8004a8e <_puts_r+0x8e>
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	6022      	str	r2, [r4, #0]
 8004a8a:	7019      	strb	r1, [r3, #0]
 8004a8c:	e7cf      	b.n	8004a2e <_puts_r+0x2e>
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f854 	bl	8004b3e <__swbuf_r>
 8004a96:	3001      	adds	r0, #1
 8004a98:	d1c9      	bne.n	8004a2e <_puts_r+0x2e>
 8004a9a:	e7df      	b.n	8004a5c <_puts_r+0x5c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	250a      	movs	r5, #10
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	6022      	str	r2, [r4, #0]
 8004aa4:	701d      	strb	r5, [r3, #0]
 8004aa6:	e7db      	b.n	8004a60 <_puts_r+0x60>

08004aa8 <puts>:
 8004aa8:	4b02      	ldr	r3, [pc, #8]	; (8004ab4 <puts+0xc>)
 8004aaa:	4601      	mov	r1, r0
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	f7ff bfa7 	b.w	8004a00 <_puts_r>
 8004ab2:	bf00      	nop
 8004ab4:	20000068 	.word	0x20000068

08004ab8 <__sread>:
 8004ab8:	b510      	push	{r4, lr}
 8004aba:	460c      	mov	r4, r1
 8004abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac0:	f000 f8fc 	bl	8004cbc <_read_r>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	bfab      	itete	ge
 8004ac8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004aca:	89a3      	ldrhlt	r3, [r4, #12]
 8004acc:	181b      	addge	r3, r3, r0
 8004ace:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ad2:	bfac      	ite	ge
 8004ad4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ad6:	81a3      	strhlt	r3, [r4, #12]
 8004ad8:	bd10      	pop	{r4, pc}

08004ada <__swrite>:
 8004ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	461f      	mov	r7, r3
 8004ae0:	898b      	ldrh	r3, [r1, #12]
 8004ae2:	05db      	lsls	r3, r3, #23
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	4616      	mov	r6, r2
 8004aea:	d505      	bpl.n	8004af8 <__swrite+0x1e>
 8004aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004af0:	2302      	movs	r3, #2
 8004af2:	2200      	movs	r2, #0
 8004af4:	f000 f8d0 	bl	8004c98 <_lseek_r>
 8004af8:	89a3      	ldrh	r3, [r4, #12]
 8004afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	4632      	mov	r2, r6
 8004b06:	463b      	mov	r3, r7
 8004b08:	4628      	mov	r0, r5
 8004b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b0e:	f000 b8e7 	b.w	8004ce0 <_write_r>

08004b12 <__sseek>:
 8004b12:	b510      	push	{r4, lr}
 8004b14:	460c      	mov	r4, r1
 8004b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b1a:	f000 f8bd 	bl	8004c98 <_lseek_r>
 8004b1e:	1c43      	adds	r3, r0, #1
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	bf15      	itete	ne
 8004b24:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004b2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004b2e:	81a3      	strheq	r3, [r4, #12]
 8004b30:	bf18      	it	ne
 8004b32:	81a3      	strhne	r3, [r4, #12]
 8004b34:	bd10      	pop	{r4, pc}

08004b36 <__sclose>:
 8004b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3a:	f000 b89d 	b.w	8004c78 <_close_r>

08004b3e <__swbuf_r>:
 8004b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b40:	460e      	mov	r6, r1
 8004b42:	4614      	mov	r4, r2
 8004b44:	4605      	mov	r5, r0
 8004b46:	b118      	cbz	r0, 8004b50 <__swbuf_r+0x12>
 8004b48:	6a03      	ldr	r3, [r0, #32]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <__swbuf_r+0x12>
 8004b4c:	f7ff ff22 	bl	8004994 <__sinit>
 8004b50:	69a3      	ldr	r3, [r4, #24]
 8004b52:	60a3      	str	r3, [r4, #8]
 8004b54:	89a3      	ldrh	r3, [r4, #12]
 8004b56:	071a      	lsls	r2, r3, #28
 8004b58:	d525      	bpl.n	8004ba6 <__swbuf_r+0x68>
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	b31b      	cbz	r3, 8004ba6 <__swbuf_r+0x68>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	6922      	ldr	r2, [r4, #16]
 8004b62:	1a98      	subs	r0, r3, r2
 8004b64:	6963      	ldr	r3, [r4, #20]
 8004b66:	b2f6      	uxtb	r6, r6
 8004b68:	4283      	cmp	r3, r0
 8004b6a:	4637      	mov	r7, r6
 8004b6c:	dc04      	bgt.n	8004b78 <__swbuf_r+0x3a>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4628      	mov	r0, r5
 8004b72:	f000 fa7b 	bl	800506c <_fflush_r>
 8004b76:	b9e0      	cbnz	r0, 8004bb2 <__swbuf_r+0x74>
 8004b78:	68a3      	ldr	r3, [r4, #8]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60a3      	str	r3, [r4, #8]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	6022      	str	r2, [r4, #0]
 8004b84:	701e      	strb	r6, [r3, #0]
 8004b86:	6962      	ldr	r2, [r4, #20]
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d004      	beq.n	8004b98 <__swbuf_r+0x5a>
 8004b8e:	89a3      	ldrh	r3, [r4, #12]
 8004b90:	07db      	lsls	r3, r3, #31
 8004b92:	d506      	bpl.n	8004ba2 <__swbuf_r+0x64>
 8004b94:	2e0a      	cmp	r6, #10
 8004b96:	d104      	bne.n	8004ba2 <__swbuf_r+0x64>
 8004b98:	4621      	mov	r1, r4
 8004b9a:	4628      	mov	r0, r5
 8004b9c:	f000 fa66 	bl	800506c <_fflush_r>
 8004ba0:	b938      	cbnz	r0, 8004bb2 <__swbuf_r+0x74>
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f805 	bl	8004bb8 <__swsetup_r>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d0d5      	beq.n	8004b5e <__swbuf_r+0x20>
 8004bb2:	f04f 37ff 	mov.w	r7, #4294967295
 8004bb6:	e7f4      	b.n	8004ba2 <__swbuf_r+0x64>

08004bb8 <__swsetup_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <__swsetup_r+0xac>)
 8004bbc:	4605      	mov	r5, r0
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	b118      	cbz	r0, 8004bcc <__swsetup_r+0x14>
 8004bc4:	6a03      	ldr	r3, [r0, #32]
 8004bc6:	b90b      	cbnz	r3, 8004bcc <__swsetup_r+0x14>
 8004bc8:	f7ff fee4 	bl	8004994 <__sinit>
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bd2:	0718      	lsls	r0, r3, #28
 8004bd4:	d422      	bmi.n	8004c1c <__swsetup_r+0x64>
 8004bd6:	06d9      	lsls	r1, r3, #27
 8004bd8:	d407      	bmi.n	8004bea <__swsetup_r+0x32>
 8004bda:	2309      	movs	r3, #9
 8004bdc:	602b      	str	r3, [r5, #0]
 8004bde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e034      	b.n	8004c54 <__swsetup_r+0x9c>
 8004bea:	0758      	lsls	r0, r3, #29
 8004bec:	d512      	bpl.n	8004c14 <__swsetup_r+0x5c>
 8004bee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bf0:	b141      	cbz	r1, 8004c04 <__swsetup_r+0x4c>
 8004bf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bf6:	4299      	cmp	r1, r3
 8004bf8:	d002      	beq.n	8004c00 <__swsetup_r+0x48>
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	f000 f8b8 	bl	8004d70 <_free_r>
 8004c00:	2300      	movs	r3, #0
 8004c02:	6363      	str	r3, [r4, #52]	; 0x34
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6063      	str	r3, [r4, #4]
 8004c10:	6923      	ldr	r3, [r4, #16]
 8004c12:	6023      	str	r3, [r4, #0]
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f043 0308 	orr.w	r3, r3, #8
 8004c1a:	81a3      	strh	r3, [r4, #12]
 8004c1c:	6923      	ldr	r3, [r4, #16]
 8004c1e:	b94b      	cbnz	r3, 8004c34 <__swsetup_r+0x7c>
 8004c20:	89a3      	ldrh	r3, [r4, #12]
 8004c22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2a:	d003      	beq.n	8004c34 <__swsetup_r+0x7c>
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fa6a 	bl	8005108 <__smakebuf_r>
 8004c34:	89a0      	ldrh	r0, [r4, #12]
 8004c36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c3a:	f010 0301 	ands.w	r3, r0, #1
 8004c3e:	d00a      	beq.n	8004c56 <__swsetup_r+0x9e>
 8004c40:	2300      	movs	r3, #0
 8004c42:	60a3      	str	r3, [r4, #8]
 8004c44:	6963      	ldr	r3, [r4, #20]
 8004c46:	425b      	negs	r3, r3
 8004c48:	61a3      	str	r3, [r4, #24]
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	b943      	cbnz	r3, 8004c60 <__swsetup_r+0xa8>
 8004c4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c52:	d1c4      	bne.n	8004bde <__swsetup_r+0x26>
 8004c54:	bd38      	pop	{r3, r4, r5, pc}
 8004c56:	0781      	lsls	r1, r0, #30
 8004c58:	bf58      	it	pl
 8004c5a:	6963      	ldrpl	r3, [r4, #20]
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	e7f4      	b.n	8004c4a <__swsetup_r+0x92>
 8004c60:	2000      	movs	r0, #0
 8004c62:	e7f7      	b.n	8004c54 <__swsetup_r+0x9c>
 8004c64:	20000068 	.word	0x20000068

08004c68 <memset>:
 8004c68:	4402      	add	r2, r0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <memset+0xa>
 8004c70:	4770      	bx	lr
 8004c72:	f803 1b01 	strb.w	r1, [r3], #1
 8004c76:	e7f9      	b.n	8004c6c <memset+0x4>

08004c78 <_close_r>:
 8004c78:	b538      	push	{r3, r4, r5, lr}
 8004c7a:	4d06      	ldr	r5, [pc, #24]	; (8004c94 <_close_r+0x1c>)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4608      	mov	r0, r1
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	f7fb ff9b 	bl	8000bbe <_close>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_close_r+0x1a>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_close_r+0x1a>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	20004b5c 	.word	0x20004b5c

08004c98 <_lseek_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	; (8004cb8 <_lseek_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fb ffb0 	bl	8000c0c <_lseek>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_lseek_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_lseek_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20004b5c 	.word	0x20004b5c

08004cbc <_read_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d07      	ldr	r5, [pc, #28]	; (8004cdc <_read_r+0x20>)
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	4608      	mov	r0, r1
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	602a      	str	r2, [r5, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f7fb ff3e 	bl	8000b4c <_read>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d102      	bne.n	8004cda <_read_r+0x1e>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	b103      	cbz	r3, 8004cda <_read_r+0x1e>
 8004cd8:	6023      	str	r3, [r4, #0]
 8004cda:	bd38      	pop	{r3, r4, r5, pc}
 8004cdc:	20004b5c 	.word	0x20004b5c

08004ce0 <_write_r>:
 8004ce0:	b538      	push	{r3, r4, r5, lr}
 8004ce2:	4d07      	ldr	r5, [pc, #28]	; (8004d00 <_write_r+0x20>)
 8004ce4:	4604      	mov	r4, r0
 8004ce6:	4608      	mov	r0, r1
 8004ce8:	4611      	mov	r1, r2
 8004cea:	2200      	movs	r2, #0
 8004cec:	602a      	str	r2, [r5, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f7fb ff49 	bl	8000b86 <_write>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d102      	bne.n	8004cfe <_write_r+0x1e>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	b103      	cbz	r3, 8004cfe <_write_r+0x1e>
 8004cfc:	6023      	str	r3, [r4, #0]
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	20004b5c 	.word	0x20004b5c

08004d04 <__libc_init_array>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	4d0d      	ldr	r5, [pc, #52]	; (8004d3c <__libc_init_array+0x38>)
 8004d08:	4c0d      	ldr	r4, [pc, #52]	; (8004d40 <__libc_init_array+0x3c>)
 8004d0a:	1b64      	subs	r4, r4, r5
 8004d0c:	10a4      	asrs	r4, r4, #2
 8004d0e:	2600      	movs	r6, #0
 8004d10:	42a6      	cmp	r6, r4
 8004d12:	d109      	bne.n	8004d28 <__libc_init_array+0x24>
 8004d14:	4d0b      	ldr	r5, [pc, #44]	; (8004d44 <__libc_init_array+0x40>)
 8004d16:	4c0c      	ldr	r4, [pc, #48]	; (8004d48 <__libc_init_array+0x44>)
 8004d18:	f000 fa72 	bl	8005200 <_init>
 8004d1c:	1b64      	subs	r4, r4, r5
 8004d1e:	10a4      	asrs	r4, r4, #2
 8004d20:	2600      	movs	r6, #0
 8004d22:	42a6      	cmp	r6, r4
 8004d24:	d105      	bne.n	8004d32 <__libc_init_array+0x2e>
 8004d26:	bd70      	pop	{r4, r5, r6, pc}
 8004d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2c:	4798      	blx	r3
 8004d2e:	3601      	adds	r6, #1
 8004d30:	e7ee      	b.n	8004d10 <__libc_init_array+0xc>
 8004d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d36:	4798      	blx	r3
 8004d38:	3601      	adds	r6, #1
 8004d3a:	e7f2      	b.n	8004d22 <__libc_init_array+0x1e>
 8004d3c:	08005290 	.word	0x08005290
 8004d40:	08005290 	.word	0x08005290
 8004d44:	08005290 	.word	0x08005290
 8004d48:	08005294 	.word	0x08005294

08004d4c <__retarget_lock_init_recursive>:
 8004d4c:	4770      	bx	lr

08004d4e <__retarget_lock_acquire_recursive>:
 8004d4e:	4770      	bx	lr

08004d50 <__retarget_lock_release_recursive>:
 8004d50:	4770      	bx	lr

08004d52 <memcpy>:
 8004d52:	440a      	add	r2, r1
 8004d54:	4291      	cmp	r1, r2
 8004d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d5a:	d100      	bne.n	8004d5e <memcpy+0xc>
 8004d5c:	4770      	bx	lr
 8004d5e:	b510      	push	{r4, lr}
 8004d60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d68:	4291      	cmp	r1, r2
 8004d6a:	d1f9      	bne.n	8004d60 <memcpy+0xe>
 8004d6c:	bd10      	pop	{r4, pc}
	...

08004d70 <_free_r>:
 8004d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d72:	2900      	cmp	r1, #0
 8004d74:	d044      	beq.n	8004e00 <_free_r+0x90>
 8004d76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d7a:	9001      	str	r0, [sp, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d82:	bfb8      	it	lt
 8004d84:	18e4      	addlt	r4, r4, r3
 8004d86:	f000 f8df 	bl	8004f48 <__malloc_lock>
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <_free_r+0x94>)
 8004d8c:	9801      	ldr	r0, [sp, #4]
 8004d8e:	6813      	ldr	r3, [r2, #0]
 8004d90:	b933      	cbnz	r3, 8004da0 <_free_r+0x30>
 8004d92:	6063      	str	r3, [r4, #4]
 8004d94:	6014      	str	r4, [r2, #0]
 8004d96:	b003      	add	sp, #12
 8004d98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d9c:	f000 b8da 	b.w	8004f54 <__malloc_unlock>
 8004da0:	42a3      	cmp	r3, r4
 8004da2:	d908      	bls.n	8004db6 <_free_r+0x46>
 8004da4:	6825      	ldr	r5, [r4, #0]
 8004da6:	1961      	adds	r1, r4, r5
 8004da8:	428b      	cmp	r3, r1
 8004daa:	bf01      	itttt	eq
 8004dac:	6819      	ldreq	r1, [r3, #0]
 8004dae:	685b      	ldreq	r3, [r3, #4]
 8004db0:	1949      	addeq	r1, r1, r5
 8004db2:	6021      	streq	r1, [r4, #0]
 8004db4:	e7ed      	b.n	8004d92 <_free_r+0x22>
 8004db6:	461a      	mov	r2, r3
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	b10b      	cbz	r3, 8004dc0 <_free_r+0x50>
 8004dbc:	42a3      	cmp	r3, r4
 8004dbe:	d9fa      	bls.n	8004db6 <_free_r+0x46>
 8004dc0:	6811      	ldr	r1, [r2, #0]
 8004dc2:	1855      	adds	r5, r2, r1
 8004dc4:	42a5      	cmp	r5, r4
 8004dc6:	d10b      	bne.n	8004de0 <_free_r+0x70>
 8004dc8:	6824      	ldr	r4, [r4, #0]
 8004dca:	4421      	add	r1, r4
 8004dcc:	1854      	adds	r4, r2, r1
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	6011      	str	r1, [r2, #0]
 8004dd2:	d1e0      	bne.n	8004d96 <_free_r+0x26>
 8004dd4:	681c      	ldr	r4, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	6053      	str	r3, [r2, #4]
 8004dda:	440c      	add	r4, r1
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	e7da      	b.n	8004d96 <_free_r+0x26>
 8004de0:	d902      	bls.n	8004de8 <_free_r+0x78>
 8004de2:	230c      	movs	r3, #12
 8004de4:	6003      	str	r3, [r0, #0]
 8004de6:	e7d6      	b.n	8004d96 <_free_r+0x26>
 8004de8:	6825      	ldr	r5, [r4, #0]
 8004dea:	1961      	adds	r1, r4, r5
 8004dec:	428b      	cmp	r3, r1
 8004dee:	bf04      	itt	eq
 8004df0:	6819      	ldreq	r1, [r3, #0]
 8004df2:	685b      	ldreq	r3, [r3, #4]
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	bf04      	itt	eq
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	6054      	str	r4, [r2, #4]
 8004dfe:	e7ca      	b.n	8004d96 <_free_r+0x26>
 8004e00:	b003      	add	sp, #12
 8004e02:	bd30      	pop	{r4, r5, pc}
 8004e04:	20004b64 	.word	0x20004b64

08004e08 <sbrk_aligned>:
 8004e08:	b570      	push	{r4, r5, r6, lr}
 8004e0a:	4e0e      	ldr	r6, [pc, #56]	; (8004e44 <sbrk_aligned+0x3c>)
 8004e0c:	460c      	mov	r4, r1
 8004e0e:	6831      	ldr	r1, [r6, #0]
 8004e10:	4605      	mov	r5, r0
 8004e12:	b911      	cbnz	r1, 8004e1a <sbrk_aligned+0x12>
 8004e14:	f000 f9d6 	bl	80051c4 <_sbrk_r>
 8004e18:	6030      	str	r0, [r6, #0]
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f000 f9d1 	bl	80051c4 <_sbrk_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d00a      	beq.n	8004e3c <sbrk_aligned+0x34>
 8004e26:	1cc4      	adds	r4, r0, #3
 8004e28:	f024 0403 	bic.w	r4, r4, #3
 8004e2c:	42a0      	cmp	r0, r4
 8004e2e:	d007      	beq.n	8004e40 <sbrk_aligned+0x38>
 8004e30:	1a21      	subs	r1, r4, r0
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f9c6 	bl	80051c4 <_sbrk_r>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d101      	bne.n	8004e40 <sbrk_aligned+0x38>
 8004e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e40:	4620      	mov	r0, r4
 8004e42:	bd70      	pop	{r4, r5, r6, pc}
 8004e44:	20004b68 	.word	0x20004b68

08004e48 <_malloc_r>:
 8004e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e4c:	1ccd      	adds	r5, r1, #3
 8004e4e:	f025 0503 	bic.w	r5, r5, #3
 8004e52:	3508      	adds	r5, #8
 8004e54:	2d0c      	cmp	r5, #12
 8004e56:	bf38      	it	cc
 8004e58:	250c      	movcc	r5, #12
 8004e5a:	2d00      	cmp	r5, #0
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	db01      	blt.n	8004e64 <_malloc_r+0x1c>
 8004e60:	42a9      	cmp	r1, r5
 8004e62:	d905      	bls.n	8004e70 <_malloc_r+0x28>
 8004e64:	230c      	movs	r3, #12
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	2600      	movs	r6, #0
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004f44 <_malloc_r+0xfc>
 8004e74:	f000 f868 	bl	8004f48 <__malloc_lock>
 8004e78:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7c:	461c      	mov	r4, r3
 8004e7e:	bb5c      	cbnz	r4, 8004ed8 <_malloc_r+0x90>
 8004e80:	4629      	mov	r1, r5
 8004e82:	4638      	mov	r0, r7
 8004e84:	f7ff ffc0 	bl	8004e08 <sbrk_aligned>
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	d155      	bne.n	8004f3a <_malloc_r+0xf2>
 8004e8e:	f8d8 4000 	ldr.w	r4, [r8]
 8004e92:	4626      	mov	r6, r4
 8004e94:	2e00      	cmp	r6, #0
 8004e96:	d145      	bne.n	8004f24 <_malloc_r+0xdc>
 8004e98:	2c00      	cmp	r4, #0
 8004e9a:	d048      	beq.n	8004f2e <_malloc_r+0xe6>
 8004e9c:	6823      	ldr	r3, [r4, #0]
 8004e9e:	4631      	mov	r1, r6
 8004ea0:	4638      	mov	r0, r7
 8004ea2:	eb04 0903 	add.w	r9, r4, r3
 8004ea6:	f000 f98d 	bl	80051c4 <_sbrk_r>
 8004eaa:	4581      	cmp	r9, r0
 8004eac:	d13f      	bne.n	8004f2e <_malloc_r+0xe6>
 8004eae:	6821      	ldr	r1, [r4, #0]
 8004eb0:	1a6d      	subs	r5, r5, r1
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff ffa7 	bl	8004e08 <sbrk_aligned>
 8004eba:	3001      	adds	r0, #1
 8004ebc:	d037      	beq.n	8004f2e <_malloc_r+0xe6>
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	442b      	add	r3, r5
 8004ec2:	6023      	str	r3, [r4, #0]
 8004ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d038      	beq.n	8004f3e <_malloc_r+0xf6>
 8004ecc:	685a      	ldr	r2, [r3, #4]
 8004ece:	42a2      	cmp	r2, r4
 8004ed0:	d12b      	bne.n	8004f2a <_malloc_r+0xe2>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	e00f      	b.n	8004ef8 <_malloc_r+0xb0>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	1b52      	subs	r2, r2, r5
 8004edc:	d41f      	bmi.n	8004f1e <_malloc_r+0xd6>
 8004ede:	2a0b      	cmp	r2, #11
 8004ee0:	d917      	bls.n	8004f12 <_malloc_r+0xca>
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	6025      	str	r5, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	6059      	strne	r1, [r3, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	bf08      	it	eq
 8004ef0:	f8c8 1000 	streq.w	r1, [r8]
 8004ef4:	5162      	str	r2, [r4, r5]
 8004ef6:	604b      	str	r3, [r1, #4]
 8004ef8:	4638      	mov	r0, r7
 8004efa:	f104 060b 	add.w	r6, r4, #11
 8004efe:	f000 f829 	bl	8004f54 <__malloc_unlock>
 8004f02:	f026 0607 	bic.w	r6, r6, #7
 8004f06:	1d23      	adds	r3, r4, #4
 8004f08:	1af2      	subs	r2, r6, r3
 8004f0a:	d0ae      	beq.n	8004e6a <_malloc_r+0x22>
 8004f0c:	1b9b      	subs	r3, r3, r6
 8004f0e:	50a3      	str	r3, [r4, r2]
 8004f10:	e7ab      	b.n	8004e6a <_malloc_r+0x22>
 8004f12:	42a3      	cmp	r3, r4
 8004f14:	6862      	ldr	r2, [r4, #4]
 8004f16:	d1dd      	bne.n	8004ed4 <_malloc_r+0x8c>
 8004f18:	f8c8 2000 	str.w	r2, [r8]
 8004f1c:	e7ec      	b.n	8004ef8 <_malloc_r+0xb0>
 8004f1e:	4623      	mov	r3, r4
 8004f20:	6864      	ldr	r4, [r4, #4]
 8004f22:	e7ac      	b.n	8004e7e <_malloc_r+0x36>
 8004f24:	4634      	mov	r4, r6
 8004f26:	6876      	ldr	r6, [r6, #4]
 8004f28:	e7b4      	b.n	8004e94 <_malloc_r+0x4c>
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	e7cc      	b.n	8004ec8 <_malloc_r+0x80>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4638      	mov	r0, r7
 8004f34:	f000 f80e 	bl	8004f54 <__malloc_unlock>
 8004f38:	e797      	b.n	8004e6a <_malloc_r+0x22>
 8004f3a:	6025      	str	r5, [r4, #0]
 8004f3c:	e7dc      	b.n	8004ef8 <_malloc_r+0xb0>
 8004f3e:	605b      	str	r3, [r3, #4]
 8004f40:	deff      	udf	#255	; 0xff
 8004f42:	bf00      	nop
 8004f44:	20004b64 	.word	0x20004b64

08004f48 <__malloc_lock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__malloc_lock+0x8>)
 8004f4a:	f7ff bf00 	b.w	8004d4e <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	20004b60 	.word	0x20004b60

08004f54 <__malloc_unlock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__malloc_unlock+0x8>)
 8004f56:	f7ff befb 	b.w	8004d50 <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	20004b60 	.word	0x20004b60

08004f60 <__sflush_r>:
 8004f60:	898a      	ldrh	r2, [r1, #12]
 8004f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f66:	4605      	mov	r5, r0
 8004f68:	0710      	lsls	r0, r2, #28
 8004f6a:	460c      	mov	r4, r1
 8004f6c:	d458      	bmi.n	8005020 <__sflush_r+0xc0>
 8004f6e:	684b      	ldr	r3, [r1, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	dc05      	bgt.n	8004f80 <__sflush_r+0x20>
 8004f74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	dc02      	bgt.n	8004f80 <__sflush_r+0x20>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f82:	2e00      	cmp	r6, #0
 8004f84:	d0f9      	beq.n	8004f7a <__sflush_r+0x1a>
 8004f86:	2300      	movs	r3, #0
 8004f88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f8c:	682f      	ldr	r7, [r5, #0]
 8004f8e:	6a21      	ldr	r1, [r4, #32]
 8004f90:	602b      	str	r3, [r5, #0]
 8004f92:	d032      	beq.n	8004ffa <__sflush_r+0x9a>
 8004f94:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	075a      	lsls	r2, r3, #29
 8004f9a:	d505      	bpl.n	8004fa8 <__sflush_r+0x48>
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	1ac0      	subs	r0, r0, r3
 8004fa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fa2:	b10b      	cbz	r3, 8004fa8 <__sflush_r+0x48>
 8004fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fa6:	1ac0      	subs	r0, r0, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	4602      	mov	r2, r0
 8004fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fae:	6a21      	ldr	r1, [r4, #32]
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b0      	blx	r6
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	89a3      	ldrh	r3, [r4, #12]
 8004fb8:	d106      	bne.n	8004fc8 <__sflush_r+0x68>
 8004fba:	6829      	ldr	r1, [r5, #0]
 8004fbc:	291d      	cmp	r1, #29
 8004fbe:	d82b      	bhi.n	8005018 <__sflush_r+0xb8>
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <__sflush_r+0x108>)
 8004fc2:	410a      	asrs	r2, r1
 8004fc4:	07d6      	lsls	r6, r2, #31
 8004fc6:	d427      	bmi.n	8005018 <__sflush_r+0xb8>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	6062      	str	r2, [r4, #4]
 8004fcc:	04d9      	lsls	r1, r3, #19
 8004fce:	6922      	ldr	r2, [r4, #16]
 8004fd0:	6022      	str	r2, [r4, #0]
 8004fd2:	d504      	bpl.n	8004fde <__sflush_r+0x7e>
 8004fd4:	1c42      	adds	r2, r0, #1
 8004fd6:	d101      	bne.n	8004fdc <__sflush_r+0x7c>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	b903      	cbnz	r3, 8004fde <__sflush_r+0x7e>
 8004fdc:	6560      	str	r0, [r4, #84]	; 0x54
 8004fde:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fe0:	602f      	str	r7, [r5, #0]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d0c9      	beq.n	8004f7a <__sflush_r+0x1a>
 8004fe6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fea:	4299      	cmp	r1, r3
 8004fec:	d002      	beq.n	8004ff4 <__sflush_r+0x94>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	f7ff febe 	bl	8004d70 <_free_r>
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	6360      	str	r0, [r4, #52]	; 0x34
 8004ff8:	e7c0      	b.n	8004f7c <__sflush_r+0x1c>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b0      	blx	r6
 8005000:	1c41      	adds	r1, r0, #1
 8005002:	d1c8      	bne.n	8004f96 <__sflush_r+0x36>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0c5      	beq.n	8004f96 <__sflush_r+0x36>
 800500a:	2b1d      	cmp	r3, #29
 800500c:	d001      	beq.n	8005012 <__sflush_r+0xb2>
 800500e:	2b16      	cmp	r3, #22
 8005010:	d101      	bne.n	8005016 <__sflush_r+0xb6>
 8005012:	602f      	str	r7, [r5, #0]
 8005014:	e7b1      	b.n	8004f7a <__sflush_r+0x1a>
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501c:	81a3      	strh	r3, [r4, #12]
 800501e:	e7ad      	b.n	8004f7c <__sflush_r+0x1c>
 8005020:	690f      	ldr	r7, [r1, #16]
 8005022:	2f00      	cmp	r7, #0
 8005024:	d0a9      	beq.n	8004f7a <__sflush_r+0x1a>
 8005026:	0793      	lsls	r3, r2, #30
 8005028:	680e      	ldr	r6, [r1, #0]
 800502a:	bf08      	it	eq
 800502c:	694b      	ldreq	r3, [r1, #20]
 800502e:	600f      	str	r7, [r1, #0]
 8005030:	bf18      	it	ne
 8005032:	2300      	movne	r3, #0
 8005034:	eba6 0807 	sub.w	r8, r6, r7
 8005038:	608b      	str	r3, [r1, #8]
 800503a:	f1b8 0f00 	cmp.w	r8, #0
 800503e:	dd9c      	ble.n	8004f7a <__sflush_r+0x1a>
 8005040:	6a21      	ldr	r1, [r4, #32]
 8005042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005044:	4643      	mov	r3, r8
 8005046:	463a      	mov	r2, r7
 8005048:	4628      	mov	r0, r5
 800504a:	47b0      	blx	r6
 800504c:	2800      	cmp	r0, #0
 800504e:	dc06      	bgt.n	800505e <__sflush_r+0xfe>
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	f04f 30ff 	mov.w	r0, #4294967295
 800505c:	e78e      	b.n	8004f7c <__sflush_r+0x1c>
 800505e:	4407      	add	r7, r0
 8005060:	eba8 0800 	sub.w	r8, r8, r0
 8005064:	e7e9      	b.n	800503a <__sflush_r+0xda>
 8005066:	bf00      	nop
 8005068:	dfbffffe 	.word	0xdfbffffe

0800506c <_fflush_r>:
 800506c:	b538      	push	{r3, r4, r5, lr}
 800506e:	690b      	ldr	r3, [r1, #16]
 8005070:	4605      	mov	r5, r0
 8005072:	460c      	mov	r4, r1
 8005074:	b913      	cbnz	r3, 800507c <_fflush_r+0x10>
 8005076:	2500      	movs	r5, #0
 8005078:	4628      	mov	r0, r5
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	b118      	cbz	r0, 8005086 <_fflush_r+0x1a>
 800507e:	6a03      	ldr	r3, [r0, #32]
 8005080:	b90b      	cbnz	r3, 8005086 <_fflush_r+0x1a>
 8005082:	f7ff fc87 	bl	8004994 <__sinit>
 8005086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f3      	beq.n	8005076 <_fflush_r+0xa>
 800508e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005090:	07d0      	lsls	r0, r2, #31
 8005092:	d404      	bmi.n	800509e <_fflush_r+0x32>
 8005094:	0599      	lsls	r1, r3, #22
 8005096:	d402      	bmi.n	800509e <_fflush_r+0x32>
 8005098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800509a:	f7ff fe58 	bl	8004d4e <__retarget_lock_acquire_recursive>
 800509e:	4628      	mov	r0, r5
 80050a0:	4621      	mov	r1, r4
 80050a2:	f7ff ff5d 	bl	8004f60 <__sflush_r>
 80050a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050a8:	07da      	lsls	r2, r3, #31
 80050aa:	4605      	mov	r5, r0
 80050ac:	d4e4      	bmi.n	8005078 <_fflush_r+0xc>
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	059b      	lsls	r3, r3, #22
 80050b2:	d4e1      	bmi.n	8005078 <_fflush_r+0xc>
 80050b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050b6:	f7ff fe4b 	bl	8004d50 <__retarget_lock_release_recursive>
 80050ba:	e7dd      	b.n	8005078 <_fflush_r+0xc>

080050bc <__swhatbuf_r>:
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	460c      	mov	r4, r1
 80050c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c4:	2900      	cmp	r1, #0
 80050c6:	b096      	sub	sp, #88	; 0x58
 80050c8:	4615      	mov	r5, r2
 80050ca:	461e      	mov	r6, r3
 80050cc:	da0d      	bge.n	80050ea <__swhatbuf_r+0x2e>
 80050ce:	89a3      	ldrh	r3, [r4, #12]
 80050d0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80050d4:	f04f 0100 	mov.w	r1, #0
 80050d8:	bf0c      	ite	eq
 80050da:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80050de:	2340      	movne	r3, #64	; 0x40
 80050e0:	2000      	movs	r0, #0
 80050e2:	6031      	str	r1, [r6, #0]
 80050e4:	602b      	str	r3, [r5, #0]
 80050e6:	b016      	add	sp, #88	; 0x58
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	466a      	mov	r2, sp
 80050ec:	f000 f848 	bl	8005180 <_fstat_r>
 80050f0:	2800      	cmp	r0, #0
 80050f2:	dbec      	blt.n	80050ce <__swhatbuf_r+0x12>
 80050f4:	9901      	ldr	r1, [sp, #4]
 80050f6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80050fa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80050fe:	4259      	negs	r1, r3
 8005100:	4159      	adcs	r1, r3
 8005102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005106:	e7eb      	b.n	80050e0 <__swhatbuf_r+0x24>

08005108 <__smakebuf_r>:
 8005108:	898b      	ldrh	r3, [r1, #12]
 800510a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800510c:	079d      	lsls	r5, r3, #30
 800510e:	4606      	mov	r6, r0
 8005110:	460c      	mov	r4, r1
 8005112:	d507      	bpl.n	8005124 <__smakebuf_r+0x1c>
 8005114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	6123      	str	r3, [r4, #16]
 800511c:	2301      	movs	r3, #1
 800511e:	6163      	str	r3, [r4, #20]
 8005120:	b002      	add	sp, #8
 8005122:	bd70      	pop	{r4, r5, r6, pc}
 8005124:	ab01      	add	r3, sp, #4
 8005126:	466a      	mov	r2, sp
 8005128:	f7ff ffc8 	bl	80050bc <__swhatbuf_r>
 800512c:	9900      	ldr	r1, [sp, #0]
 800512e:	4605      	mov	r5, r0
 8005130:	4630      	mov	r0, r6
 8005132:	f7ff fe89 	bl	8004e48 <_malloc_r>
 8005136:	b948      	cbnz	r0, 800514c <__smakebuf_r+0x44>
 8005138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800513c:	059a      	lsls	r2, r3, #22
 800513e:	d4ef      	bmi.n	8005120 <__smakebuf_r+0x18>
 8005140:	f023 0303 	bic.w	r3, r3, #3
 8005144:	f043 0302 	orr.w	r3, r3, #2
 8005148:	81a3      	strh	r3, [r4, #12]
 800514a:	e7e3      	b.n	8005114 <__smakebuf_r+0xc>
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	9b00      	ldr	r3, [sp, #0]
 8005158:	6163      	str	r3, [r4, #20]
 800515a:	9b01      	ldr	r3, [sp, #4]
 800515c:	6120      	str	r0, [r4, #16]
 800515e:	b15b      	cbz	r3, 8005178 <__smakebuf_r+0x70>
 8005160:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005164:	4630      	mov	r0, r6
 8005166:	f000 f81d 	bl	80051a4 <_isatty_r>
 800516a:	b128      	cbz	r0, 8005178 <__smakebuf_r+0x70>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	81a3      	strh	r3, [r4, #12]
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	431d      	orrs	r5, r3
 800517c:	81a5      	strh	r5, [r4, #12]
 800517e:	e7cf      	b.n	8005120 <__smakebuf_r+0x18>

08005180 <_fstat_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d07      	ldr	r5, [pc, #28]	; (80051a0 <_fstat_r+0x20>)
 8005184:	2300      	movs	r3, #0
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	602b      	str	r3, [r5, #0]
 800518e:	f7fb fd22 	bl	8000bd6 <_fstat>
 8005192:	1c43      	adds	r3, r0, #1
 8005194:	d102      	bne.n	800519c <_fstat_r+0x1c>
 8005196:	682b      	ldr	r3, [r5, #0]
 8005198:	b103      	cbz	r3, 800519c <_fstat_r+0x1c>
 800519a:	6023      	str	r3, [r4, #0]
 800519c:	bd38      	pop	{r3, r4, r5, pc}
 800519e:	bf00      	nop
 80051a0:	20004b5c 	.word	0x20004b5c

080051a4 <_isatty_r>:
 80051a4:	b538      	push	{r3, r4, r5, lr}
 80051a6:	4d06      	ldr	r5, [pc, #24]	; (80051c0 <_isatty_r+0x1c>)
 80051a8:	2300      	movs	r3, #0
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	602b      	str	r3, [r5, #0]
 80051b0:	f7fb fd21 	bl	8000bf6 <_isatty>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d102      	bne.n	80051be <_isatty_r+0x1a>
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	b103      	cbz	r3, 80051be <_isatty_r+0x1a>
 80051bc:	6023      	str	r3, [r4, #0]
 80051be:	bd38      	pop	{r3, r4, r5, pc}
 80051c0:	20004b5c 	.word	0x20004b5c

080051c4 <_sbrk_r>:
 80051c4:	b538      	push	{r3, r4, r5, lr}
 80051c6:	4d06      	ldr	r5, [pc, #24]	; (80051e0 <_sbrk_r+0x1c>)
 80051c8:	2300      	movs	r3, #0
 80051ca:	4604      	mov	r4, r0
 80051cc:	4608      	mov	r0, r1
 80051ce:	602b      	str	r3, [r5, #0]
 80051d0:	f000 f808 	bl	80051e4 <_sbrk>
 80051d4:	1c43      	adds	r3, r0, #1
 80051d6:	d102      	bne.n	80051de <_sbrk_r+0x1a>
 80051d8:	682b      	ldr	r3, [r5, #0]
 80051da:	b103      	cbz	r3, 80051de <_sbrk_r+0x1a>
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	bd38      	pop	{r3, r4, r5, pc}
 80051e0:	20004b5c 	.word	0x20004b5c

080051e4 <_sbrk>:
 80051e4:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <_sbrk+0x14>)
 80051e6:	6811      	ldr	r1, [r2, #0]
 80051e8:	4603      	mov	r3, r0
 80051ea:	b909      	cbnz	r1, 80051f0 <_sbrk+0xc>
 80051ec:	4903      	ldr	r1, [pc, #12]	; (80051fc <_sbrk+0x18>)
 80051ee:	6011      	str	r1, [r2, #0]
 80051f0:	6810      	ldr	r0, [r2, #0]
 80051f2:	4403      	add	r3, r0
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4770      	bx	lr
 80051f8:	20004b6c 	.word	0x20004b6c
 80051fc:	20004b70 	.word	0x20004b70

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
