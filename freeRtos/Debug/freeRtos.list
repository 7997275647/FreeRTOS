
freeRtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000744c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007780  08007780  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08007780  08007780  00017780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007788  08007788  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007788  08007788  00017788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00006178  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200061d8  200061d8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018524  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000034fd  00000000  00000000  000385f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001640  00000000  00000000  0003baf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000111e  00000000  00000000  0003d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000042e8  00000000  00000000  0003e256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001821b  00000000  00000000  0004253e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d8f49  00000000  00000000  0005a759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006330  00000000  00000000  001336a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000a7  00000000  00000000  001399d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075c4 	.word	0x080075c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080075c4 	.word	0x080075c4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20004ab8 	.word	0x20004ab8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fb99 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f851 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8b9 	bl	8000790 <MX_GPIO_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  /* Enable CYCNT counter */
  DWT_CTRL |= (1<<0);
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <main+0x94>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a1f      	ldr	r2, [pc, #124]	; (80006a0 <main+0x94>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062a:	f004 fa9d 	bl	8004b68 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800062e:	f005 fde9 	bl	8006204 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(Task1_Handle, "Task-1", 200, "Hello World from Task-1",2, &task1_handle);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	2302      	movs	r3, #2
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <main+0x98>)
 800063e:	22c8      	movs	r2, #200	; 0xc8
 8000640:	4919      	ldr	r1, [pc, #100]	; (80006a8 <main+0x9c>)
 8000642:	481a      	ldr	r0, [pc, #104]	; (80006ac <main+0xa0>)
 8000644:	f002 fc3d 	bl	8002ec2 <xTaskCreate>
 8000648:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d00a      	beq.n	8000666 <main+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000654:	f383 8811 	msr	BASEPRI, r3
 8000658:	f3bf 8f6f 	isb	sy
 800065c:	f3bf 8f4f 	dsb	sy
 8000660:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000662:	bf00      	nop
 8000664:	e7fe      	b.n	8000664 <main+0x58>

  status = xTaskCreate(Task2_Handle, "Task-2", 200, "Hello World from Task-2",2, &task2_handle);
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	9301      	str	r3, [sp, #4]
 800066a:	2302      	movs	r3, #2
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <main+0xa4>)
 8000670:	22c8      	movs	r2, #200	; 0xc8
 8000672:	4910      	ldr	r1, [pc, #64]	; (80006b4 <main+0xa8>)
 8000674:	4810      	ldr	r0, [pc, #64]	; (80006b8 <main+0xac>)
 8000676:	f002 fc24 	bl	8002ec2 <xTaskCreate>
 800067a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d00a      	beq.n	8000698 <main+0x8c>
	__asm volatile
 8000682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000686:	f383 8811 	msr	BASEPRI, r3
 800068a:	f3bf 8f6f 	isb	sy
 800068e:	f3bf 8f4f 	dsb	sy
 8000692:	60fb      	str	r3, [r7, #12]
}
 8000694:	bf00      	nop
 8000696:	e7fe      	b.n	8000696 <main+0x8a>

  vTaskStartScheduler();
 8000698:	f002 fd66 	bl	8003168 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	e7fe      	b.n	800069c <main+0x90>
 800069e:	bf00      	nop
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	080075dc 	.word	0x080075dc
 80006a8:	080075f4 	.word	0x080075f4
 80006ac:	08000a4d 	.word	0x08000a4d
 80006b0:	080075fc 	.word	0x080075fc
 80006b4:	08007614 	.word	0x08007614
 80006b8:	08000a89 	.word	0x08000a89

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 faee 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <SystemClock_Config+0xcc>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a27      	ldr	r2, [pc, #156]	; (8000788 <SystemClock_Config+0xcc>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <SystemClock_Config+0xcc>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <SystemClock_Config+0xd0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a21      	ldr	r2, [pc, #132]	; (800078c <SystemClock_Config+0xd0>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <SystemClock_Config+0xd0>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000730:	2332      	movs	r3, #50	; 0x32
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000734:	2304      	movs	r3, #4
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000738:	2307      	movs	r3, #7
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fddb 	bl	80012fc <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074c:	f000 f9cc 	bl	8000ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2302      	movs	r3, #2
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800075c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000760:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000766:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f001 f83c 	bl	80017ec <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077a:	f000 f9b5 	bl	8000ae8 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08c      	sub	sp, #48	; 0x30
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	4ba2      	ldr	r3, [pc, #648]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4aa1      	ldr	r2, [pc, #644]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b9f      	ldr	r3, [pc, #636]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
 80007c6:	4b9b      	ldr	r3, [pc, #620]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a9a      	ldr	r2, [pc, #616]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b98      	ldr	r3, [pc, #608]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	4b94      	ldr	r3, [pc, #592]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a93      	ldr	r2, [pc, #588]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b91      	ldr	r3, [pc, #580]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b8d      	ldr	r3, [pc, #564]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a8c      	ldr	r2, [pc, #560]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b8a      	ldr	r3, [pc, #552]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b86      	ldr	r3, [pc, #536]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a85      	ldr	r2, [pc, #532]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b83      	ldr	r3, [pc, #524]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b7f      	ldr	r3, [pc, #508]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a7e      	ldr	r2, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <MX_GPIO_Init+0x2a4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2108      	movs	r1, #8
 8000852:	4879      	ldr	r0, [pc, #484]	; (8000a38 <MX_GPIO_Init+0x2a8>)
 8000854:	f000 fd38 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	2101      	movs	r1, #1
 800085c:	4877      	ldr	r0, [pc, #476]	; (8000a3c <MX_GPIO_Init+0x2ac>)
 800085e:	f000 fd33 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000862:	2200      	movs	r2, #0
 8000864:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000868:	4875      	ldr	r0, [pc, #468]	; (8000a40 <MX_GPIO_Init+0x2b0>)
 800086a:	f000 fd2d 	bl	80012c8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	486c      	ldr	r0, [pc, #432]	; (8000a38 <MX_GPIO_Init+0x2a8>)
 8000886:	f000 fb83 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088a:	2301      	movs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4866      	ldr	r0, [pc, #408]	; (8000a3c <MX_GPIO_Init+0x2ac>)
 80008a2:	f000 fb75 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008a6:	2308      	movs	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008b6:	2305      	movs	r3, #5
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	485e      	ldr	r0, [pc, #376]	; (8000a3c <MX_GPIO_Init+0x2ac>)
 80008c2:	f000 fb65 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	485a      	ldr	r0, [pc, #360]	; (8000a44 <MX_GPIO_Init+0x2b4>)
 80008dc:	f000 fb58 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e0:	2310      	movs	r3, #16
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f0:	2306      	movs	r3, #6
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4852      	ldr	r0, [pc, #328]	; (8000a44 <MX_GPIO_Init+0x2b4>)
 80008fc:	f000 fb48 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000900:	23e0      	movs	r3, #224	; 0xe0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000910:	2305      	movs	r3, #5
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	484a      	ldr	r0, [pc, #296]	; (8000a44 <MX_GPIO_Init+0x2b4>)
 800091c:	f000 fb38 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000920:	2304      	movs	r3, #4
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4845      	ldr	r0, [pc, #276]	; (8000a48 <MX_GPIO_Init+0x2b8>)
 8000934:	f000 fb2c 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483c      	ldr	r0, [pc, #240]	; (8000a48 <MX_GPIO_Init+0x2b8>)
 8000956:	f000 fb1b 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800095a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800095e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	2301      	movs	r3, #1
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	4833      	ldr	r0, [pc, #204]	; (8000a40 <MX_GPIO_Init+0x2b0>)
 8000974:	f000 fb0c 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000978:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098a:	2306      	movs	r3, #6
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x2ac>)
 8000996:	f000 fafb 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4825      	ldr	r0, [pc, #148]	; (8000a44 <MX_GPIO_Init+0x2b4>)
 80009b0:	f000 faee 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c6:	230a      	movs	r3, #10
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	; (8000a44 <MX_GPIO_Init+0x2b4>)
 80009d2:	f000 fadd 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4815      	ldr	r0, [pc, #84]	; (8000a40 <MX_GPIO_Init+0x2b0>)
 80009ea:	f000 fad1 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ee:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f4:	2312      	movs	r3, #18
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a00:	2304      	movs	r3, #4
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <MX_GPIO_Init+0x2b8>)
 8000a0c:	f000 fac0 	bl	8000f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0x2a8>)
 8000a26:	f000 fab3 	bl	8000f90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400

08000a4c <Task1_Handle>:

/* USER CODE BEGIN 4 */
static void Task1_Handle(void* parameters){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	; 0x70
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a54:	f107 000c 	add.w	r0, r7, #12
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a09      	ldr	r2, [pc, #36]	; (8000a80 <Task1_Handle+0x34>)
 8000a5c:	2164      	movs	r1, #100	; 0x64
 8000a5e:	f006 f8e1 	bl	8006c24 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 f86c 	bl	8006b44 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <Task1_Handle+0x38>)
 8000a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	f3bf 8f4f 	dsb	sy
 8000a78:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a7c:	e7ea      	b.n	8000a54 <Task1_Handle+0x8>
 8000a7e:	bf00      	nop
 8000a80:	0800761c 	.word	0x0800761c
 8000a84:	e000ed04 	.word	0xe000ed04

08000a88 <Task2_Handle>:
	}

}

static void Task2_Handle(void* parameters){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b09c      	sub	sp, #112	; 0x70
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
			//printf("%s\n", (char*)parameters);
			snprintf(msg,100,"%s\n", (char*)parameters);
 8000a90:	f107 000c 	add.w	r0, r7, #12
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <Task2_Handle+0x34>)
 8000a98:	2164      	movs	r1, #100	; 0x64
 8000a9a:	f006 f8c3 	bl	8006c24 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f006 f84e 	bl	8006b44 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <Task2_Handle+0x38>)
 8000aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	f3bf 8f4f 	dsb	sy
 8000ab4:	f3bf 8f6f 	isb	sy
			snprintf(msg,100,"%s\n", (char*)parameters);
 8000ab8:	e7ea      	b.n	8000a90 <Task2_Handle+0x8>
 8000aba:	bf00      	nop
 8000abc:	0800761c 	.word	0x0800761c
 8000ac0:	e000ed04 	.word	0xe000ed04

08000ac4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d101      	bne.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ad6:	f000 f959 	bl	8000d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40001000 	.word	0x40001000

08000ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <Error_Handler+0x8>
	...

08000af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f003 0307 	and.w	r3, r3, #7
 8000b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <__NVIC_SetPriorityGrouping+0x44>)
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	60d3      	str	r3, [r2, #12]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_MspInit+0x58>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_MspInit+0x58>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	; 0x44
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x58>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x58>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <HAL_MspInit+0x58>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x58>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	210f      	movs	r1, #15
 8000b7e:	f06f 0001 	mvn.w	r0, #1
 8000b82:	f000 f9db 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */
  //vInitPrioGroupValue();
  NVIC_SetPriorityGrouping( 0 );
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff ffb4 	bl	8000af4 <__NVIC_SetPriorityGrouping>

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4b33      	ldr	r3, [pc, #204]	; (8000c7c <HAL_InitTick+0xe4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_InitTick+0xe4>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb8:	4b30      	ldr	r3, [pc, #192]	; (8000c7c <HAL_InitTick+0xe4>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	f003 0310 	and.w	r3, r3, #16
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bc4:	f107 0210 	add.w	r2, r7, #16
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 f818 	bl	8001c04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d103      	bne.n	8000be6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bde:	f000 fffd 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 8000be2:	6378      	str	r0, [r7, #52]	; 0x34
 8000be4:	e004      	b.n	8000bf0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000be6:	f000 fff9 	bl	8001bdc <HAL_RCC_GetPCLK1Freq>
 8000bea:	4603      	mov	r3, r0
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bf2:	4a23      	ldr	r2, [pc, #140]	; (8000c80 <HAL_InitTick+0xe8>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	0c9b      	lsrs	r3, r3, #18
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <HAL_InitTick+0xec>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <HAL_InitTick+0xf0>)
 8000c02:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <HAL_InitTick+0xec>)
 8000c06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c0a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_InitTick+0xec>)
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <HAL_InitTick+0xec>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_InitTick+0xec>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_InitTick+0xec>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c24:	4817      	ldr	r0, [pc, #92]	; (8000c84 <HAL_InitTick+0xec>)
 8000c26:	f001 f81f 	bl	8001c68 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d11b      	bne.n	8000c70 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c38:	4812      	ldr	r0, [pc, #72]	; (8000c84 <HAL_InitTick+0xec>)
 8000c3a:	f001 f86f 	bl	8001d1c <HAL_TIM_Base_Start_IT>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d111      	bne.n	8000c70 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f000 f991 	bl	8000f74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d808      	bhi.n	8000c6a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2036      	movs	r0, #54	; 0x36
 8000c5e:	f000 f96d 	bl	8000f3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <HAL_InitTick+0xf4>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6013      	str	r3, [r2, #0]
 8000c68:	e002      	b.n	8000c70 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3738      	adds	r7, #56	; 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	431bde83 	.word	0x431bde83
 8000c84:	2000007c 	.word	0x2000007c
 8000c88:	40001000 	.word	0x40001000
 8000c8c:	20000004 	.word	0x20000004

08000c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c94:	e7fe      	b.n	8000c94 <NMI_Handler+0x4>

08000c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <BusFault_Handler+0x4>

08000ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <UsageFault_Handler+0x4>

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM6_DAC_IRQHandler+0x10>)
 8000cc2:	f001 f89b 	bl	8001dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000007c 	.word	0x2000007c

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cf8:	f7ff ffea 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480c      	ldr	r0, [pc, #48]	; (8000d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cfe:	490d      	ldr	r1, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d14:	4c0a      	ldr	r4, [pc, #40]	; (8000d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d22:	f005 ffcb 	bl	8006cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fc71 	bl	800060c <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d38:	08007790 	.word	0x08007790
  ldr r2, =_sbss
 8000d3c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d40:	200061d8 	.word	0x200061d8

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f8d8 	bl	8000f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	200f      	movs	r0, #15
 8000d78:	f7ff ff0e 	bl	8000b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fede 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008
 8000db0:	200000c4 	.word	0x200000c4

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200000c4 	.word	0x200000c4

08000dcc <__NVIC_SetPriorityGrouping>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff4c 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4e:	f7ff ff61 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff ffb1 	bl	8000ec0 <NVIC_EncodePriority>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff80 	bl	8000e6c <__NVIC_SetPriority>
}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff54 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e16b      	b.n	8001284 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fac:	2201      	movs	r2, #1
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 815a 	bne.w	800127e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d005      	beq.n	8000fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d130      	bne.n	8001044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	2203      	movs	r2, #3
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	68da      	ldr	r2, [r3, #12]
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 0201 	and.w	r2, r3, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	2b03      	cmp	r3, #3
 800104e:	d017      	beq.n	8001080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d123      	bne.n	80010d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	220f      	movs	r2, #15
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	08da      	lsrs	r2, r3, #3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	3208      	adds	r2, #8
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80b4 	beq.w	800127e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b60      	ldr	r3, [pc, #384]	; (800129c <HAL_GPIO_Init+0x30c>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a5f      	ldr	r2, [pc, #380]	; (800129c <HAL_GPIO_Init+0x30c>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b5d      	ldr	r3, [pc, #372]	; (800129c <HAL_GPIO_Init+0x30c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <HAL_GPIO_Init+0x310>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	; (80012a4 <HAL_GPIO_Init+0x314>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x226>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_GPIO_Init+0x318>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x222>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x31c>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x21e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_GPIO_Init+0x320>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x21a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4e      	ldr	r2, [pc, #312]	; (80012b4 <HAL_GPIO_Init+0x324>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x216>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4d      	ldr	r2, [pc, #308]	; (80012b8 <HAL_GPIO_Init+0x328>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x212>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4c      	ldr	r2, [pc, #304]	; (80012bc <HAL_GPIO_Init+0x32c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x20e>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4b      	ldr	r2, [pc, #300]	; (80012c0 <HAL_GPIO_Init+0x330>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x20a>
 8001196:	2307      	movs	r3, #7
 8001198:	e00e      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 800119a:	2308      	movs	r3, #8
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 800119e:	2306      	movs	r3, #6
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x228>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4935      	ldr	r1, [pc, #212]	; (80012a0 <HAL_GPIO_Init+0x310>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <HAL_GPIO_Init+0x334>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011fa:	4a32      	ldr	r2, [pc, #200]	; (80012c4 <HAL_GPIO_Init+0x334>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800122a:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_GPIO_Init+0x334>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <HAL_GPIO_Init+0x334>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001278:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <HAL_GPIO_Init+0x334>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f ae90 	bls.w	8000fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	40013800 	.word	0x40013800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40021400 	.word	0x40021400
 80012bc:	40021800 	.word	0x40021800
 80012c0:	40021c00 	.word	0x40021c00
 80012c4:	40013c00 	.word	0x40013c00

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	619a      	str	r2, [r3, #24]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e267      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d075      	beq.n	8001406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b04      	cmp	r3, #4
 8001324:	d00c      	beq.n	8001340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001326:	4b85      	ldr	r3, [pc, #532]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132e:	2b08      	cmp	r3, #8
 8001330:	d112      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001332:	4b82      	ldr	r3, [pc, #520]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800133e:	d10b      	bne.n	8001358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	4b7e      	ldr	r3, [pc, #504]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d05b      	beq.n	8001404 <HAL_RCC_OscConfig+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d157      	bne.n	8001404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e242      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d106      	bne.n	8001370 <HAL_RCC_OscConfig+0x74>
 8001362:	4b76      	ldr	r3, [pc, #472]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a75      	ldr	r2, [pc, #468]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e01d      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001378:	d10c      	bne.n	8001394 <HAL_RCC_OscConfig+0x98>
 800137a:	4b70      	ldr	r3, [pc, #448]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6f      	ldr	r2, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b6d      	ldr	r3, [pc, #436]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6c      	ldr	r2, [pc, #432]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800138c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0xb0>
 8001394:	4b69      	ldr	r3, [pc, #420]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a68      	ldr	r2, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800139a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b66      	ldr	r3, [pc, #408]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a65      	ldr	r2, [pc, #404]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fcfe 	bl	8000db4 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcfa 	bl	8000db4 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e207      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	4b5b      	ldr	r3, [pc, #364]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0f0      	beq.n	80013bc <HAL_RCC_OscConfig+0xc0>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013dc:	f7ff fcea 	bl	8000db4 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013e4:	f7ff fce6 	bl	8000db4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b64      	cmp	r3, #100	; 0x64
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e1f3      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	4b51      	ldr	r3, [pc, #324]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f0      	bne.n	80013e4 <HAL_RCC_OscConfig+0xe8>
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d063      	beq.n	80014da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d11c      	bne.n	8001464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d116      	bne.n	8001464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x152>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e1c7      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	4937      	ldr	r1, [pc, #220]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001462:	e03a      	b.n	80014da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d020      	beq.n	80014ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800146c:	4b34      	ldr	r3, [pc, #208]	; (8001540 <HAL_RCC_OscConfig+0x244>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001472:	f7ff fc9f 	bl	8000db4 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147a:	f7ff fc9b 	bl	8000db4 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e1a8      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4925      	ldr	r1, [pc, #148]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	600b      	str	r3, [r1, #0]
 80014ac:	e015      	b.n	80014da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_RCC_OscConfig+0x244>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fc7e 	bl	8000db4 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc7a 	bl	8000db4 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e187      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_RCC_OscConfig+0x240>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d036      	beq.n	8001554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d016      	beq.n	800151c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_RCC_OscConfig+0x248>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f4:	f7ff fc5e 	bl	8000db4 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc5a 	bl	8000db4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e167      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x240>)
 8001510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x200>
 800151a:	e01b      	b.n	8001554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <HAL_RCC_OscConfig+0x248>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fc47 	bl	8000db4 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001528:	e00e      	b.n	8001548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800152a:	f7ff fc43 	bl	8000db4 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d907      	bls.n	8001548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e150      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
 800153c:	40023800 	.word	0x40023800
 8001540:	42470000 	.word	0x42470000
 8001544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800154a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1ea      	bne.n	800152a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8097 	beq.w	8001690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b81      	ldr	r3, [pc, #516]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b7d      	ldr	r3, [pc, #500]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a7c      	ldr	r2, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800157c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b7a      	ldr	r3, [pc, #488]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001592:	4b77      	ldr	r3, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d118      	bne.n	80015d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159e:	4b74      	ldr	r3, [pc, #464]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a73      	ldr	r2, [pc, #460]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 80015a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fc03 	bl	8000db4 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b2:	f7ff fbff 	bl	8000db4 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e10c      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <HAL_RCC_OscConfig+0x474>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d106      	bne.n	80015e6 <HAL_RCC_OscConfig+0x2ea>
 80015d8:	4b64      	ldr	r3, [pc, #400]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a63      	ldr	r2, [pc, #396]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70
 80015e4:	e01c      	b.n	8001620 <HAL_RCC_OscConfig+0x324>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	d10c      	bne.n	8001608 <HAL_RCC_OscConfig+0x30c>
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a5b      	ldr	r2, [pc, #364]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
 8001606:	e00b      	b.n	8001620 <HAL_RCC_OscConfig+0x324>
 8001608:	4b58      	ldr	r3, [pc, #352]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800160a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160c:	4a57      	ldr	r2, [pc, #348]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800160e:	f023 0301 	bic.w	r3, r3, #1
 8001612:	6713      	str	r3, [r2, #112]	; 0x70
 8001614:	4b55      	ldr	r3, [pc, #340]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	4a54      	ldr	r2, [pc, #336]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800161a:	f023 0304 	bic.w	r3, r3, #4
 800161e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d015      	beq.n	8001654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fbc4 	bl	8000db4 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fbc0 	bl	8000db4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0cb      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0ee      	beq.n	8001630 <HAL_RCC_OscConfig+0x334>
 8001652:	e014      	b.n	800167e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fbae 	bl	8000db4 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165a:	e00a      	b.n	8001672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165c:	f7ff fbaa 	bl	8000db4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f241 3288 	movw	r2, #5000	; 0x1388
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e0b5      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ee      	bne.n	800165c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167e:	7dfb      	ldrb	r3, [r7, #23]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d105      	bne.n	8001690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001684:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a38      	ldr	r2, [pc, #224]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800168a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80a1 	beq.w	80017dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x470>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d05c      	beq.n	8001760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d141      	bne.n	8001732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <HAL_RCC_OscConfig+0x478>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb7e 	bl	8000db4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fb7a 	bl	8000db4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e087      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_RCC_OscConfig+0x470>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69da      	ldr	r2, [r3, #28]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	019b      	lsls	r3, r3, #6
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f0:	085b      	lsrs	r3, r3, #1
 80016f2:	3b01      	subs	r3, #1
 80016f4:	041b      	lsls	r3, r3, #16
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	061b      	lsls	r3, r3, #24
 80016fe:	491b      	ldr	r1, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001700:	4313      	orrs	r3, r2
 8001702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x478>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170a:	f7ff fb53 	bl	8000db4 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001712:	f7ff fb4f 	bl	8000db4 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e05c      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x416>
 8001730:	e054      	b.n	80017dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_RCC_OscConfig+0x478>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff fb3c 	bl	8000db4 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff fb38 	bl	8000db4 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e045      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <HAL_RCC_OscConfig+0x470>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x444>
 800175e:	e03d      	b.n	80017dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d107      	bne.n	8001778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e038      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000
 8001774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <HAL_RCC_OscConfig+0x4ec>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d028      	beq.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d121      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d11a      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017a8:	4013      	ands	r3, r2
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d111      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017be:	085b      	lsrs	r3, r3, #1
 80017c0:	3b01      	subs	r3, #1
 80017c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0cc      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b68      	ldr	r3, [pc, #416]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d90c      	bls.n	8001828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b65      	ldr	r3, [pc, #404]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0b8      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d020      	beq.n	8001876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	d005      	beq.n	800184c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001840:	4b59      	ldr	r3, [pc, #356]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	4a58      	ldr	r2, [pc, #352]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800184a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	d005      	beq.n	8001864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	494d      	ldr	r1, [pc, #308]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	4313      	orrs	r3, r2
 8001874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d044      	beq.n	800190c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800188a:	4b47      	ldr	r3, [pc, #284]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d119      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e07f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d003      	beq.n	80018aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d107      	bne.n	80018ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	4b3f      	ldr	r3, [pc, #252]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e067      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4934      	ldr	r1, [pc, #208]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018dc:	f7ff fa6a 	bl	8000db4 <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff fa66 	bl	8000db4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e04f      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800190c:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d20c      	bcs.n	8001934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001922:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e032      	b.n	800199a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0304 	and.w	r3, r3, #4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	4916      	ldr	r1, [pc, #88]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d009      	beq.n	8001972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001972:	f000 f821 	bl	80019b8 <HAL_RCC_GetSysClockFreq>
 8001976:	4602      	mov	r2, r0
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	091b      	lsrs	r3, r3, #4
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	5ccb      	ldrb	r3, [r1, r3]
 8001986:	fa22 f303 	lsr.w	r3, r2, r3
 800198a:	4a09      	ldr	r2, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff f900 	bl	8000b98 <HAL_InitTick>

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00
 80019a8:	40023800 	.word	0x40023800
 80019ac:	080076fc 	.word	0x080076fc
 80019b0:	20000000 	.word	0x20000000
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019bc:	b094      	sub	sp, #80	; 0x50
 80019be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	647b      	str	r3, [r7, #68]	; 0x44
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c8:	2300      	movs	r3, #0
 80019ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d0:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d00d      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x40>
 80019dc:	2b08      	cmp	r3, #8
 80019de:	f200 80e1 	bhi.w	8001ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <HAL_RCC_GetSysClockFreq+0x34>
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d003      	beq.n	80019f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019ea:	e0db      	b.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ec:	4b73      	ldr	r3, [pc, #460]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019f0:	e0db      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f6:	e0d8      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a02:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	2200      	movs	r2, #0
 8001a16:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
 8001a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a2a:	4622      	mov	r2, r4
 8001a2c:	462b      	mov	r3, r5
 8001a2e:	f04f 0000 	mov.w	r0, #0
 8001a32:	f04f 0100 	mov.w	r1, #0
 8001a36:	0159      	lsls	r1, r3, #5
 8001a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3c:	0150      	lsls	r0, r2, #5
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4621      	mov	r1, r4
 8001a44:	1a51      	subs	r1, r2, r1
 8001a46:	6139      	str	r1, [r7, #16]
 8001a48:	4629      	mov	r1, r5
 8001a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a5c:	4659      	mov	r1, fp
 8001a5e:	018b      	lsls	r3, r1, #6
 8001a60:	4651      	mov	r1, sl
 8001a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a66:	4651      	mov	r1, sl
 8001a68:	018a      	lsls	r2, r1, #6
 8001a6a:	4651      	mov	r1, sl
 8001a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8001a70:	4659      	mov	r1, fp
 8001a72:	eb63 0901 	sbc.w	r9, r3, r1
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	f04f 0300 	mov.w	r3, #0
 8001a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a8a:	4690      	mov	r8, r2
 8001a8c:	4699      	mov	r9, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	eb18 0303 	adds.w	r3, r8, r3
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	462b      	mov	r3, r5
 8001a98:	eb49 0303 	adc.w	r3, r9, r3
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aaa:	4629      	mov	r1, r5
 8001aac:	024b      	lsls	r3, r1, #9
 8001aae:	4621      	mov	r1, r4
 8001ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	024a      	lsls	r2, r1, #9
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	2200      	movs	r2, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac8:	f7fe fc22 	bl	8000310 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad4:	e058      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	4b38      	ldr	r3, [pc, #224]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	099b      	lsrs	r3, r3, #6
 8001adc:	2200      	movs	r2, #0
 8001ade:	4618      	mov	r0, r3
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ae6:	623b      	str	r3, [r7, #32]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001af0:	4642      	mov	r2, r8
 8001af2:	464b      	mov	r3, r9
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	f04f 0100 	mov.w	r1, #0
 8001afc:	0159      	lsls	r1, r3, #5
 8001afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b02:	0150      	lsls	r0, r2, #5
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4641      	mov	r1, r8
 8001b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b0e:	4649      	mov	r1, r9
 8001b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b28:	ebb2 040a 	subs.w	r4, r2, sl
 8001b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	00eb      	lsls	r3, r5, #3
 8001b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	4643      	mov	r3, r8
 8001b46:	18e3      	adds	r3, r4, r3
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	eb45 0303 	adc.w	r3, r5, r3
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b72:	2200      	movs	r2, #0
 8001b74:	61bb      	str	r3, [r7, #24]
 8001b76:	61fa      	str	r2, [r7, #28]
 8001b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b7c:	f7fe fbc8 	bl	8000310 <__aeabi_uldivmod>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4613      	mov	r3, r2
 8001b86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	0c1b      	lsrs	r3, r3, #16
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	3301      	adds	r3, #1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba2:	e002      	b.n	8001baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba4:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8001ba6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3750      	adds	r7, #80	; 0x50
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	00f42400 	.word	0x00f42400
 8001bc0:	007a1200 	.word	0x007a1200

08001bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	0a9b      	lsrs	r3, r3, #10
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	4903      	ldr	r1, [pc, #12]	; (8001c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf2:	5ccb      	ldrb	r3, [r1, r3]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	0800770c 	.word	0x0800770c

08001c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	220f      	movs	r2, #15
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0203 	and.w	r2, r3, #3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	08db      	lsrs	r3, r3, #3
 8001c3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCC_GetClockConfig+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0207 	and.w	r2, r3, #7
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e041      	b.n	8001cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f839 	bl	8001d06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 f9c0 	bl	800202c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d001      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e04e      	b.n	8001dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d022      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5e:	d01d      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d018      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_TIM_Base_Start_IT+0xd0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	; (8001df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	; (8001df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d111      	bne.n	8001dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d010      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbe:	e007      	b.n	8001dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40000800 	.word	0x40000800
 8001dec:	40000c00 	.word	0x40000c00
 8001df0:	40010400 	.word	0x40010400
 8001df4:	40014000 	.word	0x40014000
 8001df8:	40001800 	.word	0x40001800

08001dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d020      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0202 	mvn.w	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8d2 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8c4 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8d5 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0204 	mvn.w	r2, #4
 8001e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8ac 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f89e 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8af 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0208 	mvn.w	r2, #8
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f886 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f878 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f889 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d020      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0210 	mvn.w	r2, #16
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f860 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f852 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f863 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0201 	mvn.w	r2, #1
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fdae 	bl	8000ac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f906 	bl	8002198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f834 	bl	8002018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0220 	mvn.w	r2, #32
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8d8 	bl	8002184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a46      	ldr	r2, [pc, #280]	; (8002158 <TIM_Base_SetConfig+0x12c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204a:	d00f      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a43      	ldr	r2, [pc, #268]	; (800215c <TIM_Base_SetConfig+0x130>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00b      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a42      	ldr	r2, [pc, #264]	; (8002160 <TIM_Base_SetConfig+0x134>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a41      	ldr	r2, [pc, #260]	; (8002164 <TIM_Base_SetConfig+0x138>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a40      	ldr	r2, [pc, #256]	; (8002168 <TIM_Base_SetConfig+0x13c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a35      	ldr	r2, [pc, #212]	; (8002158 <TIM_Base_SetConfig+0x12c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02b      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d027      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a32      	ldr	r2, [pc, #200]	; (800215c <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d023      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a31      	ldr	r2, [pc, #196]	; (8002160 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a30      	ldr	r2, [pc, #192]	; (8002164 <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01b      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2f      	ldr	r2, [pc, #188]	; (8002168 <TIM_Base_SetConfig+0x13c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d017      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2e      	ldr	r2, [pc, #184]	; (800216c <TIM_Base_SetConfig+0x140>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <TIM_Base_SetConfig+0x144>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2c      	ldr	r2, [pc, #176]	; (8002174 <TIM_Base_SetConfig+0x148>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <TIM_Base_SetConfig+0x14c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2a      	ldr	r2, [pc, #168]	; (800217c <TIM_Base_SetConfig+0x150>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a29      	ldr	r2, [pc, #164]	; (8002180 <TIM_Base_SetConfig+0x154>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a10      	ldr	r2, [pc, #64]	; (8002158 <TIM_Base_SetConfig+0x12c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_Base_SetConfig+0xf8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a12      	ldr	r2, [pc, #72]	; (8002168 <TIM_Base_SetConfig+0x13c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d103      	bne.n	800212c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f023 0201 	bic.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
  }
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40010400 	.word	0x40010400
 800216c:	40014000 	.word	0x40014000
 8002170:	40014400 	.word	0x40014400
 8002174:	40014800 	.word	0x40014800
 8002178:	40001800 	.word	0x40001800
 800217c:	40001c00 	.word	0x40001c00
 8002180:	40002000 	.word	0x40002000

08002184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Handler+0x1c>)
 80021b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80021b4:	f001 fc5e 	bl	8003a74 <xTaskGetSchedulerState>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d001      	beq.n	80021c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80021be:	f002 fa4b 	bl	8004658 <xPortSysTickHandler>
  }
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80021dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <vApplicationGetIdleTaskMemory+0x30>)
 80021e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	601a      	str	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200000c8 	.word	0x200000c8
 80021fc:	20000124 	.word	0x20000124

08002200 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <vApplicationGetTimerTaskMemory+0x2c>)
 8002210:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <vApplicationGetTimerTaskMemory+0x30>)
 8002216:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221e:	601a      	str	r2, [r3, #0]
}
 8002220:	bf00      	nop
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	20000324 	.word	0x20000324
 8002230:	20000380 	.word	0x20000380

08002234 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f103 0208 	add.w	r2, r3, #8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f04f 32ff 	mov.w	r2, #4294967295
 800224c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f103 0208 	add.w	r2, r3, #8
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f103 0208 	add.w	r2, r3, #8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022d6:	b480      	push	{r7}
 80022d8:	b085      	sub	sp, #20
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
 80022de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d103      	bne.n	80022f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e00c      	b.n	8002310 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3308      	adds	r3, #8
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	e002      	b.n	8002304 <vListInsert+0x2e>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	429a      	cmp	r2, r3
 800230e:	d2f6      	bcs.n	80022fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6852      	ldr	r2, [r2, #4]
 8002368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d103      	bne.n	800237c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	1e5a      	subs	r2, r3, #1
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10a      	bne.n	80023c6 <xQueueGenericReset+0x2a>
	__asm volatile
 80023b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b4:	f383 8811 	msr	BASEPRI, r3
 80023b8:	f3bf 8f6f 	isb	sy
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	60bb      	str	r3, [r7, #8]
}
 80023c2:	bf00      	nop
 80023c4:	e7fe      	b.n	80023c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023c6:	f002 f8b5 	bl	8004534 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	68f9      	ldr	r1, [r7, #12]
 80023d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	3b01      	subs	r3, #1
 80023f8:	68f9      	ldr	r1, [r7, #12]
 80023fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023fc:	fb01 f303 	mul.w	r3, r1, r3
 8002400:	441a      	add	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	22ff      	movs	r2, #255	; 0xff
 800240a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	22ff      	movs	r2, #255	; 0xff
 8002412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d109      	bne.n	8002430 <xQueueGenericReset+0x94>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00f      	beq.n	8002444 <xQueueGenericReset+0xa8>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3310      	adds	r3, #16
 8002428:	4618      	mov	r0, r3
 800242a:	f001 f92f 	bl	800368c <xTaskRemoveFromEventList>
 800242e:	e009      	b.n	8002444 <xQueueGenericReset+0xa8>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3310      	adds	r3, #16
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fefd 	bl	8002234 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	3324      	adds	r3, #36	; 0x24
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fef8 	bl	8002234 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002444:	f002 f8a6 	bl	8004594 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08e      	sub	sp, #56	; 0x38
 8002456:	af02      	add	r7, sp, #8
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10a      	bne.n	8002498 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	f383 8811 	msr	BASEPRI, r3
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	f3bf 8f4f 	dsb	sy
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002494:	bf00      	nop
 8002496:	e7fe      	b.n	8002496 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <xQueueGenericCreateStatic+0x52>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <xQueueGenericCreateStatic+0x56>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <xQueueGenericCreateStatic+0x58>
 80024a8:	2300      	movs	r3, #0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10a      	bne.n	80024c4 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b2:	f383 8811 	msr	BASEPRI, r3
 80024b6:	f3bf 8f6f 	isb	sy
 80024ba:	f3bf 8f4f 	dsb	sy
 80024be:	623b      	str	r3, [r7, #32]
}
 80024c0:	bf00      	nop
 80024c2:	e7fe      	b.n	80024c2 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <xQueueGenericCreateStatic+0x7e>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <xQueueGenericCreateStatic+0x82>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <xQueueGenericCreateStatic+0x84>
 80024d4:	2300      	movs	r3, #0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10a      	bne.n	80024f0 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	61fb      	str	r3, [r7, #28]
}
 80024ec:	bf00      	nop
 80024ee:	e7fe      	b.n	80024ee <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024f0:	2350      	movs	r3, #80	; 0x50
 80024f2:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b50      	cmp	r3, #80	; 0x50
 80024f8:	d00a      	beq.n	8002510 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80024fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024fe:	f383 8811 	msr	BASEPRI, r3
 8002502:	f3bf 8f6f 	isb	sy
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	61bb      	str	r3, [r7, #24]
}
 800250c:	bf00      	nop
 800250e:	e7fe      	b.n	800250e <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002510:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002524:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4613      	mov	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f805 	bl	8002542 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800253a:	4618      	mov	r0, r3
 800253c:	3730      	adds	r7, #48	; 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e002      	b.n	8002564 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002570:	2101      	movs	r1, #1
 8002572:	69b8      	ldr	r0, [r7, #24]
 8002574:	f7ff ff12 	bl	800239c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	68f9      	ldr	r1, [r7, #12]
 8002586:	2073      	movs	r0, #115	; 0x73
 8002588:	f003 fd34 	bl	8005ff4 <SEGGER_SYSVIEW_RecordU32x3>
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b090      	sub	sp, #64	; 0x40
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10a      	bne.n	80025c6 <xQueueGenericSend+0x32>
	__asm volatile
 80025b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b4:	f383 8811 	msr	BASEPRI, r3
 80025b8:	f3bf 8f6f 	isb	sy
 80025bc:	f3bf 8f4f 	dsb	sy
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025c2:	bf00      	nop
 80025c4:	e7fe      	b.n	80025c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d103      	bne.n	80025d4 <xQueueGenericSend+0x40>
 80025cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <xQueueGenericSend+0x44>
 80025d4:	2301      	movs	r3, #1
 80025d6:	e000      	b.n	80025da <xQueueGenericSend+0x46>
 80025d8:	2300      	movs	r3, #0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <xQueueGenericSend+0x60>
	__asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025f0:	bf00      	nop
 80025f2:	e7fe      	b.n	80025f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d103      	bne.n	8002602 <xQueueGenericSend+0x6e>
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <xQueueGenericSend+0x72>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <xQueueGenericSend+0x74>
 8002606:	2300      	movs	r3, #0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <xQueueGenericSend+0x8e>
	__asm volatile
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	623b      	str	r3, [r7, #32]
}
 800261e:	bf00      	nop
 8002620:	e7fe      	b.n	8002620 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002622:	f001 fa27 	bl	8003a74 <xTaskGetSchedulerState>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <xQueueGenericSend+0x9e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <xQueueGenericSend+0xa2>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSend+0xa4>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <xQueueGenericSend+0xbe>
	__asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	61fb      	str	r3, [r7, #28]
}
 800264e:	bf00      	nop
 8002650:	e7fe      	b.n	8002650 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002652:	f001 ff6f 	bl	8004534 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	429a      	cmp	r2, r3
 8002660:	d302      	bcc.n	8002668 <xQueueGenericSend+0xd4>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d11f      	bne.n	80026a8 <xQueueGenericSend+0x114>
			{
				traceQUEUE_SEND( pxQueue );
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	4618      	mov	r0, r3
 800266c:	f004 f974 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	9300      	str	r3, [sp, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	4601      	mov	r1, r0
 800267c:	205a      	movs	r0, #90	; 0x5a
 800267e:	f003 fd2f 	bl	80060e0 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002688:	f000 fa48 	bl	8002b1c <prvCopyDataToQueue>
 800268c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <xQueueGenericSend+0x10c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	3324      	adds	r3, #36	; 0x24
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fff6 	bl	800368c <xTaskRemoveFromEventList>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026a0:	f001 ff78 	bl	8004594 <vPortExitCritical>
				return pdPASS;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e07d      	b.n	80027a4 <xQueueGenericSend+0x210>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d110      	bne.n	80026d0 <xQueueGenericSend+0x13c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026ae:	f001 ff71 	bl	8004594 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80026b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b4:	4618      	mov	r0, r3
 80026b6:	f004 f94f 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	460b      	mov	r3, r1
 80026c4:	4601      	mov	r1, r0
 80026c6:	205a      	movs	r0, #90	; 0x5a
 80026c8:	f003 fd0a 	bl	80060e0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e069      	b.n	80027a4 <xQueueGenericSend+0x210>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <xQueueGenericSend+0x150>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 f83e 	bl	800375c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026e0:	2301      	movs	r3, #1
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026e4:	f001 ff56 	bl	8004594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026e8:	f000 fdb4 	bl	8003254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026ec:	f001 ff22 	bl	8004534 <vPortEnterCritical>
 80026f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026f6:	b25b      	sxtb	r3, r3
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d103      	bne.n	8002706 <xQueueGenericSend+0x172>
 80026fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800270c:	b25b      	sxtb	r3, r3
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002712:	d103      	bne.n	800271c <xQueueGenericSend+0x188>
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800271c:	f001 ff3a 	bl	8004594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f001 f82d 	bl	8003788 <xTaskCheckForTimeOut>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d124      	bne.n	800277e <xQueueGenericSend+0x1ea>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002736:	f000 fae9 	bl	8002d0c <prvIsQueueFull>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <xQueueGenericSend+0x1de>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	3310      	adds	r3, #16
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f000 ff4d 	bl	80035e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800274e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002750:	f000 fa74 	bl	8002c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002754:	f000 fd8c 	bl	8003270 <xTaskResumeAll>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f47f af79 	bne.w	8002652 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002760:	4b12      	ldr	r3, [pc, #72]	; (80027ac <xQueueGenericSend+0x218>)
 8002762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	e76f      	b.n	8002652 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002772:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002774:	f000 fa62 	bl	8002c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002778:	f000 fd7a 	bl	8003270 <xTaskResumeAll>
 800277c:	e769      	b.n	8002652 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800277e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002780:	f000 fa5c 	bl	8002c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002784:	f000 fd74 	bl	8003270 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	4618      	mov	r0, r3
 800278c:	f004 f8e4 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	460b      	mov	r3, r1
 800279a:	4601      	mov	r1, r0
 800279c:	205a      	movs	r0, #90	; 0x5a
 800279e:	f003 fc9f 	bl	80060e0 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80027a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3738      	adds	r7, #56	; 0x38
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	e000ed04 	.word	0xe000ed04

080027b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b090      	sub	sp, #64	; 0x40
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027da:	bf00      	nop
 80027dc:	e7fe      	b.n	80027dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d103      	bne.n	80027ec <xQueueGenericSendFromISR+0x3c>
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <xQueueGenericSendFromISR+0x40>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <xQueueGenericSendFromISR+0x42>
 80027f0:	2300      	movs	r3, #0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fa:	f383 8811 	msr	BASEPRI, r3
 80027fe:	f3bf 8f6f 	isb	sy
 8002802:	f3bf 8f4f 	dsb	sy
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002808:	bf00      	nop
 800280a:	e7fe      	b.n	800280a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d103      	bne.n	800281a <xQueueGenericSendFromISR+0x6a>
 8002812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <xQueueGenericSendFromISR+0x6e>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <xQueueGenericSendFromISR+0x70>
 800281e:	2300      	movs	r3, #0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	623b      	str	r3, [r7, #32]
}
 8002836:	bf00      	nop
 8002838:	e7fe      	b.n	8002838 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800283a:	f001 ff5d 	bl	80046f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800283e:	f3ef 8211 	mrs	r2, BASEPRI
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	61fa      	str	r2, [r7, #28]
 8002854:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002856:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800285a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800285c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800285e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <xQueueGenericSendFromISR+0xbc>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d139      	bne.n	80028e0 <xQueueGenericSendFromISR+0x130>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 800287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800287e:	4618      	mov	r0, r3
 8002880:	f004 f86a 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002884:	4601      	mov	r1, r0
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	461a      	mov	r2, r3
 800288a:	2060      	movs	r0, #96	; 0x60
 800288c:	f003 fb58 	bl	8005f40 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	68b9      	ldr	r1, [r7, #8]
 8002894:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002896:	f000 f941 	bl	8002b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800289a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a2:	d112      	bne.n	80028ca <xQueueGenericSendFromISR+0x11a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d016      	beq.n	80028da <xQueueGenericSendFromISR+0x12a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ae:	3324      	adds	r3, #36	; 0x24
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 feeb 	bl	800368c <xTaskRemoveFromEventList>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <xQueueGenericSendFromISR+0x12a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <xQueueGenericSendFromISR+0x12a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2201      	movs	r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e007      	b.n	80028da <xQueueGenericSendFromISR+0x12a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80028ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80028ce:	3301      	adds	r3, #1
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	b25a      	sxtb	r2, r3
 80028d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028da:	2301      	movs	r3, #1
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80028de:	e00b      	b.n	80028f8 <xQueueGenericSendFromISR+0x148>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80028e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e2:	4618      	mov	r0, r3
 80028e4:	f004 f838 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 80028e8:	4601      	mov	r1, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	461a      	mov	r2, r3
 80028ee:	2060      	movs	r0, #96	; 0x60
 80028f0:	f003 fb26 	bl	8005f40 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002902:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002906:	4618      	mov	r0, r3
 8002908:	3740      	adds	r7, #64	; 0x40
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b08f      	sub	sp, #60	; 0x3c
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <xQueueReceive+0x30>
	__asm volatile
 800292a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292e:	f383 8811 	msr	BASEPRI, r3
 8002932:	f3bf 8f6f 	isb	sy
 8002936:	f3bf 8f4f 	dsb	sy
 800293a:	623b      	str	r3, [r7, #32]
}
 800293c:	bf00      	nop
 800293e:	e7fe      	b.n	800293e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <xQueueReceive+0x3e>
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <xQueueReceive+0x42>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <xQueueReceive+0x44>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <xQueueReceive+0x5e>
	__asm volatile
 8002958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295c:	f383 8811 	msr	BASEPRI, r3
 8002960:	f3bf 8f6f 	isb	sy
 8002964:	f3bf 8f4f 	dsb	sy
 8002968:	61fb      	str	r3, [r7, #28]
}
 800296a:	bf00      	nop
 800296c:	e7fe      	b.n	800296c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800296e:	f001 f881 	bl	8003a74 <xTaskGetSchedulerState>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d102      	bne.n	800297e <xQueueReceive+0x6e>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueReceive+0x72>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueReceive+0x74>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <xQueueReceive+0x8e>
	__asm volatile
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	61bb      	str	r3, [r7, #24]
}
 800299a:	bf00      	nop
 800299c:	e7fe      	b.n	800299c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800299e:	f001 fdc9 	bl	8004534 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d024      	beq.n	80029f8 <xQueueReceive+0xe8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029b2:	f000 f91d 	bl	8002bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80029b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 ffcd 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 80029be:	4604      	mov	r4, r0
 80029c0:	2000      	movs	r0, #0
 80029c2:	f003 ffc9 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2101      	movs	r1, #1
 80029cc:	9100      	str	r1, [sp, #0]
 80029ce:	4621      	mov	r1, r4
 80029d0:	205c      	movs	r0, #92	; 0x5c
 80029d2:	f003 fb85 	bl	80060e0 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1e5a      	subs	r2, r3, #1
 80029da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <xQueueReceive+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	3310      	adds	r3, #16
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fe4e 	bl	800368c <xTaskRemoveFromEventList>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80029f0:	f001 fdd0 	bl	8004594 <vPortExitCritical>
				return pdPASS;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e08a      	b.n	8002b0e <xQueueReceive+0x1fe>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d113      	bne.n	8002a26 <xQueueReceive+0x116>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029fe:	f001 fdc9 	bl	8004594 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 ffa7 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f003 ffa3 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2101      	movs	r1, #1
 8002a18:	9100      	str	r1, [sp, #0]
 8002a1a:	4621      	mov	r1, r4
 8002a1c:	205c      	movs	r0, #92	; 0x5c
 8002a1e:	f003 fb5f 	bl	80060e0 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e073      	b.n	8002b0e <xQueueReceive+0x1fe>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <xQueueReceive+0x12a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a2c:	f107 0310 	add.w	r3, r7, #16
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fe93 	bl	800375c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a3a:	f001 fdab 	bl	8004594 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a3e:	f000 fc09 	bl	8003254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a42:	f001 fd77 	bl	8004534 <vPortEnterCritical>
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d103      	bne.n	8002a5c <xQueueReceive+0x14c>
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d103      	bne.n	8002a72 <xQueueReceive+0x162>
 8002a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a72:	f001 fd8f 	bl	8004594 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a76:	1d3a      	adds	r2, r7, #4
 8002a78:	f107 0310 	add.w	r3, r7, #16
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fe82 	bl	8003788 <xTaskCheckForTimeOut>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d124      	bne.n	8002ad4 <xQueueReceive+0x1c4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a8c:	f000 f928 	bl	8002ce0 <prvIsQueueEmpty>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d018      	beq.n	8002ac8 <xQueueReceive+0x1b8>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 fda2 	bl	80035e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aa6:	f000 f8c9 	bl	8002c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002aaa:	f000 fbe1 	bl	8003270 <xTaskResumeAll>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f47f af74 	bne.w	800299e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <xQueueReceive+0x208>)
 8002ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	e76a      	b.n	800299e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ac8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aca:	f000 f8b7 	bl	8002c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ace:	f000 fbcf 	bl	8003270 <xTaskResumeAll>
 8002ad2:	e764      	b.n	800299e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ad6:	f000 f8b1 	bl	8002c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ada:	f000 fbc9 	bl	8003270 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ade:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae0:	f000 f8fe 	bl	8002ce0 <prvIsQueueEmpty>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f43f af59 	beq.w	800299e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 ff32 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002af4:	4604      	mov	r4, r0
 8002af6:	2000      	movs	r0, #0
 8002af8:	f003 ff2e 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2101      	movs	r1, #1
 8002b02:	9100      	str	r1, [sp, #0]
 8002b04:	4621      	mov	r1, r4
 8002b06:	205c      	movs	r0, #92	; 0x5c
 8002b08:	f003 faea 	bl	80060e0 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3734      	adds	r7, #52	; 0x34
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000ed04 	.word	0xe000ed04

08002b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d14d      	bne.n	8002bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 ffb2 	bl	8003ab0 <xTaskPriorityDisinherit>
 8002b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	e043      	b.n	8002bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d119      	bne.n	8002b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6858      	ldr	r0, [r3, #4]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	461a      	mov	r2, r3
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	f004 f8ce 	bl	8006d08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b74:	441a      	add	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d32b      	bcc.n	8002bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	e026      	b.n	8002bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68d8      	ldr	r0, [r3, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	f004 f8b4 	bl	8006d08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	425b      	negs	r3, r3
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d207      	bcs.n	8002bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	425b      	negs	r3, r3
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d105      	bne.n	8002bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002be6:	697b      	ldr	r3, [r7, #20]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d018      	beq.n	8002c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d303      	bcc.n	8002c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68d9      	ldr	r1, [r3, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	f004 f86a 	bl	8006d08 <memcpy>
	}
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002c44:	f001 fc76 	bl	8004534 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c50:	e011      	b.n	8002c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3324      	adds	r3, #36	; 0x24
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fd14 	bl	800368c <xTaskRemoveFromEventList>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002c6a:	f000 fdef 	bl	800384c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	dce9      	bgt.n	8002c52 <prvUnlockQueue+0x16>
 8002c7e:	e000      	b.n	8002c82 <prvUnlockQueue+0x46>
					break;
 8002c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	22ff      	movs	r2, #255	; 0xff
 8002c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002c8a:	f001 fc83 	bl	8004594 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002c8e:	f001 fc51 	bl	8004534 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c9a:	e011      	b.n	8002cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d012      	beq.n	8002cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3310      	adds	r3, #16
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fcef 	bl	800368c <xTaskRemoveFromEventList>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002cb4:	f000 fdca 	bl	800384c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002cb8:	7bbb      	ldrb	r3, [r7, #14]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	dce9      	bgt.n	8002c9c <prvUnlockQueue+0x60>
 8002cc8:	e000      	b.n	8002ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	22ff      	movs	r2, #255	; 0xff
 8002cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002cd4:	f001 fc5e 	bl	8004594 <vPortExitCritical>
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ce8:	f001 fc24 	bl	8004534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e001      	b.n	8002cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002cfe:	f001 fc49 	bl	8004594 <vPortExitCritical>

	return xReturn;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d14:	f001 fc0e 	bl	8004534 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d102      	bne.n	8002d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002d24:	2301      	movs	r3, #1
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e001      	b.n	8002d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002d2e:	f001 fc31 	bl	8004594 <vPortExitCritical>

	return xReturn;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d46:	2300      	movs	r3, #0
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e01e      	b.n	8002d8a <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <vQueueAddToRegistry+0x60>)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d115      	bne.n	8002d84 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002d58:	4910      	ldr	r1, [pc, #64]	; (8002d9c <vQueueAddToRegistry+0x60>)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002d62:	4a0e      	ldr	r2, [pc, #56]	; (8002d9c <vQueueAddToRegistry+0x60>)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f003 fdf1 	bl	8006958 <SEGGER_SYSVIEW_ShrinkId>
 8002d76:	4601      	mov	r1, r0
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2071      	movs	r0, #113	; 0x71
 8002d7e:	f003 f8df 	bl	8005f40 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 8002d82:	e006      	b.n	8002d92 <vQueueAddToRegistry+0x56>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b07      	cmp	r3, #7
 8002d8e:	d9dd      	bls.n	8002d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000780 	.word	0x20000780

08002da0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002db0:	f001 fbc0 	bl	8004534 <vPortEnterCritical>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dba:	b25b      	sxtb	r3, r3
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d103      	bne.n	8002dca <vQueueWaitForMessageRestricted+0x2a>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd0:	b25b      	sxtb	r3, r3
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d103      	bne.n	8002de0 <vQueueWaitForMessageRestricted+0x40>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de0:	f001 fbd8 	bl	8004594 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3324      	adds	r3, #36	; 0x24
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fc1b 	bl	8003630 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002dfa:	6978      	ldr	r0, [r7, #20]
 8002dfc:	f7ff ff1e 	bl	8002c3c <prvUnlockQueue>
	}
 8002e00:	bf00      	nop
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af04      	add	r7, sp, #16
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10a      	bne.n	8002e32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e20:	f383 8811 	msr	BASEPRI, r3
 8002e24:	f3bf 8f6f 	isb	sy
 8002e28:	f3bf 8f4f 	dsb	sy
 8002e2c:	623b      	str	r3, [r7, #32]
}
 8002e2e:	bf00      	nop
 8002e30:	e7fe      	b.n	8002e30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xTaskCreateStatic+0x46>
	__asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61fb      	str	r3, [r7, #28]
}
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e4e:	235c      	movs	r3, #92	; 0x5c
 8002e50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	2b5c      	cmp	r3, #92	; 0x5c
 8002e56:	d00a      	beq.n	8002e6e <xTaskCreateStatic+0x66>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	61bb      	str	r3, [r7, #24]
}
 8002e6a:	bf00      	nop
 8002e6c:	e7fe      	b.n	8002e6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01e      	beq.n	8002eb4 <xTaskCreateStatic+0xac>
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d01b      	beq.n	8002eb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2202      	movs	r2, #2
 8002e8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9303      	str	r3, [sp, #12]
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	9302      	str	r3, [sp, #8]
 8002e96:	f107 0314 	add.w	r3, r7, #20
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f850 	bl	8002f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002eac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eae:	f000 f8dd 	bl	800306c <prvAddNewTaskToReadyList>
 8002eb2:	e001      	b.n	8002eb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002eb8:	697b      	ldr	r3, [r7, #20]
	}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b08c      	sub	sp, #48	; 0x30
 8002ec6:	af04      	add	r7, sp, #16
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fc4e 	bl	8004778 <pvPortMalloc>
 8002edc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002ee4:	205c      	movs	r0, #92	; 0x5c
 8002ee6:	f001 fc47 	bl	8004778 <pvPortMalloc>
 8002eea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ef8:	e005      	b.n	8002f06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f001 fd08 	bl	8004910 <vPortFree>
 8002f00:	e001      	b.n	8002f06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9303      	str	r3, [sp, #12]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	9302      	str	r3, [sp, #8]
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	9301      	str	r3, [sp, #4]
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68b9      	ldr	r1, [r7, #8]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f80e 	bl	8002f4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f30:	69f8      	ldr	r0, [r7, #28]
 8002f32:	f000 f89b 	bl	800306c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f36:	2301      	movs	r3, #1
 8002f38:	61bb      	str	r3, [r7, #24]
 8002f3a:	e002      	b.n	8002f42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f42:	69bb      	ldr	r3, [r7, #24]
	}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3720      	adds	r7, #32
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	461a      	mov	r2, r3
 8002f64:	21a5      	movs	r1, #165	; 0xa5
 8002f66:	f003 fea1 	bl	8006cac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002f74:	3b01      	subs	r3, #1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	f383 8811 	msr	BASEPRI, r3
 8002f96:	f3bf 8f6f 	isb	sy
 8002f9a:	f3bf 8f4f 	dsb	sy
 8002f9e:	617b      	str	r3, [r7, #20]
}
 8002fa0:	bf00      	nop
 8002fa2:	e7fe      	b.n	8002fa2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01f      	beq.n	8002fea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	e012      	b.n	8002fd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	7819      	ldrb	r1, [r3, #0]
 8002fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3334      	adds	r3, #52	; 0x34
 8002fc0:	460a      	mov	r2, r1
 8002fc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	4413      	add	r3, r2
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d006      	beq.n	8002fde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	2b0f      	cmp	r3, #15
 8002fda:	d9e9      	bls.n	8002fb0 <prvInitialiseNewTask+0x64>
 8002fdc:	e000      	b.n	8002fe0 <prvInitialiseNewTask+0x94>
			{
				break;
 8002fde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe8:	e003      	b.n	8002ff2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	2b37      	cmp	r3, #55	; 0x37
 8002ff6:	d901      	bls.n	8002ffc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ff8:	2337      	movs	r3, #55	; 0x37
 8002ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003006:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	2200      	movs	r2, #0
 800300c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	3304      	adds	r3, #4
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f92e 	bl	8002274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800301a:	3318      	adds	r3, #24
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f929 	bl	8002274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003026:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003036:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2200      	movs	r2, #0
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	69b8      	ldr	r0, [r7, #24]
 800304c:	f001 f948 	bl	80042e0 <pxPortInitialiseStack>
 8003050:	4602      	mov	r2, r0
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800306c:	b5b0      	push	{r4, r5, r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af02      	add	r7, sp, #8
 8003072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003074:	f001 fa5e 	bl	8004534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003078:	4b35      	ldr	r3, [pc, #212]	; (8003150 <prvAddNewTaskToReadyList+0xe4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	4a34      	ldr	r2, [pc, #208]	; (8003150 <prvAddNewTaskToReadyList+0xe4>)
 8003080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003082:	4b34      	ldr	r3, [pc, #208]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800308a:	4a32      	ldr	r2, [pc, #200]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003090:	4b2f      	ldr	r3, [pc, #188]	; (8003150 <prvAddNewTaskToReadyList+0xe4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d110      	bne.n	80030ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003098:	f000 fbf6 	bl	8003888 <prvInitialiseTaskLists>
 800309c:	e00d      	b.n	80030ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <prvAddNewTaskToReadyList+0xec>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030a6:	4b2b      	ldr	r3, [pc, #172]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d802      	bhi.n	80030ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030ba:	4b28      	ldr	r3, [pc, #160]	; (800315c <prvAddNewTaskToReadyList+0xf0>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3301      	adds	r3, #1
 80030c0:	4a26      	ldr	r2, [pc, #152]	; (800315c <prvAddNewTaskToReadyList+0xf0>)
 80030c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030c4:	4b25      	ldr	r3, [pc, #148]	; (800315c <prvAddNewTaskToReadyList+0xf0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d016      	beq.n	8003100 <prvAddNewTaskToReadyList+0x94>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f003 fb79 	bl	80067cc <SEGGER_SYSVIEW_OnTaskCreate>
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	461d      	mov	r5, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461c      	mov	r4, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	1ae3      	subs	r3, r4, r3
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	462b      	mov	r3, r5
 80030fc:	f001 fdec 	bl	8004cd8 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fbe6 	bl	80068d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <prvAddNewTaskToReadyList+0xf4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d903      	bls.n	800311c <prvAddNewTaskToReadyList+0xb0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	4a11      	ldr	r2, [pc, #68]	; (8003160 <prvAddNewTaskToReadyList+0xf4>)
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <prvAddNewTaskToReadyList+0xf8>)
 800312a:	441a      	add	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f7ff f8ab 	bl	800228e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003138:	f001 fa2c 	bl	8004594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <prvAddNewTaskToReadyList+0xec>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <prvAddNewTaskToReadyList+0xdc>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <prvAddNewTaskToReadyList+0xe8>)
 8003146:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bdb0      	pop	{r4, r5, r7, pc}
 8003150:	20000c94 	.word	0x20000c94
 8003154:	200007c0 	.word	0x200007c0
 8003158:	20000ca0 	.word	0x20000ca0
 800315c:	20000cb0 	.word	0x20000cb0
 8003160:	20000c9c 	.word	0x20000c9c
 8003164:	200007c4 	.word	0x200007c4

08003168 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08a      	sub	sp, #40	; 0x28
 800316c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003176:	463a      	mov	r2, r7
 8003178:	1d39      	adds	r1, r7, #4
 800317a:	f107 0308 	add.w	r3, r7, #8
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f824 	bl	80021cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003184:	6839      	ldr	r1, [r7, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	9202      	str	r2, [sp, #8]
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	2300      	movs	r3, #0
 8003194:	460a      	mov	r2, r1
 8003196:	4928      	ldr	r1, [pc, #160]	; (8003238 <vTaskStartScheduler+0xd0>)
 8003198:	4828      	ldr	r0, [pc, #160]	; (800323c <vTaskStartScheduler+0xd4>)
 800319a:	f7ff fe35 	bl	8002e08 <xTaskCreateStatic>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a27      	ldr	r2, [pc, #156]	; (8003240 <vTaskStartScheduler+0xd8>)
 80031a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031a4:	4b26      	ldr	r3, [pc, #152]	; (8003240 <vTaskStartScheduler+0xd8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031ac:	2301      	movs	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	e001      	b.n	80031b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d102      	bne.n	80031c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80031bc:	f000 fd42 	bl	8003c44 <xTimerCreateTimerTask>
 80031c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d124      	bne.n	8003212 <vTaskStartScheduler+0xaa>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	613b      	str	r3, [r7, #16]
}
 80031da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <vTaskStartScheduler+0xdc>)
 80031de:	f04f 32ff 	mov.w	r2, #4294967295
 80031e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031e4:	4b18      	ldr	r3, [pc, #96]	; (8003248 <vTaskStartScheduler+0xe0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031ea:	4b18      	ldr	r3, [pc, #96]	; (800324c <vTaskStartScheduler+0xe4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 80031f0:	4b17      	ldr	r3, [pc, #92]	; (8003250 <vTaskStartScheduler+0xe8>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <vTaskStartScheduler+0xd8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d102      	bne.n	8003202 <vTaskStartScheduler+0x9a>
 80031fc:	f003 faca 	bl	8006794 <SEGGER_SYSVIEW_OnIdle>
 8003200:	e004      	b.n	800320c <vTaskStartScheduler+0xa4>
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <vTaskStartScheduler+0xe8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fb22 	bl	8006850 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800320c:	f001 f8f0 	bl	80043f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003210:	e00e      	b.n	8003230 <vTaskStartScheduler+0xc8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d10a      	bne.n	8003230 <vTaskStartScheduler+0xc8>
	__asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60fb      	str	r3, [r7, #12]
}
 800322c:	bf00      	nop
 800322e:	e7fe      	b.n	800322e <vTaskStartScheduler+0xc6>
}
 8003230:	bf00      	nop
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	08007620 	.word	0x08007620
 800323c:	08003865 	.word	0x08003865
 8003240:	20000cb8 	.word	0x20000cb8
 8003244:	20000cb4 	.word	0x20000cb4
 8003248:	20000ca0 	.word	0x20000ca0
 800324c:	20000c98 	.word	0x20000c98
 8003250:	200007c0 	.word	0x200007c0

08003254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <vTaskSuspendAll+0x18>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3301      	adds	r3, #1
 800325e:	4a03      	ldr	r2, [pc, #12]	; (800326c <vTaskSuspendAll+0x18>)
 8003260:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003262:	bf00      	nop
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	20000cbc 	.word	0x20000cbc

08003270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800327e:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <xTaskResumeAll+0x108>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10a      	bne.n	800329c <xTaskResumeAll+0x2c>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	603b      	str	r3, [r7, #0]
}
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800329c:	f001 f94a 	bl	8004534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <xTaskResumeAll+0x108>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	4a34      	ldr	r2, [pc, #208]	; (8003378 <xTaskResumeAll+0x108>)
 80032a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032aa:	4b33      	ldr	r3, [pc, #204]	; (8003378 <xTaskResumeAll+0x108>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d15a      	bne.n	8003368 <xTaskResumeAll+0xf8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032b2:	4b32      	ldr	r3, [pc, #200]	; (800337c <xTaskResumeAll+0x10c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d056      	beq.n	8003368 <xTaskResumeAll+0xf8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032ba:	e033      	b.n	8003324 <xTaskResumeAll+0xb4>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032bc:	4b30      	ldr	r3, [pc, #192]	; (8003380 <xTaskResumeAll+0x110>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3318      	adds	r3, #24
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff f83d 	bl	8002348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f838 	bl	8002348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4618      	mov	r0, r3
 80032dc:	f003 fafa 	bl	80068d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <xTaskResumeAll+0x114>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d903      	bls.n	80032f4 <xTaskResumeAll+0x84>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	4a24      	ldr	r2, [pc, #144]	; (8003384 <xTaskResumeAll+0x114>)
 80032f2:	6013      	str	r3, [r2, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4a21      	ldr	r2, [pc, #132]	; (8003388 <xTaskResumeAll+0x118>)
 8003302:	441a      	add	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3304      	adds	r3, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4610      	mov	r0, r2
 800330c:	f7fe ffbf 	bl	800228e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	4b1d      	ldr	r3, [pc, #116]	; (800338c <xTaskResumeAll+0x11c>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	429a      	cmp	r2, r3
 800331c:	d302      	bcc.n	8003324 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800331e:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <xTaskResumeAll+0x120>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003324:	4b16      	ldr	r3, [pc, #88]	; (8003380 <xTaskResumeAll+0x110>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1c7      	bne.n	80032bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003332:	f000 fb7f 	bl	8003a34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <xTaskResumeAll+0x124>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d010      	beq.n	8003364 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003342:	f000 f84b 	bl	80033dc <xTaskIncrementTick>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d002      	beq.n	8003352 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 800334c:	4b10      	ldr	r3, [pc, #64]	; (8003390 <xTaskResumeAll+0x120>)
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3b01      	subs	r3, #1
 8003356:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f1      	bne.n	8003342 <xTaskResumeAll+0xd2>

						xPendedTicks = 0;
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <xTaskResumeAll+0x124>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003364:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <xTaskResumeAll+0x120>)
 8003366:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003368:	f001 f914 	bl	8004594 <vPortExitCritical>

	return xAlreadyYielded;
 800336c:	687b      	ldr	r3, [r7, #4]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000cbc 	.word	0x20000cbc
 800337c:	20000c94 	.word	0x20000c94
 8003380:	20000c54 	.word	0x20000c54
 8003384:	20000c9c 	.word	0x20000c9c
 8003388:	200007c4 	.word	0x200007c4
 800338c:	200007c0 	.word	0x200007c0
 8003390:	20000ca8 	.word	0x20000ca8
 8003394:	20000ca4 	.word	0x20000ca4

08003398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800339e:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <xTaskGetTickCount+0x1c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80033a4:	687b      	ldr	r3, [r7, #4]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	20000c98 	.word	0x20000c98

080033b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033be:	f001 f99b 	bl	80046f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <xTaskGetTickCountFromISR+0x20>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80033cc:	683b      	ldr	r3, [r7, #0]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000c98 	.word	0x20000c98

080033dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e6:	4b41      	ldr	r3, [pc, #260]	; (80034ec <xTaskIncrementTick+0x110>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d174      	bne.n	80034d8 <xTaskIncrementTick+0xfc>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033ee:	4b40      	ldr	r3, [pc, #256]	; (80034f0 <xTaskIncrementTick+0x114>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80033f6:	4a3e      	ldr	r2, [pc, #248]	; (80034f0 <xTaskIncrementTick+0x114>)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d120      	bne.n	8003444 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003402:	4b3c      	ldr	r3, [pc, #240]	; (80034f4 <xTaskIncrementTick+0x118>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d00a      	beq.n	8003422 <xTaskIncrementTick+0x46>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	603b      	str	r3, [r7, #0]
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xTaskIncrementTick+0x44>
 8003422:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <xTaskIncrementTick+0x118>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <xTaskIncrementTick+0x11c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a31      	ldr	r2, [pc, #196]	; (80034f4 <xTaskIncrementTick+0x118>)
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4a31      	ldr	r2, [pc, #196]	; (80034f8 <xTaskIncrementTick+0x11c>)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b31      	ldr	r3, [pc, #196]	; (80034fc <xTaskIncrementTick+0x120>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	4a2f      	ldr	r2, [pc, #188]	; (80034fc <xTaskIncrementTick+0x120>)
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	f000 faf8 	bl	8003a34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <xTaskIncrementTick+0x124>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	d349      	bcc.n	80034e2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800344e:	4b29      	ldr	r3, [pc, #164]	; (80034f4 <xTaskIncrementTick+0x118>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d104      	bne.n	8003462 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003458:	4b29      	ldr	r3, [pc, #164]	; (8003500 <xTaskIncrementTick+0x124>)
 800345a:	f04f 32ff 	mov.w	r2, #4294967295
 800345e:	601a      	str	r2, [r3, #0]
					break;
 8003460:	e03f      	b.n	80034e2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <xTaskIncrementTick+0x118>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	429a      	cmp	r2, r3
 8003478:	d203      	bcs.n	8003482 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800347a:	4a21      	ldr	r2, [pc, #132]	; (8003500 <xTaskIncrementTick+0x124>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003480:	e02f      	b.n	80034e2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3304      	adds	r3, #4
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe ff5e 	bl	8002348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	d004      	beq.n	800349e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	3318      	adds	r3, #24
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe ff55 	bl	8002348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 fa17 	bl	80068d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034aa:	4b16      	ldr	r3, [pc, #88]	; (8003504 <xTaskIncrementTick+0x128>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d903      	bls.n	80034ba <xTaskIncrementTick+0xde>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <xTaskIncrementTick+0x128>)
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <xTaskIncrementTick+0x12c>)
 80034c8:	441a      	add	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7fe fedc 	bl	800228e <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d6:	e7ba      	b.n	800344e <xTaskIncrementTick+0x72>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <xTaskIncrementTick+0x130>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3301      	adds	r3, #1
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <xTaskIncrementTick+0x130>)
 80034e0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80034e2:	697b      	ldr	r3, [r7, #20]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000cbc 	.word	0x20000cbc
 80034f0:	20000c98 	.word	0x20000c98
 80034f4:	20000c4c 	.word	0x20000c4c
 80034f8:	20000c50 	.word	0x20000c50
 80034fc:	20000cac 	.word	0x20000cac
 8003500:	20000cb4 	.word	0x20000cb4
 8003504:	20000c9c 	.word	0x20000c9c
 8003508:	200007c4 	.word	0x200007c4
 800350c:	20000ca4 	.word	0x20000ca4

08003510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <vTaskSwitchContext+0xc0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800351e:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <vTaskSwitchContext+0xc4>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003524:	e04f      	b.n	80035c6 <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <vTaskSwitchContext+0xc4>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <vTaskSwitchContext+0xc8>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e010      	b.n	8003556 <vTaskSwitchContext+0x46>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10a      	bne.n	8003550 <vTaskSwitchContext+0x40>
	__asm volatile
 800353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353e:	f383 8811 	msr	BASEPRI, r3
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	f3bf 8f4f 	dsb	sy
 800354a:	607b      	str	r3, [r7, #4]
}
 800354c:	bf00      	nop
 800354e:	e7fe      	b.n	800354e <vTaskSwitchContext+0x3e>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3b01      	subs	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4921      	ldr	r1, [pc, #132]	; (80035dc <vTaskSwitchContext+0xcc>)
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0e4      	beq.n	8003534 <vTaskSwitchContext+0x24>
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4a19      	ldr	r2, [pc, #100]	; (80035dc <vTaskSwitchContext+0xcc>)
 8003576:	4413      	add	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	3308      	adds	r3, #8
 800358c:	429a      	cmp	r2, r3
 800358e:	d104      	bne.n	800359a <vTaskSwitchContext+0x8a>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a0f      	ldr	r2, [pc, #60]	; (80035e0 <vTaskSwitchContext+0xd0>)
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <vTaskSwitchContext+0xc8>)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80035aa:	4b0d      	ldr	r3, [pc, #52]	; (80035e0 <vTaskSwitchContext+0xd0>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <vTaskSwitchContext+0xd4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d102      	bne.n	80035bc <vTaskSwitchContext+0xac>
 80035b6:	f003 f8ed 	bl	8006794 <SEGGER_SYSVIEW_OnIdle>
}
 80035ba:	e004      	b.n	80035c6 <vTaskSwitchContext+0xb6>
		traceTASK_SWITCHED_IN();
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <vTaskSwitchContext+0xd0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f003 f945 	bl	8006850 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035c6:	bf00      	nop
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	20000cbc 	.word	0x20000cbc
 80035d4:	20000ca8 	.word	0x20000ca8
 80035d8:	20000c9c 	.word	0x20000c9c
 80035dc:	200007c4 	.word	0x200007c4
 80035e0:	200007c0 	.word	0x200007c0
 80035e4:	20000cb8 	.word	0x20000cb8

080035e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10a      	bne.n	800360e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
}
 800360a:	bf00      	nop
 800360c:	e7fe      	b.n	800360c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800360e:	4b07      	ldr	r3, [pc, #28]	; (800362c <vTaskPlaceOnEventList+0x44>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3318      	adds	r3, #24
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fe fe5d 	bl	80022d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800361c:	2101      	movs	r1, #1
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	f000 fabc 	bl	8003b9c <prvAddCurrentTaskToDelayedList>
}
 8003624:	bf00      	nop
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	200007c0 	.word	0x200007c0

08003630 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10a      	bne.n	8003658 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	617b      	str	r3, [r7, #20]
}
 8003654:	bf00      	nop
 8003656:	e7fe      	b.n	8003656 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <vTaskPlaceOnEventListRestricted+0x58>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3318      	adds	r3, #24
 800365e:	4619      	mov	r1, r3
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7fe fe14 	bl	800228e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d002      	beq.n	8003672 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800366c:	f04f 33ff 	mov.w	r3, #4294967295
 8003670:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003672:	2024      	movs	r0, #36	; 0x24
 8003674:	f002 fc0a 	bl	8005e8c <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	68b8      	ldr	r0, [r7, #8]
 800367c:	f000 fa8e 	bl	8003b9c <prvAddCurrentTaskToDelayedList>
	}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200007c0 	.word	0x200007c0

0800368c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	60fb      	str	r3, [r7, #12]
}
 80036b4:	bf00      	nop
 80036b6:	e7fe      	b.n	80036b6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	3318      	adds	r3, #24
 80036bc:	4618      	mov	r0, r3
 80036be:	f7fe fe43 	bl	8002348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <xTaskRemoveFromEventList+0xb8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d121      	bne.n	800370e <xTaskRemoveFromEventList+0x82>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fe3a 	bl	8002348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 f8fc 	bl	80068d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <xTaskRemoveFromEventList+0xbc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d903      	bls.n	80036f0 <xTaskRemoveFromEventList+0x64>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	4a16      	ldr	r2, [pc, #88]	; (8003748 <xTaskRemoveFromEventList+0xbc>)
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a13      	ldr	r2, [pc, #76]	; (800374c <xTaskRemoveFromEventList+0xc0>)
 80036fe:	441a      	add	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	3304      	adds	r3, #4
 8003704:	4619      	mov	r1, r3
 8003706:	4610      	mov	r0, r2
 8003708:	f7fe fdc1 	bl	800228e <vListInsertEnd>
 800370c:	e005      	b.n	800371a <xTaskRemoveFromEventList+0x8e>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	3318      	adds	r3, #24
 8003712:	4619      	mov	r1, r3
 8003714:	480e      	ldr	r0, [pc, #56]	; (8003750 <xTaskRemoveFromEventList+0xc4>)
 8003716:	f7fe fdba 	bl	800228e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <xTaskRemoveFromEventList+0xc8>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	429a      	cmp	r2, r3
 8003726:	d905      	bls.n	8003734 <xTaskRemoveFromEventList+0xa8>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <xTaskRemoveFromEventList+0xcc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e001      	b.n	8003738 <xTaskRemoveFromEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003738:	697b      	ldr	r3, [r7, #20]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000cbc 	.word	0x20000cbc
 8003748:	20000c9c 	.word	0x20000c9c
 800374c:	200007c4 	.word	0x200007c4
 8003750:	20000c54 	.word	0x20000c54
 8003754:	200007c0 	.word	0x200007c0
 8003758:	20000ca8 	.word	0x20000ca8

0800375c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <vTaskInternalSetTimeOutState+0x24>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <vTaskInternalSetTimeOutState+0x28>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	605a      	str	r2, [r3, #4]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	20000cac 	.word	0x20000cac
 8003784:	20000c98 	.word	0x20000c98

08003788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b088      	sub	sp, #32
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	613b      	str	r3, [r7, #16]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	60fb      	str	r3, [r7, #12]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037ca:	f000 feb3 	bl	8004534 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037ce:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <xTaskCheckForTimeOut+0xbc>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d102      	bne.n	80037ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e023      	b.n	8003836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <xTaskCheckForTimeOut+0xc0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d007      	beq.n	800380a <xTaskCheckForTimeOut+0x82>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d302      	bcc.n	800380a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	e015      	b.n	8003836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	429a      	cmp	r2, r3
 8003812:	d20b      	bcs.n	800382c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1ad2      	subs	r2, r2, r3
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff ff9b 	bl	800375c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e004      	b.n	8003836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003836:	f000 fead 	bl	8004594 <vPortExitCritical>

	return xReturn;
 800383a:	69fb      	ldr	r3, [r7, #28]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3720      	adds	r7, #32
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000c98 	.word	0x20000c98
 8003848:	20000cac 	.word	0x20000cac

0800384c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003850:	4b03      	ldr	r3, [pc, #12]	; (8003860 <vTaskMissedYield+0x14>)
 8003852:	2201      	movs	r2, #1
 8003854:	601a      	str	r2, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr
 8003860:	20000ca8 	.word	0x20000ca8

08003864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800386c:	f000 f84c 	bl	8003908 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <prvIdleTask+0x20>)
 8003872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003880:	e7f4      	b.n	800386c <prvIdleTask+0x8>
 8003882:	bf00      	nop
 8003884:	e000ed04 	.word	0xe000ed04

08003888 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	e00c      	b.n	80038ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4a12      	ldr	r2, [pc, #72]	; (80038e8 <prvInitialiseTaskLists+0x60>)
 80038a0:	4413      	add	r3, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fe fcc6 	bl	8002234 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3301      	adds	r3, #1
 80038ac:	607b      	str	r3, [r7, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b37      	cmp	r3, #55	; 0x37
 80038b2:	d9ef      	bls.n	8003894 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038b4:	480d      	ldr	r0, [pc, #52]	; (80038ec <prvInitialiseTaskLists+0x64>)
 80038b6:	f7fe fcbd 	bl	8002234 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038ba:	480d      	ldr	r0, [pc, #52]	; (80038f0 <prvInitialiseTaskLists+0x68>)
 80038bc:	f7fe fcba 	bl	8002234 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038c0:	480c      	ldr	r0, [pc, #48]	; (80038f4 <prvInitialiseTaskLists+0x6c>)
 80038c2:	f7fe fcb7 	bl	8002234 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038c6:	480c      	ldr	r0, [pc, #48]	; (80038f8 <prvInitialiseTaskLists+0x70>)
 80038c8:	f7fe fcb4 	bl	8002234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038cc:	480b      	ldr	r0, [pc, #44]	; (80038fc <prvInitialiseTaskLists+0x74>)
 80038ce:	f7fe fcb1 	bl	8002234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <prvInitialiseTaskLists+0x78>)
 80038d4:	4a05      	ldr	r2, [pc, #20]	; (80038ec <prvInitialiseTaskLists+0x64>)
 80038d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <prvInitialiseTaskLists+0x7c>)
 80038da:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <prvInitialiseTaskLists+0x68>)
 80038dc:	601a      	str	r2, [r3, #0]
}
 80038de:	bf00      	nop
 80038e0:	3708      	adds	r7, #8
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	200007c4 	.word	0x200007c4
 80038ec:	20000c24 	.word	0x20000c24
 80038f0:	20000c38 	.word	0x20000c38
 80038f4:	20000c54 	.word	0x20000c54
 80038f8:	20000c68 	.word	0x20000c68
 80038fc:	20000c80 	.word	0x20000c80
 8003900:	20000c4c 	.word	0x20000c4c
 8003904:	20000c50 	.word	0x20000c50

08003908 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800390e:	e019      	b.n	8003944 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003910:	f000 fe10 	bl	8004534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003914:	4b10      	ldr	r3, [pc, #64]	; (8003958 <prvCheckTasksWaitingTermination+0x50>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fd11 	bl	8002348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <prvCheckTasksWaitingTermination+0x54>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <prvCheckTasksWaitingTermination+0x54>)
 800392e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003930:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3b01      	subs	r3, #1
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003938:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800393a:	f000 fe2b 	bl	8004594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f848 	bl	80039d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <prvCheckTasksWaitingTermination+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e1      	bne.n	8003910 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000c68 	.word	0x20000c68
 800395c:	20000c94 	.word	0x20000c94
 8003960:	20000c7c 	.word	0x20000c7c

08003964 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003970:	e005      	b.n	800397e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3301      	adds	r3, #1
 8003976:	607b      	str	r3, [r7, #4]
			ulCount++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3301      	adds	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2ba5      	cmp	r3, #165	; 0xa5
 8003984:	d0f5      	beq.n	8003972 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	b29b      	uxth	r3, r3
	}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <uxTaskGetStackHighWaterMark+0x14>
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <uxTaskGetStackHighWaterMark+0x34>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	e000      	b.n	80039b2 <uxTaskGetStackHighWaterMark+0x16>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80039ba:	6938      	ldr	r0, [r7, #16]
 80039bc:	f7ff ffd2 	bl	8003964 <prvTaskCheckFreeStackSpace>
 80039c0:	4603      	mov	r3, r0
 80039c2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80039c4:	68fb      	ldr	r3, [r7, #12]
	}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200007c0 	.word	0x200007c0

080039d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 ff90 	bl	8004910 <vPortFree>
				vPortFree( pxTCB );
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 ff8d 	bl	8004910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039f6:	e018      	b.n	8003a2a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d103      	bne.n	8003a0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 ff84 	bl	8004910 <vPortFree>
	}
 8003a08:	e00f      	b.n	8003a2a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d00a      	beq.n	8003a2a <prvDeleteTCB+0x56>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	60fb      	str	r3, [r7, #12]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <prvDeleteTCB+0x54>
	}
 8003a2a:	bf00      	nop
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
	...

08003a34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <prvResetNextTaskUnblockTime+0x38>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d104      	bne.n	8003a4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <prvResetNextTaskUnblockTime+0x3c>)
 8003a46:	f04f 32ff 	mov.w	r2, #4294967295
 8003a4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a4c:	e008      	b.n	8003a60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4e:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <prvResetNextTaskUnblockTime+0x38>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <prvResetNextTaskUnblockTime+0x3c>)
 8003a5e:	6013      	str	r3, [r2, #0]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000c4c 	.word	0x20000c4c
 8003a70:	20000cb4 	.word	0x20000cb4

08003a74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <xTaskGetSchedulerState+0x34>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a82:	2301      	movs	r3, #1
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	e008      	b.n	8003a9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <xTaskGetSchedulerState+0x38>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a90:	2302      	movs	r3, #2
 8003a92:	607b      	str	r3, [r7, #4]
 8003a94:	e001      	b.n	8003a9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a96:	2300      	movs	r3, #0
 8003a98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a9a:	687b      	ldr	r3, [r7, #4]
	}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000ca0 	.word	0x20000ca0
 8003aac:	20000cbc 	.word	0x20000cbc

08003ab0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d05f      	beq.n	8003b86 <xTaskPriorityDisinherit+0xd6>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ac6:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <xTaskPriorityDisinherit+0xe0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d00a      	beq.n	8003ae6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60fb      	str	r3, [r7, #12]
}
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60bb      	str	r3, [r7, #8]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b08:	1e5a      	subs	r2, r3, #1
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d035      	beq.n	8003b86 <xTaskPriorityDisinherit+0xd6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d131      	bne.n	8003b86 <xTaskPriorityDisinherit+0xd6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fc0e 	bl	8002348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	204a      	movs	r0, #74	; 0x4a
 8003b32:	f002 f9c9 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f002 fec1 	bl	80068d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b56:	4b0f      	ldr	r3, [pc, #60]	; (8003b94 <xTaskPriorityDisinherit+0xe4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d903      	bls.n	8003b66 <xTaskPriorityDisinherit+0xb6>
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	4a0c      	ldr	r2, [pc, #48]	; (8003b94 <xTaskPriorityDisinherit+0xe4>)
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <xTaskPriorityDisinherit+0xe8>)
 8003b74:	441a      	add	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fe fb86 	bl	800228e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b82:	2301      	movs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b86:	697b      	ldr	r3, [r7, #20]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3718      	adds	r7, #24
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	200007c0 	.word	0x200007c0
 8003b94:	20000c9c 	.word	0x20000c9c
 8003b98:	200007c4 	.word	0x200007c4

08003b9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ba6:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <prvAddCurrentTaskToDelayedList+0x90>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bac:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fe fbc8 	bl	8002348 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bbe:	d10a      	bne.n	8003bd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4819      	ldr	r0, [pc, #100]	; (8003c34 <prvAddCurrentTaskToDelayedList+0x98>)
 8003bd0:	f7fe fb5d 	bl	800228e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bd4:	e026      	b.n	8003c24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d209      	bcs.n	8003c02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bee:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	f7fe fb6b 	bl	80022d6 <vListInsert>
}
 8003c00:	e010      	b.n	8003c24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <prvAddCurrentTaskToDelayedList+0x94>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4610      	mov	r0, r2
 8003c10:	f7fe fb61 	bl	80022d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d202      	bcs.n	8003c24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	6013      	str	r3, [r2, #0]
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000c98 	.word	0x20000c98
 8003c30:	200007c0 	.word	0x200007c0
 8003c34:	20000c80 	.word	0x20000c80
 8003c38:	20000c50 	.word	0x20000c50
 8003c3c:	20000c4c 	.word	0x20000c4c
 8003c40:	20000cb4 	.word	0x20000cb4

08003c44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003c4e:	f000 fb07 	bl	8004260 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003c52:	4b1c      	ldr	r3, [pc, #112]	; (8003cc4 <xTimerCreateTimerTask+0x80>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d021      	beq.n	8003c9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c62:	1d3a      	adds	r2, r7, #4
 8003c64:	f107 0108 	add.w	r1, r7, #8
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fe fac7 	bl	8002200 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c72:	6879      	ldr	r1, [r7, #4]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	9202      	str	r2, [sp, #8]
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2300      	movs	r3, #0
 8003c82:	460a      	mov	r2, r1
 8003c84:	4910      	ldr	r1, [pc, #64]	; (8003cc8 <xTimerCreateTimerTask+0x84>)
 8003c86:	4811      	ldr	r0, [pc, #68]	; (8003ccc <xTimerCreateTimerTask+0x88>)
 8003c88:	f7ff f8be 	bl	8002e08 <xTaskCreateStatic>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4a10      	ldr	r2, [pc, #64]	; (8003cd0 <xTimerCreateTimerTask+0x8c>)
 8003c90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <xTimerCreateTimerTask+0x8c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	613b      	str	r3, [r7, #16]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003cba:	697b      	ldr	r3, [r7, #20]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000cf0 	.word	0x20000cf0
 8003cc8:	08007628 	.word	0x08007628
 8003ccc:	08003e09 	.word	0x08003e09
 8003cd0:	20000cf4 	.word	0x20000cf4

08003cd4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	623b      	str	r3, [r7, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <xTimerGenericCommand+0x98>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02a      	beq.n	8003d60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b05      	cmp	r3, #5
 8003d1a:	dc18      	bgt.n	8003d4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003d1c:	f7ff feaa 	bl	8003a74 <xTaskGetSchedulerState>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d109      	bne.n	8003d3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <xTimerGenericCommand+0x98>)
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	f107 0110 	add.w	r1, r7, #16
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d32:	f7fe fc2f 	bl	8002594 <xQueueGenericSend>
 8003d36:	6278      	str	r0, [r7, #36]	; 0x24
 8003d38:	e012      	b.n	8003d60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <xTimerGenericCommand+0x98>)
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	f107 0110 	add.w	r1, r7, #16
 8003d42:	2300      	movs	r3, #0
 8003d44:	2200      	movs	r2, #0
 8003d46:	f7fe fc25 	bl	8002594 <xQueueGenericSend>
 8003d4a:	6278      	str	r0, [r7, #36]	; 0x24
 8003d4c:	e008      	b.n	8003d60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <xTimerGenericCommand+0x98>)
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	f107 0110 	add.w	r1, r7, #16
 8003d56:	2300      	movs	r3, #0
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	f7fe fd29 	bl	80027b0 <xQueueGenericSendFromISR>
 8003d5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3728      	adds	r7, #40	; 0x28
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000cf0 	.word	0x20000cf0

08003d70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b088      	sub	sp, #32
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7a:	4b22      	ldr	r3, [pc, #136]	; (8003e04 <prvProcessExpiredTimer+0x94>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3304      	adds	r3, #4
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fadd 	bl	8002348 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d022      	beq.n	8003de2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	699a      	ldr	r2, [r3, #24]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	18d1      	adds	r1, r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6978      	ldr	r0, [r7, #20]
 8003daa:	f000 f8d1 	bl	8003f50 <prvInsertTimerInActiveList>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01f      	beq.n	8003df4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f7ff ff88 	bl	8003cd4 <xTimerGenericCommand>
 8003dc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d113      	bne.n	8003df4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
}
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	6978      	ldr	r0, [r7, #20]
 8003dfa:	4798      	blx	r3
}
 8003dfc:	bf00      	nop
 8003dfe:	3718      	adds	r7, #24
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000ce8 	.word	0x20000ce8

08003e08 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e10:	f107 0308 	add.w	r3, r7, #8
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 f857 	bl	8003ec8 <prvGetNextExpireTime>
 8003e1a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f803 	bl	8003e2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003e26:	f000 f8d5 	bl	8003fd4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003e2a:	e7f1      	b.n	8003e10 <prvTimerTask+0x8>

08003e2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003e36:	f7ff fa0d 	bl	8003254 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e3a:	f107 0308 	add.w	r3, r7, #8
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 f866 	bl	8003f10 <prvSampleTimeNow>
 8003e44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d130      	bne.n	8003eae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10a      	bne.n	8003e68 <prvProcessTimerOrBlockTask+0x3c>
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d806      	bhi.n	8003e68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003e5a:	f7ff fa09 	bl	8003270 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7ff ff85 	bl	8003d70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003e66:	e024      	b.n	8003eb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e6e:	4b13      	ldr	r3, [pc, #76]	; (8003ebc <prvProcessTimerOrBlockTask+0x90>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <prvProcessTimerOrBlockTask+0x50>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <prvProcessTimerOrBlockTask+0x52>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <prvProcessTimerOrBlockTask+0x94>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f7fe ff87 	bl	8002da0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003e92:	f7ff f9ed 	bl	8003270 <xTaskResumeAll>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <prvProcessTimerOrBlockTask+0x98>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
}
 8003eac:	e001      	b.n	8003eb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003eae:	f7ff f9df 	bl	8003270 <xTaskResumeAll>
}
 8003eb2:	bf00      	nop
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	20000cec 	.word	0x20000cec
 8003ec0:	20000cf0 	.word	0x20000cf0
 8003ec4:	e000ed04 	.word	0xe000ed04

08003ec8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ed0:	4b0e      	ldr	r3, [pc, #56]	; (8003f0c <prvGetNextExpireTime+0x44>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <prvGetNextExpireTime+0x16>
 8003eda:	2201      	movs	r2, #1
 8003edc:	e000      	b.n	8003ee0 <prvGetNextExpireTime+0x18>
 8003ede:	2200      	movs	r2, #0
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d105      	bne.n	8003ef8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003eec:	4b07      	ldr	r3, [pc, #28]	; (8003f0c <prvGetNextExpireTime+0x44>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	60fb      	str	r3, [r7, #12]
 8003ef6:	e001      	b.n	8003efc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003efc:	68fb      	ldr	r3, [r7, #12]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3714      	adds	r7, #20
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000ce8 	.word	0x20000ce8

08003f10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003f18:	f7ff fa3e 	bl	8003398 <xTaskGetTickCount>
 8003f1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <prvSampleTimeNow+0x3c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d205      	bcs.n	8003f34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003f28:	f000 f936 	bl	8004198 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e002      	b.n	8003f3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003f3a:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <prvSampleTimeNow+0x3c>)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003f40:	68fb      	ldr	r3, [r7, #12]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000cf8 	.word	0x20000cf8

08003f50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d812      	bhi.n	8003f9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad2      	subs	r2, r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d302      	bcc.n	8003f8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e01b      	b.n	8003fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <prvInsertTimerInActiveList+0x7c>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fe f99e 	bl	80022d6 <vListInsert>
 8003f9a:	e012      	b.n	8003fc2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d206      	bcs.n	8003fb2 <prvInsertTimerInActiveList+0x62>
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e007      	b.n	8003fc2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <prvInsertTimerInActiveList+0x80>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f7fe f98a 	bl	80022d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003fc2:	697b      	ldr	r3, [r7, #20]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3718      	adds	r7, #24
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000cec 	.word	0x20000cec
 8003fd0:	20000ce8 	.word	0x20000ce8

08003fd4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b08e      	sub	sp, #56	; 0x38
 8003fd8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fda:	e0ca      	b.n	8004172 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da18      	bge.n	8004014 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003fe2:	1d3b      	adds	r3, r7, #4
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10a      	bne.n	8004004 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	61fb      	str	r3, [r7, #28]
}
 8004000:	bf00      	nop
 8004002:	e7fe      	b.n	8004002 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400a:	6850      	ldr	r0, [r2, #4]
 800400c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800400e:	6892      	ldr	r2, [r2, #8]
 8004010:	4611      	mov	r1, r2
 8004012:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f2c0 80ab 	blt.w	8004172 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	3304      	adds	r3, #4
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe f98b 	bl	8002348 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004032:	463b      	mov	r3, r7
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ff6b 	bl	8003f10 <prvSampleTimeNow>
 800403a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b09      	cmp	r3, #9
 8004040:	f200 8096 	bhi.w	8004170 <prvProcessReceivedCommands+0x19c>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <prvProcessReceivedCommands+0x78>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004075 	.word	0x08004075
 8004050:	08004075 	.word	0x08004075
 8004054:	08004075 	.word	0x08004075
 8004058:	080040e9 	.word	0x080040e9
 800405c:	080040fd 	.word	0x080040fd
 8004060:	08004147 	.word	0x08004147
 8004064:	08004075 	.word	0x08004075
 8004068:	08004075 	.word	0x08004075
 800406c:	080040e9 	.word	0x080040e9
 8004070:	080040fd 	.word	0x080040fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	18d1      	adds	r1, r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004094:	f7ff ff5c 	bl	8003f50 <prvInsertTimerInActiveList>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d069      	beq.n	8004172 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d05e      	beq.n	8004172 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	441a      	add	r2, r3
 80040bc:	2300      	movs	r3, #0
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	2300      	movs	r3, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040c6:	f7ff fe05 	bl	8003cd4 <xTimerGenericCommand>
 80040ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d14f      	bne.n	8004172 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	61bb      	str	r3, [r7, #24]
}
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80040fa:	e03a      	b.n	8004172 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80040fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	b2da      	uxtb	r2, r3
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004112:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	617b      	str	r3, [r7, #20]
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	18d1      	adds	r1, r2, r3
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004140:	f7ff ff06 	bl	8003f50 <prvInsertTimerInActiveList>
					break;
 8004144:	e015      	b.n	8004172 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004156:	f000 fbdb 	bl	8004910 <vPortFree>
 800415a:	e00a      	b.n	8004172 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	b2da      	uxtb	r2, r3
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800416e:	e000      	b.n	8004172 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004170:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <prvProcessReceivedCommands+0x1c0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	1d39      	adds	r1, r7, #4
 8004178:	2200      	movs	r2, #0
 800417a:	4618      	mov	r0, r3
 800417c:	f7fe fbc8 	bl	8002910 <xQueueReceive>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	f47f af2a 	bne.w	8003fdc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3730      	adds	r7, #48	; 0x30
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000cf0 	.word	0x20000cf0

08004198 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800419e:	e048      	b.n	8004232 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041a0:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <prvSwitchTimerLists+0xc0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <prvSwitchTimerLists+0xc0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe f8c5 	bl	8002348 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d02e      	beq.n	8004232 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90e      	bls.n	8004204 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041f2:	4b19      	ldr	r3, [pc, #100]	; (8004258 <prvSwitchTimerLists+0xc0>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fe f86a 	bl	80022d6 <vListInsert>
 8004202:	e016      	b.n	8004232 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004204:	2300      	movs	r3, #0
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2300      	movs	r3, #0
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	2100      	movs	r1, #0
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fd60 	bl	8003cd4 <xTimerGenericCommand>
 8004214:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	603b      	str	r3, [r7, #0]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <prvSwitchTimerLists+0xc0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1b1      	bne.n	80041a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800423c:	4b06      	ldr	r3, [pc, #24]	; (8004258 <prvSwitchTimerLists+0xc0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <prvSwitchTimerLists+0xc4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <prvSwitchTimerLists+0xc0>)
 8004248:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800424a:	4a04      	ldr	r2, [pc, #16]	; (800425c <prvSwitchTimerLists+0xc4>)
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000ce8 	.word	0x20000ce8
 800425c:	20000cec 	.word	0x20000cec

08004260 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004266:	f000 f965 	bl	8004534 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d120      	bne.n	80042b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004272:	4814      	ldr	r0, [pc, #80]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 8004274:	f7fd ffde 	bl	8002234 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004278:	4813      	ldr	r0, [pc, #76]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 800427a:	f7fd ffdb 	bl	8002234 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <prvCheckForValidListAndQueue+0x6c>)
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <prvCheckForValidListAndQueue+0x64>)
 8004282:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004284:	4b12      	ldr	r3, [pc, #72]	; (80042d0 <prvCheckForValidListAndQueue+0x70>)
 8004286:	4a10      	ldr	r2, [pc, #64]	; (80042c8 <prvCheckForValidListAndQueue+0x68>)
 8004288:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800428a:	2300      	movs	r3, #0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4b11      	ldr	r3, [pc, #68]	; (80042d4 <prvCheckForValidListAndQueue+0x74>)
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <prvCheckForValidListAndQueue+0x78>)
 8004292:	2110      	movs	r1, #16
 8004294:	200a      	movs	r0, #10
 8004296:	f7fe f8dc 	bl	8002452 <xQueueGenericCreateStatic>
 800429a:	4603      	mov	r3, r0
 800429c:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 800429e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <prvCheckForValidListAndQueue+0x60>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	490b      	ldr	r1, [pc, #44]	; (80042dc <prvCheckForValidListAndQueue+0x7c>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fd44 	bl	8002d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80042b4:	f000 f96e 	bl	8004594 <vPortExitCritical>
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000cf0 	.word	0x20000cf0
 80042c4:	20000cc0 	.word	0x20000cc0
 80042c8:	20000cd4 	.word	0x20000cd4
 80042cc:	20000ce8 	.word	0x20000ce8
 80042d0:	20000cec 	.word	0x20000cec
 80042d4:	20000d9c 	.word	0x20000d9c
 80042d8:	20000cfc 	.word	0x20000cfc
 80042dc:	08007630 	.word	0x08007630

080042e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	3b04      	subs	r3, #4
 80042f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3b04      	subs	r3, #4
 80042fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 0201 	bic.w	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3b04      	subs	r3, #4
 800430e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004310:	4a0c      	ldr	r2, [pc, #48]	; (8004344 <pxPortInitialiseStack+0x64>)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b14      	subs	r3, #20
 800431a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b04      	subs	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f06f 0202 	mvn.w	r2, #2
 800432e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3b20      	subs	r3, #32
 8004334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	08004349 	.word	0x08004349

08004348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <prvTaskExitError+0x54>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d00a      	beq.n	8004372 <prvTaskExitError+0x2a>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	60fb      	str	r3, [r7, #12]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <prvTaskExitError+0x28>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60bb      	str	r3, [r7, #8]
}
 8004384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004386:	bf00      	nop
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0fc      	beq.n	8004388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800438e:	bf00      	nop
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	2000000c 	.word	0x2000000c

080043a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pxCurrentTCBConst2>)
 80043a2:	6819      	ldr	r1, [r3, #0]
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043aa:	f380 8809 	msr	PSP, r0
 80043ae:	f3bf 8f6f 	isb	sy
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f380 8811 	msr	BASEPRI, r0
 80043ba:	4770      	bx	lr
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst2>:
 80043c0:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80043c8:	4808      	ldr	r0, [pc, #32]	; (80043ec <prvPortStartFirstTask+0x24>)
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	6800      	ldr	r0, [r0, #0]
 80043ce:	f380 8808 	msr	MSP, r0
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8814 	msr	CONTROL, r0
 80043da:	b662      	cpsie	i
 80043dc:	b661      	cpsie	f
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	df00      	svc	0
 80043e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80043ea:	bf00      	nop
 80043ec:	e000ed08 	.word	0xe000ed08

080043f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043f6:	4b46      	ldr	r3, [pc, #280]	; (8004510 <xPortStartScheduler+0x120>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a46      	ldr	r2, [pc, #280]	; (8004514 <xPortStartScheduler+0x124>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10a      	bne.n	8004416 <xPortStartScheduler+0x26>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004416:	4b3e      	ldr	r3, [pc, #248]	; (8004510 <xPortStartScheduler+0x120>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a3f      	ldr	r2, [pc, #252]	; (8004518 <xPortStartScheduler+0x128>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d10a      	bne.n	8004436 <xPortStartScheduler+0x46>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	60fb      	str	r3, [r7, #12]
}
 8004432:	bf00      	nop
 8004434:	e7fe      	b.n	8004434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <xPortStartScheduler+0x12c>)
 8004438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	22ff      	movs	r2, #255	; 0xff
 8004446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	b2db      	uxtb	r3, r3
 800444e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b31      	ldr	r3, [pc, #196]	; (8004520 <xPortStartScheduler+0x130>)
 800445c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800445e:	4b31      	ldr	r3, [pc, #196]	; (8004524 <xPortStartScheduler+0x134>)
 8004460:	2207      	movs	r2, #7
 8004462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004464:	e009      	b.n	800447a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004466:	4b2f      	ldr	r3, [pc, #188]	; (8004524 <xPortStartScheduler+0x134>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3b01      	subs	r3, #1
 800446c:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <xPortStartScheduler+0x134>)
 800446e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d0ef      	beq.n	8004466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004486:	4b27      	ldr	r3, [pc, #156]	; (8004524 <xPortStartScheduler+0x134>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1c3 0307 	rsb	r3, r3, #7
 800448e:	2b04      	cmp	r3, #4
 8004490:	d00a      	beq.n	80044a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	60bb      	str	r3, [r7, #8]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044a8:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <xPortStartScheduler+0x134>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	021b      	lsls	r3, r3, #8
 80044ae:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <xPortStartScheduler+0x134>)
 80044b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044b2:	4b1c      	ldr	r3, [pc, #112]	; (8004524 <xPortStartScheduler+0x134>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <xPortStartScheduler+0x134>)
 80044bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <xPortStartScheduler+0x138>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a17      	ldr	r2, [pc, #92]	; (8004528 <xPortStartScheduler+0x138>)
 80044cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <xPortStartScheduler+0x138>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <xPortStartScheduler+0x138>)
 80044d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044de:	f000 f8dd 	bl	800469c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044e2:	4b12      	ldr	r3, [pc, #72]	; (800452c <xPortStartScheduler+0x13c>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80044e8:	f000 f8fc 	bl	80046e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <xPortStartScheduler+0x140>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0f      	ldr	r2, [pc, #60]	; (8004530 <xPortStartScheduler+0x140>)
 80044f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80044f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044f8:	f7ff ff66 	bl	80043c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044fc:	f7ff f808 	bl	8003510 <vTaskSwitchContext>
	prvTaskExitError();
 8004500:	f7ff ff22 	bl	8004348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	e000ed00 	.word	0xe000ed00
 8004514:	410fc271 	.word	0x410fc271
 8004518:	410fc270 	.word	0x410fc270
 800451c:	e000e400 	.word	0xe000e400
 8004520:	20000dec 	.word	0x20000dec
 8004524:	20000df0 	.word	0x20000df0
 8004528:	e000ed20 	.word	0xe000ed20
 800452c:	2000000c 	.word	0x2000000c
 8004530:	e000ef34 	.word	0xe000ef34

08004534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	607b      	str	r3, [r7, #4]
}
 800454c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800454e:	4b0f      	ldr	r3, [pc, #60]	; (800458c <vPortEnterCritical+0x58>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a0d      	ldr	r2, [pc, #52]	; (800458c <vPortEnterCritical+0x58>)
 8004556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004558:	4b0c      	ldr	r3, [pc, #48]	; (800458c <vPortEnterCritical+0x58>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10f      	bne.n	8004580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <vPortEnterCritical+0x5c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <vPortEnterCritical+0x4c>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	603b      	str	r3, [r7, #0]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <vPortEnterCritical+0x4a>
	}
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	2000000c 	.word	0x2000000c
 8004590:	e000ed04 	.word	0xe000ed04

08004594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <vPortExitCritical+0x50>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <vPortExitCritical+0x24>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	607b      	str	r3, [r7, #4]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80045b8:	4b0a      	ldr	r3, [pc, #40]	; (80045e4 <vPortExitCritical+0x50>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3b01      	subs	r3, #1
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <vPortExitCritical+0x50>)
 80045c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80045c2:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <vPortExitCritical+0x50>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <vPortExitCritical+0x42>
 80045ca:	2300      	movs	r3, #0
 80045cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f383 8811 	msr	BASEPRI, r3
}
 80045d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	2000000c 	.word	0x2000000c
	...

080045f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045f0:	f3ef 8009 	mrs	r0, PSP
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	4b15      	ldr	r3, [pc, #84]	; (8004650 <pxCurrentTCBConst>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	f01e 0f10 	tst.w	lr, #16
 8004600:	bf08      	it	eq
 8004602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800460a:	6010      	str	r0, [r2, #0]
 800460c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004614:	f380 8811 	msr	BASEPRI, r0
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f7fe ff76 	bl	8003510 <vTaskSwitchContext>
 8004624:	f04f 0000 	mov.w	r0, #0
 8004628:	f380 8811 	msr	BASEPRI, r0
 800462c:	bc09      	pop	{r0, r3}
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	6808      	ldr	r0, [r1, #0]
 8004632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004636:	f01e 0f10 	tst.w	lr, #16
 800463a:	bf08      	it	eq
 800463c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004640:	f380 8809 	msr	PSP, r0
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	f3af 8000 	nop.w

08004650 <pxCurrentTCBConst>:
 8004650:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop

08004658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	607b      	str	r3, [r7, #4]
}
 8004670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004672:	f7fe feb3 	bl	80033dc <xTaskIncrementTick>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800467c:	4b06      	ldr	r3, [pc, #24]	; (8004698 <xPortSysTickHandler+0x40>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	2300      	movs	r3, #0
 8004686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f383 8811 	msr	BASEPRI, r3
}
 800468e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	e000ed04 	.word	0xe000ed04

0800469c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <vPortSetupTimerInterrupt+0x34>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80046a6:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <vPortSetupTimerInterrupt+0x38>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80046ac:	4b0a      	ldr	r3, [pc, #40]	; (80046d8 <vPortSetupTimerInterrupt+0x3c>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a0a      	ldr	r2, [pc, #40]	; (80046dc <vPortSetupTimerInterrupt+0x40>)
 80046b2:	fba2 2303 	umull	r2, r3, r2, r3
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	4a09      	ldr	r2, [pc, #36]	; (80046e0 <vPortSetupTimerInterrupt+0x44>)
 80046ba:	3b01      	subs	r3, #1
 80046bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80046be:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <vPortSetupTimerInterrupt+0x34>)
 80046c0:	2207      	movs	r2, #7
 80046c2:	601a      	str	r2, [r3, #0]
}
 80046c4:	bf00      	nop
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e010 	.word	0xe000e010
 80046d4:	e000e018 	.word	0xe000e018
 80046d8:	20000000 	.word	0x20000000
 80046dc:	10624dd3 	.word	0x10624dd3
 80046e0:	e000e014 	.word	0xe000e014

080046e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80046e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80046f4 <vPortEnableVFP+0x10>
 80046e8:	6801      	ldr	r1, [r0, #0]
 80046ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80046ee:	6001      	str	r1, [r0, #0]
 80046f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80046f2:	bf00      	nop
 80046f4:	e000ed88 	.word	0xe000ed88

080046f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80046fe:	f3ef 8305 	mrs	r3, IPSR
 8004702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	d914      	bls.n	8004734 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800470a:	4a17      	ldr	r2, [pc, #92]	; (8004768 <vPortValidateInterruptPriority+0x70>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004714:	4b15      	ldr	r3, [pc, #84]	; (800476c <vPortValidateInterruptPriority+0x74>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	7afa      	ldrb	r2, [r7, #11]
 800471a:	429a      	cmp	r2, r3
 800471c:	d20a      	bcs.n	8004734 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	607b      	str	r3, [r7, #4]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004734:	4b0e      	ldr	r3, [pc, #56]	; (8004770 <vPortValidateInterruptPriority+0x78>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800473c:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <vPortValidateInterruptPriority+0x7c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d90a      	bls.n	800475a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	603b      	str	r3, [r7, #0]
}
 8004756:	bf00      	nop
 8004758:	e7fe      	b.n	8004758 <vPortValidateInterruptPriority+0x60>
	}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	e000e3f0 	.word	0xe000e3f0
 800476c:	20000dec 	.word	0x20000dec
 8004770:	e000ed0c 	.word	0xe000ed0c
 8004774:	20000df0 	.word	0x20000df0

08004778 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b08a      	sub	sp, #40	; 0x28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004784:	f7fe fd66 	bl	8003254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004788:	4b5b      	ldr	r3, [pc, #364]	; (80048f8 <pvPortMalloc+0x180>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004790:	f000 f920 	bl	80049d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004794:	4b59      	ldr	r3, [pc, #356]	; (80048fc <pvPortMalloc+0x184>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	f040 8093 	bne.w	80048c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01d      	beq.n	80047e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80047a8:	2208      	movs	r2, #8
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d014      	beq.n	80047e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f023 0307 	bic.w	r3, r3, #7
 80047c0:	3308      	adds	r3, #8
 80047c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <pvPortMalloc+0x6c>
	__asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	617b      	str	r3, [r7, #20]
}
 80047e0:	bf00      	nop
 80047e2:	e7fe      	b.n	80047e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d06e      	beq.n	80048c8 <pvPortMalloc+0x150>
 80047ea:	4b45      	ldr	r3, [pc, #276]	; (8004900 <pvPortMalloc+0x188>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d869      	bhi.n	80048c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80047f4:	4b43      	ldr	r3, [pc, #268]	; (8004904 <pvPortMalloc+0x18c>)
 80047f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <pvPortMalloc+0x18c>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047fe:	e004      	b.n	800480a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	429a      	cmp	r2, r3
 8004812:	d903      	bls.n	800481c <pvPortMalloc+0xa4>
 8004814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f1      	bne.n	8004800 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800481c:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <pvPortMalloc+0x180>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004822:	429a      	cmp	r2, r3
 8004824:	d050      	beq.n	80048c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2208      	movs	r2, #8
 800482c:	4413      	add	r3, r2
 800482e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1ad2      	subs	r2, r2, r3
 8004840:	2308      	movs	r3, #8
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	429a      	cmp	r2, r3
 8004846:	d91f      	bls.n	8004888 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4413      	add	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <pvPortMalloc+0xf8>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	613b      	str	r3, [r7, #16]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004882:	69b8      	ldr	r0, [r7, #24]
 8004884:	f000 f908 	bl	8004a98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004888:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <pvPortMalloc+0x188>)
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <pvPortMalloc+0x188>)
 8004894:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <pvPortMalloc+0x188>)
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b1b      	ldr	r3, [pc, #108]	; (8004908 <pvPortMalloc+0x190>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d203      	bcs.n	80048aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <pvPortMalloc+0x188>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a18      	ldr	r2, [pc, #96]	; (8004908 <pvPortMalloc+0x190>)
 80048a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <pvPortMalloc+0x184>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	431a      	orrs	r2, r3
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <pvPortMalloc+0x194>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3301      	adds	r3, #1
 80048c4:	4a11      	ldr	r2, [pc, #68]	; (800490c <pvPortMalloc+0x194>)
 80048c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80048c8:	f7fe fcd2 	bl	8003270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <pvPortMalloc+0x174>
	__asm volatile
 80048d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048da:	f383 8811 	msr	BASEPRI, r3
 80048de:	f3bf 8f6f 	isb	sy
 80048e2:	f3bf 8f4f 	dsb	sy
 80048e6:	60fb      	str	r3, [r7, #12]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <pvPortMalloc+0x172>
	return pvReturn;
 80048ec:	69fb      	ldr	r3, [r7, #28]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3728      	adds	r7, #40	; 0x28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200049fc 	.word	0x200049fc
 80048fc:	20004a10 	.word	0x20004a10
 8004900:	20004a00 	.word	0x20004a00
 8004904:	200049f4 	.word	0x200049f4
 8004908:	20004a04 	.word	0x20004a04
 800490c:	20004a08 	.word	0x20004a08

08004910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d04d      	beq.n	80049be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004922:	2308      	movs	r3, #8
 8004924:	425b      	negs	r3, r3
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4413      	add	r3, r2
 800492a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <vPortFree+0xb8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4013      	ands	r3, r2
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <vPortFree+0x44>
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60fb      	str	r3, [r7, #12]
}
 8004950:	bf00      	nop
 8004952:	e7fe      	b.n	8004952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <vPortFree+0x62>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	60bb      	str	r3, [r7, #8]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4b14      	ldr	r3, [pc, #80]	; (80049c8 <vPortFree+0xb8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4013      	ands	r3, r2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01e      	beq.n	80049be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11a      	bne.n	80049be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <vPortFree+0xb8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	43db      	mvns	r3, r3
 8004992:	401a      	ands	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004998:	f7fe fc5c 	bl	8003254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <vPortFree+0xbc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4413      	add	r3, r2
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <vPortFree+0xbc>)
 80049a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80049aa:	6938      	ldr	r0, [r7, #16]
 80049ac:	f000 f874 	bl	8004a98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <vPortFree+0xc0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3301      	adds	r3, #1
 80049b6:	4a06      	ldr	r2, [pc, #24]	; (80049d0 <vPortFree+0xc0>)
 80049b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80049ba:	f7fe fc59 	bl	8003270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20004a10 	.word	0x20004a10
 80049cc:	20004a00 	.word	0x20004a00
 80049d0:	20004a0c 	.word	0x20004a0c

080049d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80049de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80049e0:	4b27      	ldr	r3, [pc, #156]	; (8004a80 <prvHeapInit+0xac>)
 80049e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00c      	beq.n	8004a08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3307      	adds	r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0307 	bic.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	4a1f      	ldr	r2, [pc, #124]	; (8004a80 <prvHeapInit+0xac>)
 8004a04:	4413      	add	r3, r2
 8004a06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004a0c:	4a1d      	ldr	r2, [pc, #116]	; (8004a84 <prvHeapInit+0xb0>)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004a12:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <prvHeapInit+0xb0>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004a20:	2208      	movs	r2, #8
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1a9b      	subs	r3, r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0307 	bic.w	r3, r3, #7
 8004a2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <prvHeapInit+0xb4>)
 8004a34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <prvHeapInit+0xb4>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <prvHeapInit+0xb4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	1ad2      	subs	r2, r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a54:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <prvHeapInit+0xb4>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	4a0a      	ldr	r2, [pc, #40]	; (8004a8c <prvHeapInit+0xb8>)
 8004a62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a09      	ldr	r2, [pc, #36]	; (8004a90 <prvHeapInit+0xbc>)
 8004a6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <prvHeapInit+0xc0>)
 8004a6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	20000df4 	.word	0x20000df4
 8004a84:	200049f4 	.word	0x200049f4
 8004a88:	200049fc 	.word	0x200049fc
 8004a8c:	20004a04 	.word	0x20004a04
 8004a90:	20004a00 	.word	0x20004a00
 8004a94:	20004a10 	.word	0x20004a10

08004a98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004aa0:	4b28      	ldr	r3, [pc, #160]	; (8004b44 <prvInsertBlockIntoFreeList+0xac>)
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e002      	b.n	8004aac <prvInsertBlockIntoFreeList+0x14>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d8f7      	bhi.n	8004aa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d108      	bne.n	8004ada <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	441a      	add	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	441a      	add	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d118      	bne.n	8004b20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b15      	ldr	r3, [pc, #84]	; (8004b48 <prvInsertBlockIntoFreeList+0xb0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d00d      	beq.n	8004b16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	441a      	add	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e008      	b.n	8004b28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <prvInsertBlockIntoFreeList+0xb0>)
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e003      	b.n	8004b28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d002      	beq.n	8004b36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	200049f4 	.word	0x200049f4
 8004b48:	200049fc 	.word	0x200049fc

08004b4c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b50:	4803      	ldr	r0, [pc, #12]	; (8004b60 <_cbSendSystemDesc+0x14>)
 8004b52:	f001 fdc9 	bl	80066e8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b56:	4803      	ldr	r0, [pc, #12]	; (8004b64 <_cbSendSystemDesc+0x18>)
 8004b58:	f001 fdc6 	bl	80066e8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b5c:	bf00      	nop
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	08007638 	.word	0x08007638
 8004b64:	08007678 	.word	0x08007678

08004b68 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b6c:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <SEGGER_SYSVIEW_Conf+0x24>)
 8004b76:	4a06      	ldr	r2, [pc, #24]	; (8004b90 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b78:	f001 f934 	bl	8005de4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004b80:	f001 f974 	bl	8005e6c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	08004b4d 	.word	0x08004b4d
 8004b90:	08007714 	.word	0x08007714

08004b94 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	e048      	b.n	8004c32 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8004ba0:	4929      	ldr	r1, [pc, #164]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fe fef3 	bl	800399c <uxTaskGetStackHighWaterMark>
 8004bb6:	4601      	mov	r1, r0
 8004bb8:	4823      	ldr	r0, [pc, #140]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4403      	add	r3, r0
 8004bc6:	3310      	adds	r3, #16
 8004bc8:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004bca:	491f      	ldr	r1, [pc, #124]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	440b      	add	r3, r1
 8004be8:	3304      	adds	r3, #4
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	4c16      	ldr	r4, [pc, #88]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4423      	add	r3, r4
 8004bfa:	3308      	adds	r3, #8
 8004bfc:	681c      	ldr	r4, [r3, #0]
 8004bfe:	4d12      	ldr	r5, [pc, #72]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	442b      	add	r3, r5
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	681d      	ldr	r5, [r3, #0]
 8004c10:	4e0d      	ldr	r6, [pc, #52]	; (8004c48 <_cbSendTaskList+0xb4>)
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4433      	add	r3, r6
 8004c1e:	3310      	adds	r3, #16
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	462b      	mov	r3, r5
 8004c26:	4622      	mov	r2, r4
 8004c28:	f000 f8be 	bl	8004da8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	607b      	str	r3, [r7, #4]
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <_cbSendTaskList+0xb8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d3b1      	bcc.n	8004ba0 <_cbSendTaskList+0xc>
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20004a14 	.word	0x20004a14
 8004c4c:	20004ab4 	.word	0x20004ab4

08004c50 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c58:	f7fe fbae 	bl	80033b8 <xTaskGetTickCountFromISR>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2200      	movs	r2, #0
 8004c60:	469a      	mov	sl, r3
 8004c62:	4693      	mov	fp, r2
 8004c64:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	f04f 0a00 	mov.w	sl, #0
 8004c74:	f04f 0b00 	mov.w	fp, #0
 8004c78:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c7c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c80:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c84:	4652      	mov	r2, sl
 8004c86:	465b      	mov	r3, fp
 8004c88:	1a14      	subs	r4, r2, r0
 8004c8a:	eb63 0501 	sbc.w	r5, r3, r1
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	00ab      	lsls	r3, r5, #2
 8004c98:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c9c:	00a2      	lsls	r2, r4, #2
 8004c9e:	4614      	mov	r4, r2
 8004ca0:	461d      	mov	r5, r3
 8004ca2:	eb14 0800 	adds.w	r8, r4, r0
 8004ca6:	eb45 0901 	adc.w	r9, r5, r1
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cbe:	4690      	mov	r8, r2
 8004cc0:	4699      	mov	r9, r3
 8004cc2:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004cd8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af02      	add	r7, sp, #8
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ce6:	2205      	movs	r2, #5
 8004ce8:	492b      	ldr	r1, [pc, #172]	; (8004d98 <SYSVIEW_AddTask+0xc0>)
 8004cea:	68b8      	ldr	r0, [r7, #8]
 8004cec:	f001 ffce 	bl	8006c8c <memcmp>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d04b      	beq.n	8004d8e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cf6:	4b29      	ldr	r3, [pc, #164]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b07      	cmp	r3, #7
 8004cfc:	d903      	bls.n	8004d06 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cfe:	4828      	ldr	r0, [pc, #160]	; (8004da0 <SYSVIEW_AddTask+0xc8>)
 8004d00:	f001 ff34 	bl	8006b6c <SEGGER_SYSVIEW_Warn>
    return;
 8004d04:	e044      	b.n	8004d90 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4926      	ldr	r1, [pc, #152]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4921      	ldr	r1, [pc, #132]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	491b      	ldr	r1, [pc, #108]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3308      	adds	r3, #8
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	4916      	ldr	r1, [pc, #88]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	330c      	adds	r3, #12
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d5c:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4910      	ldr	r1, [pc, #64]	; (8004da4 <SYSVIEW_AddTask+0xcc>)
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3301      	adds	r3, #1
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <SYSVIEW_AddTask+0xc4>)
 8004d7a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f000 f80e 	bl	8004da8 <SYSVIEW_SendTaskInfo>
 8004d8c:	e000      	b.n	8004d90 <SYSVIEW_AddTask+0xb8>
    return;
 8004d8e:	bf00      	nop

}
 8004d90:	3710      	adds	r7, #16
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	08007688 	.word	0x08007688
 8004d9c:	20004ab4 	.word	0x20004ab4
 8004da0:	08007690 	.word	0x08007690
 8004da4:	20004a14 	.word	0x20004a14

08004da8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	; 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004db6:	f107 0310 	add.w	r3, r7, #16
 8004dba:	2218      	movs	r2, #24
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f001 ff74 	bl	8006cac <memset>
  TaskInfo.TaskID     = TaskID;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004dd8:	f107 0310 	add.w	r3, r7, #16
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fb8b 	bl	80064f8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004de2:	bf00      	nop
 8004de4:	3728      	adds	r7, #40	; 0x28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004df2:	4b26      	ldr	r3, [pc, #152]	; (8004e8c <_DoInit+0xa0>)
 8004df4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004df6:	22a8      	movs	r2, #168	; 0xa8
 8004df8:	2100      	movs	r1, #0
 8004dfa:	6838      	ldr	r0, [r7, #0]
 8004dfc:	f001 ff56 	bl	8006cac <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	2203      	movs	r2, #3
 8004e04:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <_DoInit+0xa4>)
 8004e10:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <_DoInit+0xa8>)
 8004e16:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	4a16      	ldr	r2, [pc, #88]	; (8004e90 <_DoInit+0xa4>)
 8004e36:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <_DoInit+0xac>)
 8004e3c:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2210      	movs	r2, #16
 8004e42:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2200      	movs	r2, #0
 8004e48:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e56:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	e00c      	b.n	8004e7a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1c3 030f 	rsb	r3, r3, #15
 8004e66:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <_DoInit+0xb0>)
 8004e68:	5cd1      	ldrb	r1, [r2, r3]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4413      	add	r3, r2
 8004e70:	460a      	mov	r2, r1
 8004e72:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	607b      	str	r3, [r7, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b0f      	cmp	r3, #15
 8004e7e:	d9ef      	bls.n	8004e60 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e80:	f3bf 8f5f 	dmb	sy
}
 8004e84:	bf00      	nop
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20004ab8 	.word	0x20004ab8
 8004e90:	080076e0 	.word	0x080076e0
 8004e94:	20004b60 	.word	0x20004b60
 8004e98:	20004f60 	.word	0x20004f60
 8004e9c:	0800771c 	.word	0x0800771c

08004ea0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004eac:	4b3e      	ldr	r3, [pc, #248]	; (8004fa8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004eae:	623b      	str	r3, [r7, #32]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b53      	cmp	r3, #83	; 0x53
 8004eb8:	d001      	beq.n	8004ebe <SEGGER_RTT_ReadNoLock+0x1e>
 8004eba:	f7ff ff97 	bl	8004dec <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	3360      	adds	r3, #96	; 0x60
 8004eca:	4a37      	ldr	r2, [pc, #220]	; (8004fa8 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ecc:	4413      	add	r3, r2
 8004ece:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d92b      	bls.n	8004f44 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4293      	cmp	r3, r2
 8004efc:	bf28      	it	cs
 8004efe:	4613      	movcs	r3, r2
 8004f00:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	4413      	add	r3, r2
 8004f0a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	6939      	ldr	r1, [r7, #16]
 8004f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f12:	f001 fef9 	bl	8006d08 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	4413      	add	r3, r2
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d101      	bne.n	8004f44 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4293      	cmp	r3, r2
 8004f52:	bf28      	it	cs
 8004f54:	4613      	movcs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d019      	beq.n	8004f92 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f64:	4413      	add	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6e:	f001 fecb 	bl	8006d08 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4413      	add	r3, r2
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	4413      	add	r3, r2
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4413      	add	r3, r2
 8004f90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f9c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3730      	adds	r7, #48	; 0x30
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20004ab8 	.word	0x20004ab8

08004fac <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004fba:	4b3d      	ldr	r3, [pc, #244]	; (80050b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fbc:	61bb      	str	r3, [r7, #24]
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b53      	cmp	r3, #83	; 0x53
 8004fc6:	d001      	beq.n	8004fcc <SEGGER_RTT_AllocUpBuffer+0x20>
 8004fc8:	f7ff ff10 	bl	8004dec <_DoInit>
  SEGGER_RTT_LOCK();
 8004fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd0:	f04f 0120 	mov.w	r1, #32
 8004fd4:	f381 8811 	msr	BASEPRI, r1
 8004fd8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fda:	4b35      	ldr	r3, [pc, #212]	; (80050b0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fdc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004fe2:	6939      	ldr	r1, [r7, #16]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	4613      	mov	r3, r2
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	4413      	add	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d008      	beq.n	800500c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	429a      	cmp	r2, r3
 8005008:	dbeb      	blt.n	8004fe2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800500a:	e000      	b.n	800500e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800500c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	429a      	cmp	r2, r3
 8005016:	da3f      	bge.n	8005098 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005018:	6939      	ldr	r1, [r7, #16]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800502c:	6939      	ldr	r1, [r7, #16]
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	1c5a      	adds	r2, r3, #1
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	3304      	adds	r3, #4
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005042:	6939      	ldr	r1, [r7, #16]
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3320      	adds	r3, #32
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	3328      	adds	r3, #40	; 0x28
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	4613      	mov	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	440b      	add	r3, r1
 8005078:	3324      	adds	r3, #36	; 0x24
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800507e:	6939      	ldr	r1, [r7, #16]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	440b      	add	r3, r1
 800508c:	332c      	adds	r3, #44	; 0x2c
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005092:	f3bf 8f5f 	dmb	sy
 8005096:	e002      	b.n	800509e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005098:	f04f 33ff 	mov.w	r3, #4294967295
 800509c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80050a4:	69fb      	ldr	r3, [r7, #28]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20004ab8 	.word	0x20004ab8

080050b4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08a      	sub	sp, #40	; 0x28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80050c2:	4b21      	ldr	r3, [pc, #132]	; (8005148 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b53      	cmp	r3, #83	; 0x53
 80050ce:	d001      	beq.n	80050d4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80050d0:	f7ff fe8c 	bl	8004dec <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050d6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d82c      	bhi.n	8005138 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80050de:	f3ef 8311 	mrs	r3, BASEPRI
 80050e2:	f04f 0120 	mov.w	r1, #32
 80050e6:	f381 8811 	msr	BASEPRI, r1
 80050ea:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	3360      	adds	r3, #96	; 0x60
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2200      	movs	r2, #0
 800511a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2200      	movs	r2, #0
 8005120:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005128:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	e002      	b.n	800513e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005138:	f04f 33ff 	mov.w	r3, #4294967295
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005140:	4618      	mov	r0, r3
 8005142:	3728      	adds	r7, #40	; 0x28
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20004ab8 	.word	0x20004ab8

0800514c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	60fa      	str	r2, [r7, #12]
 8005162:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b80      	cmp	r3, #128	; 0x80
 8005168:	d90a      	bls.n	8005180 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800516e:	e007      	b.n	8005180 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	1c53      	adds	r3, r2, #1
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1c59      	adds	r1, r3, #1
 800517a:	60f9      	str	r1, [r7, #12]
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1e5a      	subs	r2, r3, #1
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <_EncodeStr+0x46>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1ee      	bne.n	8005170 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	b2da      	uxtb	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800519e:	68fb      	ldr	r3, [r7, #12]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3307      	adds	r3, #7
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051ca:	4b34      	ldr	r3, [pc, #208]	; (800529c <_HandleIncomingPacket+0xd8>)
 80051cc:	7e1b      	ldrb	r3, [r3, #24]
 80051ce:	4618      	mov	r0, r3
 80051d0:	1cfb      	adds	r3, r7, #3
 80051d2:	2201      	movs	r2, #1
 80051d4:	4619      	mov	r1, r3
 80051d6:	f7ff fe63 	bl	8004ea0 <SEGGER_RTT_ReadNoLock>
 80051da:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d057      	beq.n	8005292 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d031      	beq.n	800524c <_HandleIncomingPacket+0x88>
 80051e8:	2b80      	cmp	r3, #128	; 0x80
 80051ea:	dc40      	bgt.n	800526e <_HandleIncomingPacket+0xaa>
 80051ec:	2b07      	cmp	r3, #7
 80051ee:	dc15      	bgt.n	800521c <_HandleIncomingPacket+0x58>
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dd3c      	ble.n	800526e <_HandleIncomingPacket+0xaa>
 80051f4:	3b01      	subs	r3, #1
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d839      	bhi.n	800526e <_HandleIncomingPacket+0xaa>
 80051fa:	a201      	add	r2, pc, #4	; (adr r2, 8005200 <_HandleIncomingPacket+0x3c>)
 80051fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005200:	08005223 	.word	0x08005223
 8005204:	08005229 	.word	0x08005229
 8005208:	0800522f 	.word	0x0800522f
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523b 	.word	0x0800523b
 8005214:	08005241 	.word	0x08005241
 8005218:	08005247 	.word	0x08005247
 800521c:	2b7f      	cmp	r3, #127	; 0x7f
 800521e:	d033      	beq.n	8005288 <_HandleIncomingPacket+0xc4>
 8005220:	e025      	b.n	800526e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005222:	f000 ffef 	bl	8006204 <SEGGER_SYSVIEW_Start>
      break;
 8005226:	e034      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005228:	f001 f8a6 	bl	8006378 <SEGGER_SYSVIEW_Stop>
      break;
 800522c:	e031      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800522e:	f001 fa7f 	bl	8006730 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005232:	e02e      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005234:	f001 fa44 	bl	80066c0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005238:	e02b      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800523a:	f001 f8c3 	bl	80063c4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800523e:	e028      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005240:	f001 fc42 	bl	8006ac8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005244:	e025      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005246:	f001 fc21 	bl	8006a8c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800524a:	e022      	b.n	8005292 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800524c:	4b13      	ldr	r3, [pc, #76]	; (800529c <_HandleIncomingPacket+0xd8>)
 800524e:	7e1b      	ldrb	r3, [r3, #24]
 8005250:	4618      	mov	r0, r3
 8005252:	1cfb      	adds	r3, r7, #3
 8005254:	2201      	movs	r2, #1
 8005256:	4619      	mov	r1, r3
 8005258:	f7ff fe22 	bl	8004ea0 <SEGGER_RTT_ReadNoLock>
 800525c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fb86 	bl	8006978 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800526c:	e00e      	b.n	800528c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800526e:	78fb      	ldrb	r3, [r7, #3]
 8005270:	b25b      	sxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	da0c      	bge.n	8005290 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <_HandleIncomingPacket+0xd8>)
 8005278:	7e1b      	ldrb	r3, [r3, #24]
 800527a:	4618      	mov	r0, r3
 800527c:	1cfb      	adds	r3, r7, #3
 800527e:	2201      	movs	r2, #1
 8005280:	4619      	mov	r1, r3
 8005282:	f7ff fe0d 	bl	8004ea0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005286:	e003      	b.n	8005290 <_HandleIncomingPacket+0xcc>
      break;
 8005288:	bf00      	nop
 800528a:	e002      	b.n	8005292 <_HandleIncomingPacket+0xce>
      break;
 800528c:	bf00      	nop
 800528e:	e000      	b.n	8005292 <_HandleIncomingPacket+0xce>
      break;
 8005290:	bf00      	nop
    }
  }
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20005f78 	.word	0x20005f78

080052a0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08c      	sub	sp, #48	; 0x30
 80052a4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80052a6:	2301      	movs	r3, #1
 80052a8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b4:	4b31      	ldr	r3, [pc, #196]	; (800537c <_TrySendOverflowPacket+0xdc>)
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ba:	e00b      	b.n	80052d4 <_TrySendOverflowPacket+0x34>
 80052bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b7f      	cmp	r3, #127	; 0x7f
 80052d8:	d8f0      	bhi.n	80052bc <_TrySendOverflowPacket+0x1c>
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052ea:	4b25      	ldr	r3, [pc, #148]	; (8005380 <_TrySendOverflowPacket+0xe0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052f0:	4b22      	ldr	r3, [pc, #136]	; (800537c <_TrySendOverflowPacket+0xdc>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	627b      	str	r3, [r7, #36]	; 0x24
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e00b      	b.n	800531c <_TrySendOverflowPacket+0x7c>
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	6279      	str	r1, [r7, #36]	; 0x24
 800530e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	09db      	lsrs	r3, r3, #7
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	2b7f      	cmp	r3, #127	; 0x7f
 8005320:	d8f0      	bhi.n	8005304 <_TrySendOverflowPacket+0x64>
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	627a      	str	r2, [r7, #36]	; 0x24
 8005328:	6a3a      	ldr	r2, [r7, #32]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005330:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	4618      	mov	r0, r3
 8005338:	1d3b      	adds	r3, r7, #4
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	461a      	mov	r2, r3
 8005340:	1d3b      	adds	r3, r7, #4
 8005342:	4619      	mov	r1, r3
 8005344:	f7fa ff44 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005348:	4603      	mov	r3, r0
 800534a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d009      	beq.n	8005366 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005352:	4a0a      	ldr	r2, [pc, #40]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <_TrySendOverflowPacket+0xdc>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	b2da      	uxtb	r2, r3
 8005360:	4b06      	ldr	r3, [pc, #24]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e004      	b.n	8005370 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <_TrySendOverflowPacket+0xdc>)
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	3301      	adds	r3, #1
 800536c:	4a03      	ldr	r2, [pc, #12]	; (800537c <_TrySendOverflowPacket+0xdc>)
 800536e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005370:	693b      	ldr	r3, [r7, #16]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3730      	adds	r7, #48	; 0x30
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20005f78 	.word	0x20005f78
 8005380:	e0001004 	.word	0xe0001004

08005384 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005390:	4b98      	ldr	r3, [pc, #608]	; (80055f4 <_SendPacket+0x270>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d010      	beq.n	80053ba <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005398:	4b96      	ldr	r3, [pc, #600]	; (80055f4 <_SendPacket+0x270>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 812d 	beq.w	80055fc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80053a2:	4b94      	ldr	r3, [pc, #592]	; (80055f4 <_SendPacket+0x270>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d109      	bne.n	80053be <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80053aa:	f7ff ff79 	bl	80052a0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80053ae:	4b91      	ldr	r3, [pc, #580]	; (80055f4 <_SendPacket+0x270>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f040 8124 	bne.w	8005600 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80053b8:	e001      	b.n	80053be <_SendPacket+0x3a>
    goto Send;
 80053ba:	bf00      	nop
 80053bc:	e000      	b.n	80053c0 <_SendPacket+0x3c>
Send:
 80053be:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	d809      	bhi.n	80053da <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053c6:	4b8b      	ldr	r3, [pc, #556]	; (80055f4 <_SendPacket+0x270>)
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f040 8115 	bne.w	8005604 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b17      	cmp	r3, #23
 80053de:	d807      	bhi.n	80053f0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e0c4      	b.n	800557a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	2b7f      	cmp	r3, #127	; 0x7f
 80053fc:	d912      	bls.n	8005424 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	09da      	lsrs	r2, r3, #7
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3b01      	subs	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	3a01      	subs	r2, #1
 8005416:	60fa      	str	r2, [r7, #12]
 8005418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800541c:	b2da      	uxtb	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	701a      	strb	r2, [r3, #0]
 8005422:	e006      	b.n	8005432 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3b01      	subs	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b7e      	cmp	r3, #126	; 0x7e
 8005436:	d807      	bhi.n	8005448 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3b01      	subs	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	e098      	b.n	800557a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544e:	d212      	bcs.n	8005476 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	09da      	lsrs	r2, r3, #7
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3b01      	subs	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	3a01      	subs	r2, #1
 8005468:	60fa      	str	r2, [r7, #12]
 800546a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800546e:	b2da      	uxtb	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e081      	b.n	800557a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800547c:	d21d      	bcs.n	80054ba <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0b9a      	lsrs	r2, r3, #14
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b01      	subs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	b2d2      	uxtb	r2, r2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	09db      	lsrs	r3, r3, #7
 8005492:	b2db      	uxtb	r3, r3
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	3a01      	subs	r2, #1
 8005498:	60fa      	str	r2, [r7, #12]
 800549a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	3a01      	subs	r2, #1
 80054ac:	60fa      	str	r2, [r7, #12]
 80054ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	701a      	strb	r2, [r3, #0]
 80054b8:	e05f      	b.n	800557a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054c0:	d228      	bcs.n	8005514 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0d5a      	lsrs	r2, r3, #21
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	60fb      	str	r3, [r7, #12]
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	0b9b      	lsrs	r3, r3, #14
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	3a01      	subs	r2, #1
 80054dc:	60fa      	str	r2, [r7, #12]
 80054de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	09db      	lsrs	r3, r3, #7
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	3a01      	subs	r2, #1
 80054f2:	60fa      	str	r2, [r7, #12]
 80054f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	3a01      	subs	r2, #1
 8005506:	60fa      	str	r2, [r7, #12]
 8005508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800550c:	b2da      	uxtb	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	e032      	b.n	800557a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0f1a      	lsrs	r2, r3, #28
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	b2d2      	uxtb	r2, r2
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	0d5b      	lsrs	r3, r3, #21
 8005528:	b2db      	uxtb	r3, r3
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	3a01      	subs	r2, #1
 800552e:	60fa      	str	r2, [r7, #12]
 8005530:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005534:	b2da      	uxtb	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0b9b      	lsrs	r3, r3, #14
 800553e:	b2db      	uxtb	r3, r3
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	3a01      	subs	r2, #1
 8005544:	60fa      	str	r2, [r7, #12]
 8005546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800554a:	b2da      	uxtb	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	09db      	lsrs	r3, r3, #7
 8005554:	b2db      	uxtb	r3, r3
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	3a01      	subs	r2, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	3a01      	subs	r2, #1
 800556e:	60fa      	str	r2, [r7, #12]
 8005570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <_SendPacket+0x274>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <_SendPacket+0x270>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	e00b      	b.n	80055ac <_SendPacket+0x228>
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	b2da      	uxtb	r2, r3
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	1c59      	adds	r1, r3, #1
 800559c:	6279      	str	r1, [r7, #36]	; 0x24
 800559e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	09db      	lsrs	r3, r3, #7
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	2b7f      	cmp	r3, #127	; 0x7f
 80055b0:	d8f0      	bhi.n	8005594 <_SendPacket+0x210>
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1c5a      	adds	r2, r3, #1
 80055b6:	627a      	str	r2, [r7, #36]	; 0x24
 80055b8:	6a3a      	ldr	r2, [r7, #32]
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	701a      	strb	r2, [r3, #0]
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80055c2:	4b0c      	ldr	r3, [pc, #48]	; (80055f4 <_SendPacket+0x270>)
 80055c4:	785b      	ldrb	r3, [r3, #1]
 80055c6:	4618      	mov	r0, r3
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	f7fa fdfd 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055d6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <_SendPacket+0x270>)
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	60d3      	str	r3, [r2, #12]
 80055e4:	e00f      	b.n	8005606 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80055e6:	4b03      	ldr	r3, [pc, #12]	; (80055f4 <_SendPacket+0x270>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4b01      	ldr	r3, [pc, #4]	; (80055f4 <_SendPacket+0x270>)
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	e008      	b.n	8005606 <_SendPacket+0x282>
 80055f4:	20005f78 	.word	0x20005f78
 80055f8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80055fc:	bf00      	nop
 80055fe:	e002      	b.n	8005606 <_SendPacket+0x282>
      goto SendDone;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <_SendPacket+0x282>
      goto SendDone;
 8005604:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <_SendPacket+0x2d4>)
 8005608:	7e1b      	ldrb	r3, [r3, #24]
 800560a:	4619      	mov	r1, r3
 800560c:	4a13      	ldr	r2, [pc, #76]	; (800565c <_SendPacket+0x2d8>)
 800560e:	460b      	mov	r3, r1
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	440b      	add	r3, r1
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	4413      	add	r3, r2
 8005618:	336c      	adds	r3, #108	; 0x6c
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <_SendPacket+0x2d4>)
 800561e:	7e1b      	ldrb	r3, [r3, #24]
 8005620:	4618      	mov	r0, r3
 8005622:	490e      	ldr	r1, [pc, #56]	; (800565c <_SendPacket+0x2d8>)
 8005624:	4603      	mov	r3, r0
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	4403      	add	r3, r0
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	440b      	add	r3, r1
 800562e:	3370      	adds	r3, #112	; 0x70
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	429a      	cmp	r2, r3
 8005634:	d00b      	beq.n	800564e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <_SendPacket+0x2d4>)
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d107      	bne.n	800564e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800563e:	4b06      	ldr	r3, [pc, #24]	; (8005658 <_SendPacket+0x2d4>)
 8005640:	2201      	movs	r2, #1
 8005642:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005644:	f7ff fdbe 	bl	80051c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <_SendPacket+0x2d4>)
 800564a:	2200      	movs	r2, #0
 800564c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800564e:	bf00      	nop
 8005650:	3728      	adds	r7, #40	; 0x28
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20005f78 	.word	0x20005f78
 800565c:	20004ab8 	.word	0x20004ab8

08005660 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005660:	b580      	push	{r7, lr}
 8005662:	b08a      	sub	sp, #40	; 0x28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	3301      	adds	r3, #1
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d80a      	bhi.n	8005690 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	1c59      	adds	r1, r3, #1
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6051      	str	r1, [r2, #4]
 8005684:	78fa      	ldrb	r2, [r7, #3]
 8005686:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	2b80      	cmp	r3, #128	; 0x80
 8005696:	d15a      	bne.n	800574e <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	623b      	str	r3, [r7, #32]
 80056b8:	e00b      	b.n	80056d2 <_StoreChar+0x72>
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	b2da      	uxtb	r2, r3
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1c59      	adds	r1, r3, #1
 80056c2:	6279      	str	r1, [r7, #36]	; 0x24
 80056c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	09db      	lsrs	r3, r3, #7
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2b7f      	cmp	r3, #127	; 0x7f
 80056d6:	d8f0      	bhi.n	80056ba <_StoreChar+0x5a>
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	627a      	str	r2, [r7, #36]	; 0x24
 80056de:	6a3a      	ldr	r2, [r7, #32]
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	2300      	movs	r3, #0
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e00b      	b.n	800570a <_StoreChar+0xaa>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	1c59      	adds	r1, r3, #1
 80056fa:	61f9      	str	r1, [r7, #28]
 80056fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	09db      	lsrs	r3, r3, #7
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	2b7f      	cmp	r3, #127	; 0x7f
 800570e:	d8f0      	bhi.n	80056f2 <_StoreChar+0x92>
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	61fa      	str	r2, [r7, #28]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	b2d2      	uxtb	r2, r2
 800571a:	701a      	strb	r2, [r3, #0]
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	221a      	movs	r2, #26
 8005726:	6939      	ldr	r1, [r7, #16]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff fe2b 	bl	8005384 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fd3a 	bl	80051ac <_PreparePacket>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	611a      	str	r2, [r3, #16]
  }
}
 800574e:	bf00      	nop
 8005750:	3728      	adds	r7, #40	; 0x28
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	; 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800576a:	2301      	movs	r3, #1
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800576e:	2301      	movs	r3, #1
 8005770:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005772:	e007      	b.n	8005784 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005774:	6a3a      	ldr	r2, [r7, #32]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	623b      	str	r3, [r7, #32]
    Width++;
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	3301      	adds	r3, #1
 8005782:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005784:	6a3a      	ldr	r2, [r7, #32]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	429a      	cmp	r2, r3
 800578a:	d2f3      	bcs.n	8005774 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	429a      	cmp	r2, r3
 8005792:	d901      	bls.n	8005798 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d11f      	bne.n	80057e2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d01c      	beq.n	80057e2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <_PrintUnsigned+0x66>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <_PrintUnsigned+0x66>
        c = '0';
 80057b8:	2330      	movs	r3, #48	; 0x30
 80057ba:	76fb      	strb	r3, [r7, #27]
 80057bc:	e001      	b.n	80057c2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80057be:	2320      	movs	r3, #32
 80057c0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057c2:	e007      	b.n	80057d4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	3b01      	subs	r3, #1
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80057ca:	7efb      	ldrb	r3, [r7, #27]
 80057cc:	4619      	mov	r1, r3
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff ff46 	bl	8005660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <_PrintUnsigned+0x8a>
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	429a      	cmp	r2, r3
 80057e0:	d3f0      	bcc.n	80057c4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d903      	bls.n	80057f0 <_PrintUnsigned+0x98>
      NumDigits--;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	3b01      	subs	r3, #1
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	e009      	b.n	8005804 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d200      	bcs.n	8005804 <_PrintUnsigned+0xac>
        break;
 8005802:	e005      	b.n	8005810 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	fb02 f303 	mul.w	r3, r2, r3
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800580e:	e7e8      	b.n	80057e2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	fbb2 f3f3 	udiv	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <_PrintUnsigned+0x128>)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	4413      	add	r3, r2
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff ff14 	bl	8005660 <_StoreChar>
    Digit /= Base;
 8005838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e3      	bne.n	8005810 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d011      	beq.n	8005876 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005858:	e006      	b.n	8005868 <_PrintUnsigned+0x110>
        FieldWidth--;
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	3b01      	subs	r3, #1
 800585e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005860:	2120      	movs	r1, #32
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff fefc 	bl	8005660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <_PrintUnsigned+0x11e>
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005872:	429a      	cmp	r2, r3
 8005874:	d3f1      	bcc.n	800585a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005876:	bf00      	nop
 8005878:	3728      	adds	r7, #40	; 0x28
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	0800773c 	.word	0x0800773c

08005884 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005884:	b580      	push	{r7, lr}
 8005886:	b088      	sub	sp, #32
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	607a      	str	r2, [r7, #4]
 8005890:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	bfb8      	it	lt
 8005898:	425b      	neglt	r3, r3
 800589a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800589c:	2301      	movs	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058a0:	e007      	b.n	80058b2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80058aa:	613b      	str	r3, [r7, #16]
    Width++;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3301      	adds	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	daf3      	bge.n	80058a2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d901      	bls.n	80058c6 <_PrintInt+0x42>
    Width = NumDigits;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <_PrintInt+0x5e>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	db04      	blt.n	80058dc <_PrintInt+0x58>
 80058d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <_PrintInt+0x5e>
    FieldWidth--;
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	3b01      	subs	r3, #1
 80058e0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <_PrintInt+0x6e>
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d016      	beq.n	8005920 <_PrintInt+0x9c>
 80058f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d111      	bne.n	8005920 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00e      	beq.n	8005920 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005902:	e006      	b.n	8005912 <_PrintInt+0x8e>
        FieldWidth--;
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	3b01      	subs	r3, #1
 8005908:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800590a:	2120      	movs	r1, #32
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f7ff fea7 	bl	8005660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <_PrintInt+0x9c>
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	429a      	cmp	r2, r3
 800591e:	d3f1      	bcc.n	8005904 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	da07      	bge.n	8005936 <_PrintInt+0xb2>
    v = -v;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	425b      	negs	r3, r3
 800592a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800592c:	212d      	movs	r1, #45	; 0x2d
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fe96 	bl	8005660 <_StoreChar>
 8005934:	e008      	b.n	8005948 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005940:	212b      	movs	r1, #43	; 0x2b
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7ff fe8c 	bl	8005660 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	d019      	beq.n	8005986 <_PrintInt+0x102>
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b00      	cmp	r3, #0
 800595a:	d114      	bne.n	8005986 <_PrintInt+0x102>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d111      	bne.n	8005986 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005968:	e006      	b.n	8005978 <_PrintInt+0xf4>
        FieldWidth--;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	3b01      	subs	r3, #1
 800596e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005970:	2130      	movs	r1, #48	; 0x30
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f7ff fe74 	bl	8005660 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <_PrintInt+0x102>
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	429a      	cmp	r2, r3
 8005984:	d3f1      	bcc.n	800596a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	9301      	str	r3, [sp, #4]
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f7ff fedf 	bl	8005758 <_PrintUnsigned>
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b098      	sub	sp, #96	; 0x60
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059b0:	f3ef 8311 	mrs	r3, BASEPRI
 80059b4:	f04f 0120 	mov.w	r1, #32
 80059b8:	f381 8811 	msr	BASEPRI, r1
 80059bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059be:	48b7      	ldr	r0, [pc, #732]	; (8005c9c <_VPrintTarget+0x2f8>)
 80059c0:	f7ff fbf4 	bl	80051ac <_PreparePacket>
 80059c4:	62b8      	str	r0, [r7, #40]	; 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80059c6:	4bb5      	ldr	r3, [pc, #724]	; (8005c9c <_VPrintTarget+0x2f8>)
 80059c8:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80059ca:	2300      	movs	r3, #0
 80059cc:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	3301      	adds	r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80059ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 81a8 	beq.w	8005d44 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80059f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059f8:	2b25      	cmp	r3, #37	; 0x25
 80059fa:	f040 8195 	bne.w	8005d28 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80059fe:	2300      	movs	r3, #0
 8005a00:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005a02:	2301      	movs	r3, #1
 8005a04:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005a0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a12:	3b23      	subs	r3, #35	; 0x23
 8005a14:	2b0d      	cmp	r3, #13
 8005a16:	d83f      	bhi.n	8005a98 <_VPrintTarget+0xf4>
 8005a18:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <_VPrintTarget+0x7c>)
 8005a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a1e:	bf00      	nop
 8005a20:	08005a89 	.word	0x08005a89
 8005a24:	08005a99 	.word	0x08005a99
 8005a28:	08005a99 	.word	0x08005a99
 8005a2c:	08005a99 	.word	0x08005a99
 8005a30:	08005a99 	.word	0x08005a99
 8005a34:	08005a99 	.word	0x08005a99
 8005a38:	08005a99 	.word	0x08005a99
 8005a3c:	08005a99 	.word	0x08005a99
 8005a40:	08005a79 	.word	0x08005a79
 8005a44:	08005a99 	.word	0x08005a99
 8005a48:	08005a59 	.word	0x08005a59
 8005a4c:	08005a99 	.word	0x08005a99
 8005a50:	08005a99 	.word	0x08005a99
 8005a54:	08005a69 	.word	0x08005a69
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a5a:	f043 0301 	orr.w	r3, r3, #1
 8005a5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	3301      	adds	r3, #1
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e01a      	b.n	8005a9e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6a:	f043 0302 	orr.w	r3, r3, #2
 8005a6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e012      	b.n	8005a9e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	f043 0304 	orr.w	r3, r3, #4
 8005a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	e00a      	b.n	8005a9e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8a:	f043 0308 	orr.w	r3, r3, #8
 8005a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e002      	b.n	8005a9e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005a9c:	bf00      	nop
        }
      } while (v);
 8005a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1b0      	bne.n	8005a06 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005ab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8005ab6:	d912      	bls.n	8005ade <_VPrintTarget+0x13a>
 8005ab8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005abc:	2b39      	cmp	r3, #57	; 0x39
 8005abe:	d80e      	bhi.n	8005ade <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005ac6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3b30      	subs	r3, #48	; 0x30
 8005ada:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005adc:	e7e4      	b.n	8005aa8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005aea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005aee:	2b2e      	cmp	r3, #46	; 0x2e
 8005af0:	d11d      	bne.n	8005b2e <_VPrintTarget+0x18a>
        sFormat++;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3301      	adds	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005b00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b04:	2b2f      	cmp	r3, #47	; 0x2f
 8005b06:	d912      	bls.n	8005b2e <_VPrintTarget+0x18a>
 8005b08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b0c:	2b39      	cmp	r3, #57	; 0x39
 8005b0e:	d80e      	bhi.n	8005b2e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	461a      	mov	r2, r3
 8005b22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b26:	4413      	add	r3, r2
 8005b28:	3b30      	subs	r3, #48	; 0x30
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005b2c:	e7e4      	b.n	8005af8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b3a:	2b6c      	cmp	r3, #108	; 0x6c
 8005b3c:	d003      	beq.n	8005b46 <_VPrintTarget+0x1a2>
 8005b3e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b42:	2b68      	cmp	r3, #104	; 0x68
 8005b44:	d107      	bne.n	8005b56 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b54:	e7ef      	b.n	8005b36 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b5a:	2b25      	cmp	r3, #37	; 0x25
 8005b5c:	f000 80d8 	beq.w	8005d10 <_VPrintTarget+0x36c>
 8005b60:	2b25      	cmp	r3, #37	; 0x25
 8005b62:	f2c0 80dc 	blt.w	8005d1e <_VPrintTarget+0x37a>
 8005b66:	2b78      	cmp	r3, #120	; 0x78
 8005b68:	f300 80d9 	bgt.w	8005d1e <_VPrintTarget+0x37a>
 8005b6c:	2b58      	cmp	r3, #88	; 0x58
 8005b6e:	f2c0 80d6 	blt.w	8005d1e <_VPrintTarget+0x37a>
 8005b72:	3b58      	subs	r3, #88	; 0x58
 8005b74:	2b20      	cmp	r3, #32
 8005b76:	f200 80d2 	bhi.w	8005d1e <_VPrintTarget+0x37a>
 8005b7a:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <_VPrintTarget+0x1dc>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005c77 	.word	0x08005c77
 8005b84:	08005d1f 	.word	0x08005d1f
 8005b88:	08005d1f 	.word	0x08005d1f
 8005b8c:	08005d1f 	.word	0x08005d1f
 8005b90:	08005d1f 	.word	0x08005d1f
 8005b94:	08005d1f 	.word	0x08005d1f
 8005b98:	08005d1f 	.word	0x08005d1f
 8005b9c:	08005d1f 	.word	0x08005d1f
 8005ba0:	08005d1f 	.word	0x08005d1f
 8005ba4:	08005d1f 	.word	0x08005d1f
 8005ba8:	08005d1f 	.word	0x08005d1f
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c2b 	.word	0x08005c2b
 8005bb4:	08005d1f 	.word	0x08005d1f
 8005bb8:	08005d1f 	.word	0x08005d1f
 8005bbc:	08005d1f 	.word	0x08005d1f
 8005bc0:	08005d1f 	.word	0x08005d1f
 8005bc4:	08005d1f 	.word	0x08005d1f
 8005bc8:	08005d1f 	.word	0x08005d1f
 8005bcc:	08005d1f 	.word	0x08005d1f
 8005bd0:	08005d1f 	.word	0x08005d1f
 8005bd4:	08005d1f 	.word	0x08005d1f
 8005bd8:	08005d1f 	.word	0x08005d1f
 8005bdc:	08005d1f 	.word	0x08005d1f
 8005be0:	08005ceb 	.word	0x08005ceb
 8005be4:	08005d1f 	.word	0x08005d1f
 8005be8:	08005d1f 	.word	0x08005d1f
 8005bec:	08005ca1 	.word	0x08005ca1
 8005bf0:	08005d1f 	.word	0x08005d1f
 8005bf4:	08005c51 	.word	0x08005c51
 8005bf8:	08005d1f 	.word	0x08005d1f
 8005bfc:	08005d1f 	.word	0x08005d1f
 8005c00:	08005c77 	.word	0x08005c77
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	1d19      	adds	r1, r3, #4
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	6011      	str	r1, [r2, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        _StoreChar(&BufferDesc, c0);
 8005c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c1c:	f107 0310 	add.w	r3, r7, #16
 8005c20:	4611      	mov	r1, r2
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7ff fd1c 	bl	8005660 <_StoreChar>
        break;
 8005c28:	e07a      	b.n	8005d20 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1d19      	adds	r1, r3, #4
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6011      	str	r1, [r2, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c38:	f107 0010 	add.w	r0, r7, #16
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	220a      	movs	r2, #10
 8005c48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c4a:	f7ff fe1b 	bl	8005884 <_PrintInt>
        break;
 8005c4e:	e067      	b.n	8005d20 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	1d19      	adds	r1, r3, #4
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6011      	str	r1, [r2, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c60:	f107 0010 	add.w	r0, r7, #16
 8005c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c66:	9301      	str	r3, [sp, #4]
 8005c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	220a      	movs	r2, #10
 8005c70:	f7ff fd72 	bl	8005758 <_PrintUnsigned>
        break;
 8005c74:	e054      	b.n	8005d20 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	1d19      	adds	r1, r3, #4
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6011      	str	r1, [r2, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005c84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c86:	f107 0010 	add.w	r0, r7, #16
 8005c8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8c:	9301      	str	r3, [sp, #4]
 8005c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	2210      	movs	r2, #16
 8005c96:	f7ff fd5f 	bl	8005758 <_PrintUnsigned>
        break;
 8005c9a:	e041      	b.n	8005d20 <_VPrintTarget+0x37c>
 8005c9c:	20005fa8 	.word	0x20005fa8
      case 's':
        s = va_arg(*pParamList, const char*);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	1d19      	adds	r1, r3, #4
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6011      	str	r1, [r2, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	643b      	str	r3, [r7, #64]	; 0x40
        if (s == NULL) {
 8005cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <_VPrintTarget+0x314>
          s = "(null)";
 8005cb4:	4b4a      	ldr	r3, [pc, #296]	; (8005de0 <_VPrintTarget+0x43c>)
 8005cb6:	643b      	str	r3, [r7, #64]	; 0x40
        }
        do {
          c = *s;
 8005cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          s++;
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	643b      	str	r3, [r7, #64]	; 0x40
          if (c == '\0') {
 8005cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00b      	beq.n	8005ce6 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005cce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005cd2:	f107 0310 	add.w	r3, r7, #16
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fcc1 	bl	8005660 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce2:	d9e9      	bls.n	8005cb8 <_VPrintTarget+0x314>
        break;
 8005ce4:	e01c      	b.n	8005d20 <_VPrintTarget+0x37c>
            break;
 8005ce6:	bf00      	nop
        break;
 8005ce8:	e01a      	b.n	8005d20 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6011      	str	r1, [r2, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005cf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cfa:	f107 0010 	add.w	r0, r7, #16
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	2308      	movs	r3, #8
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	2308      	movs	r3, #8
 8005d08:	2210      	movs	r2, #16
 8005d0a:	f7ff fd25 	bl	8005758 <_PrintUnsigned>
        break;
 8005d0e:	e007      	b.n	8005d20 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005d10:	f107 0310 	add.w	r3, r7, #16
 8005d14:	2125      	movs	r1, #37	; 0x25
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff fca2 	bl	8005660 <_StoreChar>
        break;
 8005d1c:	e000      	b.n	8005d20 <_VPrintTarget+0x37c>
      default:
        break;
 8005d1e:	bf00      	nop
      }
      sFormat++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e007      	b.n	8005d38 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d28:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005d2c:	f107 0310 	add.w	r3, r7, #16
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fc94 	bl	8005660 <_StoreChar>
    }
  } while (*sFormat);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	f47f ae4d 	bne.w	80059dc <_VPrintTarget+0x38>
 8005d42:	e000      	b.n	8005d46 <_VPrintTarget+0x3a2>
      break;
 8005d44:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d46:	6a3b      	ldr	r3, [r7, #32]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d041      	beq.n	8005dd0 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	b2d2      	uxtb	r2, r2
 8005d52:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d5c:	e00b      	b.n	8005d76 <_VPrintTarget+0x3d2>
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d64:	1c59      	adds	r1, r3, #1
 8005d66:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005d68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
 8005d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d72:	09db      	lsrs	r3, r3, #7
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	2b7f      	cmp	r3, #127	; 0x7f
 8005d7a:	d8f0      	bhi.n	8005d5e <_VPrintTarget+0x3ba>
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005d82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d84:	b2d2      	uxtb	r2, r2
 8005d86:	701a      	strb	r2, [r3, #0]
 8005d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8a:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d90:	2300      	movs	r3, #0
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
 8005d94:	e00b      	b.n	8005dae <_VPrintTarget+0x40a>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	1c59      	adds	r1, r3, #1
 8005d9e:	6379      	str	r1, [r7, #52]	; 0x34
 8005da0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	09db      	lsrs	r3, r3, #7
 8005dac:	633b      	str	r3, [r7, #48]	; 0x30
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b7f      	cmp	r3, #127	; 0x7f
 8005db2:	d8f0      	bhi.n	8005d96 <_VPrintTarget+0x3f2>
 8005db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	637a      	str	r2, [r7, #52]	; 0x34
 8005dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dbc:	b2d2      	uxtb	r2, r2
 8005dbe:	701a      	strb	r2, [r3, #0]
 8005dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc2:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	6979      	ldr	r1, [r7, #20]
 8005dc8:	221a      	movs	r2, #26
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fada 	bl	8005384 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd2:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005dd6:	bf00      	nop
 8005dd8:	3758      	adds	r7, #88	; 0x58
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	080076ec 	.word	0x080076ec

08005de4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005df2:	2300      	movs	r3, #0
 8005df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005df8:	4917      	ldr	r1, [pc, #92]	; (8005e58 <SEGGER_SYSVIEW_Init+0x74>)
 8005dfa:	4818      	ldr	r0, [pc, #96]	; (8005e5c <SEGGER_SYSVIEW_Init+0x78>)
 8005dfc:	f7ff f8d6 	bl	8004fac <SEGGER_RTT_AllocUpBuffer>
 8005e00:	4603      	mov	r3, r0
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e06:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005e08:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e0a:	785a      	ldrb	r2, [r3, #1]
 8005e0c:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e0e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005e10:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e12:	7e1b      	ldrb	r3, [r3, #24]
 8005e14:	4618      	mov	r0, r3
 8005e16:	2300      	movs	r3, #0
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	4a11      	ldr	r2, [pc, #68]	; (8005e64 <SEGGER_SYSVIEW_Init+0x80>)
 8005e1e:	490f      	ldr	r1, [pc, #60]	; (8005e5c <SEGGER_SYSVIEW_Init+0x78>)
 8005e20:	f7ff f948 	bl	80050b4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e24:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	; (8005e68 <SEGGER_SYSVIEW_Init+0x84>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e30:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e32:	4a0b      	ldr	r2, [pc, #44]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e38:	4a09      	ldr	r2, [pc, #36]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e44:	4a06      	ldr	r2, [pc, #24]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <SEGGER_SYSVIEW_Init+0x7c>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e50:	bf00      	nop
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20004f70 	.word	0x20004f70
 8005e5c:	080076f4 	.word	0x080076f4
 8005e60:	20005f78 	.word	0x20005f78
 8005e64:	20005f70 	.word	0x20005f70
 8005e68:	e0001004 	.word	0xe0001004

08005e6c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6113      	str	r3, [r2, #16]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	20005f78 	.word	0x20005f78

08005e8c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e94:	f3ef 8311 	mrs	r3, BASEPRI
 8005e98:	f04f 0120 	mov.w	r1, #32
 8005e9c:	f381 8811 	msr	BASEPRI, r1
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	4808      	ldr	r0, [pc, #32]	; (8005ec4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ea4:	f7ff f982 	bl	80051ac <_PreparePacket>
 8005ea8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	68b8      	ldr	r0, [r7, #8]
 8005eb0:	f7ff fa68 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f383 8811 	msr	BASEPRI, r3
}
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20005fa8 	.word	0x20005fa8

08005ec8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ed2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed6:	f04f 0120 	mov.w	r1, #32
 8005eda:	f381 8811 	msr	BASEPRI, r1
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	4816      	ldr	r0, [pc, #88]	; (8005f3c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ee2:	f7ff f963 	bl	80051ac <_PreparePacket>
 8005ee6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	e00b      	b.n	8005f0e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	b2da      	uxtb	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	1c59      	adds	r1, r3, #1
 8005efe:	61f9      	str	r1, [r7, #28]
 8005f00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f04:	b2d2      	uxtb	r2, r2
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	09db      	lsrs	r3, r3, #7
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b7f      	cmp	r3, #127	; 0x7f
 8005f12:	d8f0      	bhi.n	8005ef6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	61fa      	str	r2, [r7, #28]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	68f9      	ldr	r1, [r7, #12]
 8005f28:	6938      	ldr	r0, [r7, #16]
 8005f2a:	f7ff fa2b 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f383 8811 	msr	BASEPRI, r3
}
 8005f34:	bf00      	nop
 8005f36:	3720      	adds	r7, #32
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20005fa8 	.word	0x20005fa8

08005f40 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b08c      	sub	sp, #48	; 0x30
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f50:	f04f 0120 	mov.w	r1, #32
 8005f54:	f381 8811 	msr	BASEPRI, r1
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	4825      	ldr	r0, [pc, #148]	; (8005ff0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f5c:	f7ff f926 	bl	80051ac <_PreparePacket>
 8005f60:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6e:	e00b      	b.n	8005f88 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	1c59      	adds	r1, r3, #1
 8005f78:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f7a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	09db      	lsrs	r3, r3, #7
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f8c:	d8f0      	bhi.n	8005f70 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	e00b      	b.n	8005fc0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1c59      	adds	r1, r3, #1
 8005fb0:	6279      	str	r1, [r7, #36]	; 0x24
 8005fb2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb6:	b2d2      	uxtb	r2, r2
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	09db      	lsrs	r3, r3, #7
 8005fbe:	623b      	str	r3, [r7, #32]
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc4:	d8f0      	bhi.n	8005fa8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	627a      	str	r2, [r7, #36]	; 0x24
 8005fcc:	6a3a      	ldr	r2, [r7, #32]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	6979      	ldr	r1, [r7, #20]
 8005fda:	69b8      	ldr	r0, [r7, #24]
 8005fdc:	f7ff f9d2 	bl	8005384 <_SendPacket>
  RECORD_END();
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	f383 8811 	msr	BASEPRI, r3
}
 8005fe6:	bf00      	nop
 8005fe8:	3730      	adds	r7, #48	; 0x30
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20005fa8 	.word	0x20005fa8

08005ff4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b08e      	sub	sp, #56	; 0x38
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006002:	f3ef 8311 	mrs	r3, BASEPRI
 8006006:	f04f 0120 	mov.w	r1, #32
 800600a:	f381 8811 	msr	BASEPRI, r1
 800600e:	61fb      	str	r3, [r7, #28]
 8006010:	4832      	ldr	r0, [pc, #200]	; (80060dc <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006012:	f7ff f8cb 	bl	80051ac <_PreparePacket>
 8006016:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	633b      	str	r3, [r7, #48]	; 0x30
 8006024:	e00b      	b.n	800603e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	b2da      	uxtb	r2, r3
 800602a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	6379      	str	r1, [r7, #52]	; 0x34
 8006030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	2b7f      	cmp	r3, #127	; 0x7f
 8006042:	d8f0      	bhi.n	8006026 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	637a      	str	r2, [r7, #52]	; 0x34
 800604a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006052:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	62bb      	str	r3, [r7, #40]	; 0x28
 800605c:	e00b      	b.n	8006076 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800605e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006060:	b2da      	uxtb	r2, r3
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	1c59      	adds	r1, r3, #1
 8006066:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006068:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006072:	09db      	lsrs	r3, r3, #7
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	2b7f      	cmp	r3, #127	; 0x7f
 800607a:	d8f0      	bhi.n	800605e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	e00b      	b.n	80060ae <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	b2da      	uxtb	r2, r3
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	6279      	str	r1, [r7, #36]	; 0x24
 80060a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	09db      	lsrs	r3, r3, #7
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	2b7f      	cmp	r3, #127	; 0x7f
 80060b2:	d8f0      	bhi.n	8006096 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	627a      	str	r2, [r7, #36]	; 0x24
 80060ba:	6a3a      	ldr	r2, [r7, #32]
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	6979      	ldr	r1, [r7, #20]
 80060c8:	69b8      	ldr	r0, [r7, #24]
 80060ca:	f7ff f95b 	bl	8005384 <_SendPacket>
  RECORD_END();
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f383 8811 	msr	BASEPRI, r3
}
 80060d4:	bf00      	nop
 80060d6:	3738      	adds	r7, #56	; 0x38
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	20005fa8 	.word	0x20005fa8

080060e0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b090      	sub	sp, #64	; 0x40
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060ee:	f3ef 8311 	mrs	r3, BASEPRI
 80060f2:	f04f 0120 	mov.w	r1, #32
 80060f6:	f381 8811 	msr	BASEPRI, r1
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	4840      	ldr	r0, [pc, #256]	; (8006200 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80060fe:	f7ff f855 	bl	80051ac <_PreparePacket>
 8006102:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006110:	e00b      	b.n	800612a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800611c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	63bb      	str	r3, [r7, #56]	; 0x38
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	2b7f      	cmp	r3, #127	; 0x7f
 800612e:	d8f0      	bhi.n	8006112 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006136:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800613e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	633b      	str	r3, [r7, #48]	; 0x30
 8006148:	e00b      	b.n	8006162 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	b2da      	uxtb	r2, r3
 800614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	6379      	str	r1, [r7, #52]	; 0x34
 8006154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	09db      	lsrs	r3, r3, #7
 8006160:	633b      	str	r3, [r7, #48]	; 0x30
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	2b7f      	cmp	r3, #127	; 0x7f
 8006166:	d8f0      	bhi.n	800614a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	637a      	str	r2, [r7, #52]	; 0x34
 800616e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006176:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006180:	e00b      	b.n	800619a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	b2da      	uxtb	r2, r3
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	1c59      	adds	r1, r3, #1
 800618a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800618c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006190:	b2d2      	uxtb	r2, r2
 8006192:	701a      	strb	r2, [r3, #0]
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	09db      	lsrs	r3, r3, #7
 8006198:	62bb      	str	r3, [r7, #40]	; 0x28
 800619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619c:	2b7f      	cmp	r3, #127	; 0x7f
 800619e:	d8f0      	bhi.n	8006182 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
 80061b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	e00b      	b.n	80061d2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	6279      	str	r1, [r7, #36]	; 0x24
 80061c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	2b7f      	cmp	r3, #127	; 0x7f
 80061d6:	d8f0      	bhi.n	80061ba <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	627a      	str	r2, [r7, #36]	; 0x24
 80061de:	6a3a      	ldr	r2, [r7, #32]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	6979      	ldr	r1, [r7, #20]
 80061ec:	69b8      	ldr	r0, [r7, #24]
 80061ee:	f7ff f8c9 	bl	8005384 <_SendPacket>
  RECORD_END();
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	f383 8811 	msr	BASEPRI, r3
}
 80061f8:	bf00      	nop
 80061fa:	3740      	adds	r7, #64	; 0x40
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	20005fa8 	.word	0x20005fa8

08006204 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	; 0x30
 8006208:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800620a:	4b58      	ldr	r3, [pc, #352]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 800620c:	2201      	movs	r2, #1
 800620e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006210:	f3ef 8311 	mrs	r3, BASEPRI
 8006214:	f04f 0120 	mov.w	r1, #32
 8006218:	f381 8811 	msr	BASEPRI, r1
 800621c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800621e:	4b53      	ldr	r3, [pc, #332]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	220a      	movs	r2, #10
 8006224:	4952      	ldr	r1, [pc, #328]	; (8006370 <SEGGER_SYSVIEW_Start+0x16c>)
 8006226:	4618      	mov	r0, r3
 8006228:	f7f9 ffd2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006232:	200a      	movs	r0, #10
 8006234:	f7ff fe2a 	bl	8005e8c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006238:	f3ef 8311 	mrs	r3, BASEPRI
 800623c:	f04f 0120 	mov.w	r1, #32
 8006240:	f381 8811 	msr	BASEPRI, r1
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	484b      	ldr	r0, [pc, #300]	; (8006374 <SEGGER_SYSVIEW_Start+0x170>)
 8006248:	f7fe ffb0 	bl	80051ac <_PreparePacket>
 800624c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006256:	4b45      	ldr	r3, [pc, #276]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
 800625c:	e00b      	b.n	8006276 <SEGGER_SYSVIEW_Start+0x72>
 800625e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006260:	b2da      	uxtb	r2, r3
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006268:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	2b7f      	cmp	r3, #127	; 0x7f
 800627a:	d8f0      	bhi.n	800625e <SEGGER_SYSVIEW_Start+0x5a>
 800627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006282:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	627b      	str	r3, [r7, #36]	; 0x24
 8006290:	4b36      	ldr	r3, [pc, #216]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	e00b      	b.n	80062b0 <SEGGER_SYSVIEW_Start+0xac>
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	6279      	str	r1, [r7, #36]	; 0x24
 80062a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	09db      	lsrs	r3, r3, #7
 80062ae:	623b      	str	r3, [r7, #32]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	2b7f      	cmp	r3, #127	; 0x7f
 80062b4:	d8f0      	bhi.n	8006298 <SEGGER_SYSVIEW_Start+0x94>
 80062b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b8:	1c5a      	adds	r2, r3, #1
 80062ba:	627a      	str	r2, [r7, #36]	; 0x24
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	61fb      	str	r3, [r7, #28]
 80062ca:	4b28      	ldr	r3, [pc, #160]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	61bb      	str	r3, [r7, #24]
 80062d0:	e00b      	b.n	80062ea <SEGGER_SYSVIEW_Start+0xe6>
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	1c59      	adds	r1, r3, #1
 80062da:	61f9      	str	r1, [r7, #28]
 80062dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	09db      	lsrs	r3, r3, #7
 80062e8:	61bb      	str	r3, [r7, #24]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b7f      	cmp	r3, #127	; 0x7f
 80062ee:	d8f0      	bhi.n	80062d2 <SEGGER_SYSVIEW_Start+0xce>
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	1c5a      	adds	r2, r3, #1
 80062f4:	61fa      	str	r2, [r7, #28]
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	e00b      	b.n	8006322 <SEGGER_SYSVIEW_Start+0x11e>
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	6179      	str	r1, [r7, #20]
 8006314:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b7f      	cmp	r3, #127	; 0x7f
 8006326:	d8f0      	bhi.n	800630a <SEGGER_SYSVIEW_Start+0x106>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	617a      	str	r2, [r7, #20]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006338:	2218      	movs	r2, #24
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f7ff f821 	bl	8005384 <_SendPacket>
      RECORD_END();
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006348:	4b08      	ldr	r3, [pc, #32]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <SEGGER_SYSVIEW_Start+0x168>)
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006356:	f000 f9eb 	bl	8006730 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800635a:	f000 f9b1 	bl	80066c0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800635e:	f000 fbb3 	bl	8006ac8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006362:	bf00      	nop
 8006364:	3730      	adds	r7, #48	; 0x30
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20005f78 	.word	0x20005f78
 8006370:	08007730 	.word	0x08007730
 8006374:	20005fa8 	.word	0x20005fa8

08006378 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800637e:	f3ef 8311 	mrs	r3, BASEPRI
 8006382:	f04f 0120 	mov.w	r1, #32
 8006386:	f381 8811 	msr	BASEPRI, r1
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	480b      	ldr	r0, [pc, #44]	; (80063bc <SEGGER_SYSVIEW_Stop+0x44>)
 800638e:	f7fe ff0d 	bl	80051ac <_PreparePacket>
 8006392:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006394:	4b0a      	ldr	r3, [pc, #40]	; (80063c0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800639c:	220b      	movs	r2, #11
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6838      	ldr	r0, [r7, #0]
 80063a2:	f7fe ffef 	bl	8005384 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <SEGGER_SYSVIEW_Stop+0x48>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f383 8811 	msr	BASEPRI, r3
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20005fa8 	.word	0x20005fa8
 80063c0:	20005f78 	.word	0x20005f78

080063c4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08c      	sub	sp, #48	; 0x30
 80063c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80063ca:	f3ef 8311 	mrs	r3, BASEPRI
 80063ce:	f04f 0120 	mov.w	r1, #32
 80063d2:	f381 8811 	msr	BASEPRI, r1
 80063d6:	60fb      	str	r3, [r7, #12]
 80063d8:	4845      	ldr	r0, [pc, #276]	; (80064f0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80063da:	f7fe fee7 	bl	80051ac <_PreparePacket>
 80063de:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063e8:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ee:	e00b      	b.n	8006408 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	1c59      	adds	r1, r3, #1
 80063f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fe:	b2d2      	uxtb	r2, r2
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	09db      	lsrs	r3, r3, #7
 8006406:	62bb      	str	r3, [r7, #40]	; 0x28
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	2b7f      	cmp	r3, #127	; 0x7f
 800640c:	d8f0      	bhi.n	80063f0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	627b      	str	r3, [r7, #36]	; 0x24
 8006422:	4b34      	ldr	r3, [pc, #208]	; (80064f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	623b      	str	r3, [r7, #32]
 8006428:	e00b      	b.n	8006442 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800642a:	6a3b      	ldr	r3, [r7, #32]
 800642c:	b2da      	uxtb	r2, r3
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	6279      	str	r1, [r7, #36]	; 0x24
 8006434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	09db      	lsrs	r3, r3, #7
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	2b7f      	cmp	r3, #127	; 0x7f
 8006446:	d8f0      	bhi.n	800642a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	627a      	str	r2, [r7, #36]	; 0x24
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	61fb      	str	r3, [r7, #28]
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	e00b      	b.n	800647c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	1c59      	adds	r1, r3, #1
 800646c:	61f9      	str	r1, [r7, #28]
 800646e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	09db      	lsrs	r3, r3, #7
 800647a:	61bb      	str	r3, [r7, #24]
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	2b7f      	cmp	r3, #127	; 0x7f
 8006480:	d8f0      	bhi.n	8006464 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	61fa      	str	r2, [r7, #28]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	617b      	str	r3, [r7, #20]
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	e00b      	b.n	80064b4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	6179      	str	r1, [r7, #20]
 80064a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	09db      	lsrs	r3, r3, #7
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2b7f      	cmp	r3, #127	; 0x7f
 80064b8:	d8f0      	bhi.n	800649c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	1c5a      	adds	r2, r3, #1
 80064be:	617a      	str	r2, [r7, #20]
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80064ca:	2218      	movs	r2, #24
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	68b8      	ldr	r0, [r7, #8]
 80064d0:	f7fe ff58 	bl	8005384 <_SendPacket>
  RECORD_END();
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	4798      	blx	r3
  }
}
 80064e8:	bf00      	nop
 80064ea:	3730      	adds	r7, #48	; 0x30
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20005fa8 	.word	0x20005fa8
 80064f4:	20005f78 	.word	0x20005f78

080064f8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b092      	sub	sp, #72	; 0x48
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006500:	f3ef 8311 	mrs	r3, BASEPRI
 8006504:	f04f 0120 	mov.w	r1, #32
 8006508:	f381 8811 	msr	BASEPRI, r1
 800650c:	617b      	str	r3, [r7, #20]
 800650e:	486a      	ldr	r0, [pc, #424]	; (80066b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006510:	f7fe fe4c 	bl	80051ac <_PreparePacket>
 8006514:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	647b      	str	r3, [r7, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4b66      	ldr	r3, [pc, #408]	; (80066bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	643b      	str	r3, [r7, #64]	; 0x40
 800652a:	e00b      	b.n	8006544 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800652e:	b2da      	uxtb	r2, r3
 8006530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	6479      	str	r1, [r7, #68]	; 0x44
 8006536:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	643b      	str	r3, [r7, #64]	; 0x40
 8006544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006546:	2b7f      	cmp	r3, #127	; 0x7f
 8006548:	d8f0      	bhi.n	800652c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800654a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	647a      	str	r2, [r7, #68]	; 0x44
 8006550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006558:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	63bb      	str	r3, [r7, #56]	; 0x38
 8006564:	e00b      	b.n	800657e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006568:	b2da      	uxtb	r2, r3
 800656a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656c:	1c59      	adds	r1, r3, #1
 800656e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006570:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006574:	b2d2      	uxtb	r2, r2
 8006576:	701a      	strb	r2, [r3, #0]
 8006578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800657a:	09db      	lsrs	r3, r3, #7
 800657c:	63bb      	str	r3, [r7, #56]	; 0x38
 800657e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006580:	2b7f      	cmp	r3, #127	; 0x7f
 8006582:	d8f0      	bhi.n	8006566 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	63fa      	str	r2, [r7, #60]	; 0x3c
 800658a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006592:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	4619      	mov	r1, r3
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f7fe fdd5 	bl	800514c <_EncodeStr>
 80065a2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80065a4:	2209      	movs	r2, #9
 80065a6:	68f9      	ldr	r1, [r7, #12]
 80065a8:	6938      	ldr	r0, [r7, #16]
 80065aa:	f7fe feeb 	bl	8005384 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b40      	ldr	r3, [pc, #256]	; (80066bc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	633b      	str	r3, [r7, #48]	; 0x30
 80065c2:	e00b      	b.n	80065dc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80065c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ca:	1c59      	adds	r1, r3, #1
 80065cc:	6379      	str	r1, [r7, #52]	; 0x34
 80065ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d2:	b2d2      	uxtb	r2, r2
 80065d4:	701a      	strb	r2, [r3, #0]
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	09db      	lsrs	r3, r3, #7
 80065da:	633b      	str	r3, [r7, #48]	; 0x30
 80065dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065de:	2b7f      	cmp	r3, #127	; 0x7f
 80065e0:	d8f0      	bhi.n	80065c4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80065e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e4:	1c5a      	adds	r2, r3, #1
 80065e6:	637a      	str	r2, [r7, #52]	; 0x34
 80065e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ea:	b2d2      	uxtb	r2, r2
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80065fc:	e00b      	b.n	8006616 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	b2da      	uxtb	r2, r3
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	1c59      	adds	r1, r3, #1
 8006606:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006608:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	09db      	lsrs	r3, r3, #7
 8006614:	62bb      	str	r3, [r7, #40]	; 0x28
 8006616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006618:	2b7f      	cmp	r3, #127	; 0x7f
 800661a:	d8f0      	bhi.n	80065fe <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006624:	b2d2      	uxtb	r2, r2
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	e00b      	b.n	8006650 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	6279      	str	r1, [r7, #36]	; 0x24
 8006642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	09db      	lsrs	r3, r3, #7
 800664e:	623b      	str	r3, [r7, #32]
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	2b7f      	cmp	r3, #127	; 0x7f
 8006654:	d8f0      	bhi.n	8006638 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	627a      	str	r2, [r7, #36]	; 0x24
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	61bb      	str	r3, [r7, #24]
 8006670:	e00b      	b.n	800668a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	b2da      	uxtb	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	1c59      	adds	r1, r3, #1
 800667a:	61f9      	str	r1, [r7, #28]
 800667c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006680:	b2d2      	uxtb	r2, r2
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	09db      	lsrs	r3, r3, #7
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b7f      	cmp	r3, #127	; 0x7f
 800668e:	d8f0      	bhi.n	8006672 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	1c5a      	adds	r2, r3, #1
 8006694:	61fa      	str	r2, [r7, #28]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80066a0:	2215      	movs	r2, #21
 80066a2:	68f9      	ldr	r1, [r7, #12]
 80066a4:	6938      	ldr	r0, [r7, #16]
 80066a6:	f7fe fe6d 	bl	8005384 <_SendPacket>
  RECORD_END();
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f383 8811 	msr	BASEPRI, r3
}
 80066b0:	bf00      	nop
 80066b2:	3748      	adds	r7, #72	; 0x48
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20005fa8 	.word	0x20005fa8
 80066bc:	20005f78 	.word	0x20005f78

080066c0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d008      	beq.n	80066de <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80066d6:	4b03      	ldr	r3, [pc, #12]	; (80066e4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4798      	blx	r3
  }
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20005f78 	.word	0x20005f78

080066e8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80066f0:	f3ef 8311 	mrs	r3, BASEPRI
 80066f4:	f04f 0120 	mov.w	r1, #32
 80066f8:	f381 8811 	msr	BASEPRI, r1
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	480b      	ldr	r0, [pc, #44]	; (800672c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006700:	f7fe fd54 	bl	80051ac <_PreparePacket>
 8006704:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006706:	2280      	movs	r2, #128	; 0x80
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	6938      	ldr	r0, [r7, #16]
 800670c:	f7fe fd1e 	bl	800514c <_EncodeStr>
 8006710:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006712:	220e      	movs	r2, #14
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	6938      	ldr	r0, [r7, #16]
 8006718:	f7fe fe34 	bl	8005384 <_SendPacket>
  RECORD_END();
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f383 8811 	msr	BASEPRI, r3
}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20005fa8 	.word	0x20005fa8

08006730 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006736:	4b15      	ldr	r3, [pc, #84]	; (800678c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d01a      	beq.n	8006774 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d015      	beq.n	8006774 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4798      	blx	r3
 8006750:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006754:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800675a:	f04f 0200 	mov.w	r2, #0
 800675e:	f04f 0300 	mov.w	r3, #0
 8006762:	000a      	movs	r2, r1
 8006764:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006766:	4613      	mov	r3, r2
 8006768:	461a      	mov	r2, r3
 800676a:	4621      	mov	r1, r4
 800676c:	200d      	movs	r0, #13
 800676e:	f7ff fbe7 	bl	8005f40 <SEGGER_SYSVIEW_RecordU32x2>
 8006772:	e006      	b.n	8006782 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006774:	4b06      	ldr	r3, [pc, #24]	; (8006790 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4619      	mov	r1, r3
 800677a:	200c      	movs	r0, #12
 800677c:	f7ff fba4 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006780:	bf00      	nop
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bd90      	pop	{r4, r7, pc}
 800678a:	bf00      	nop
 800678c:	20005f78 	.word	0x20005f78
 8006790:	e0001004 	.word	0xe0001004

08006794 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800679a:	f3ef 8311 	mrs	r3, BASEPRI
 800679e:	f04f 0120 	mov.w	r1, #32
 80067a2:	f381 8811 	msr	BASEPRI, r1
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	4807      	ldr	r0, [pc, #28]	; (80067c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067aa:	f7fe fcff 	bl	80051ac <_PreparePacket>
 80067ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067b0:	2211      	movs	r2, #17
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6838      	ldr	r0, [r7, #0]
 80067b6:	f7fe fde5 	bl	8005384 <_SendPacket>
  RECORD_END();
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f383 8811 	msr	BASEPRI, r3
}
 80067c0:	bf00      	nop
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	20005fa8 	.word	0x20005fa8

080067cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067d4:	f3ef 8311 	mrs	r3, BASEPRI
 80067d8:	f04f 0120 	mov.w	r1, #32
 80067dc:	f381 8811 	msr	BASEPRI, r1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	4819      	ldr	r0, [pc, #100]	; (8006848 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80067e4:	f7fe fce2 	bl	80051ac <_PreparePacket>
 80067e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067ee:	4b17      	ldr	r3, [pc, #92]	; (800684c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	61fb      	str	r3, [r7, #28]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	e00b      	b.n	800681a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	61f9      	str	r1, [r7, #28]
 800680c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	09db      	lsrs	r3, r3, #7
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b7f      	cmp	r3, #127	; 0x7f
 800681e:	d8f0      	bhi.n	8006802 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	61fa      	str	r2, [r7, #28]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006830:	2208      	movs	r2, #8
 8006832:	68f9      	ldr	r1, [r7, #12]
 8006834:	6938      	ldr	r0, [r7, #16]
 8006836:	f7fe fda5 	bl	8005384 <_SendPacket>
  RECORD_END();
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f383 8811 	msr	BASEPRI, r3
}
 8006840:	bf00      	nop
 8006842:	3720      	adds	r7, #32
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20005fa8 	.word	0x20005fa8
 800684c:	20005f78 	.word	0x20005f78

08006850 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b088      	sub	sp, #32
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006858:	f3ef 8311 	mrs	r3, BASEPRI
 800685c:	f04f 0120 	mov.w	r1, #32
 8006860:	f381 8811 	msr	BASEPRI, r1
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	4819      	ldr	r0, [pc, #100]	; (80068cc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006868:	f7fe fca0 	bl	80051ac <_PreparePacket>
 800686c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	61fb      	str	r3, [r7, #28]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	e00b      	b.n	800689e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	1c59      	adds	r1, r3, #1
 800688e:	61f9      	str	r1, [r7, #28]
 8006890:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	09db      	lsrs	r3, r3, #7
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b7f      	cmp	r3, #127	; 0x7f
 80068a2:	d8f0      	bhi.n	8006886 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	61fa      	str	r2, [r7, #28]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80068b4:	2204      	movs	r2, #4
 80068b6:	68f9      	ldr	r1, [r7, #12]
 80068b8:	6938      	ldr	r0, [r7, #16]
 80068ba:	f7fe fd63 	bl	8005384 <_SendPacket>
  RECORD_END();
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	f383 8811 	msr	BASEPRI, r3
}
 80068c4:	bf00      	nop
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20005fa8 	.word	0x20005fa8
 80068d0:	20005f78 	.word	0x20005f78

080068d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b088      	sub	sp, #32
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068dc:	f3ef 8311 	mrs	r3, BASEPRI
 80068e0:	f04f 0120 	mov.w	r1, #32
 80068e4:	f381 8811 	msr	BASEPRI, r1
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	4819      	ldr	r0, [pc, #100]	; (8006950 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80068ec:	f7fe fc5e 	bl	80051ac <_PreparePacket>
 80068f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068f6:	4b17      	ldr	r3, [pc, #92]	; (8006954 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	e00b      	b.n	8006922 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	b2da      	uxtb	r2, r3
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	1c59      	adds	r1, r3, #1
 8006912:	61f9      	str	r1, [r7, #28]
 8006914:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006918:	b2d2      	uxtb	r2, r2
 800691a:	701a      	strb	r2, [r3, #0]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	09db      	lsrs	r3, r3, #7
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	2b7f      	cmp	r3, #127	; 0x7f
 8006926:	d8f0      	bhi.n	800690a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	61fa      	str	r2, [r7, #28]
 800692e:	69ba      	ldr	r2, [r7, #24]
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006938:	2206      	movs	r2, #6
 800693a:	68f9      	ldr	r1, [r7, #12]
 800693c:	6938      	ldr	r0, [r7, #16]
 800693e:	f7fe fd21 	bl	8005384 <_SendPacket>
  RECORD_END();
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f383 8811 	msr	BASEPRI, r3
}
 8006948:	bf00      	nop
 800694a:	3720      	adds	r7, #32
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	20005fa8 	.word	0x20005fa8
 8006954:	20005f78 	.word	0x20005f78

08006958 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	1ad3      	subs	r3, r2, r3
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20005f78 	.word	0x20005f78

08006978 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b08c      	sub	sp, #48	; 0x30
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006982:	4b40      	ldr	r3, [pc, #256]	; (8006a84 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d077      	beq.n	8006a7a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800698a:	4b3e      	ldr	r3, [pc, #248]	; (8006a84 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006990:	2300      	movs	r3, #0
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
 8006994:	e008      	b.n	80069a8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d007      	beq.n	80069b2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	3301      	adds	r3, #1
 80069a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d3f2      	bcc.n	8006996 <SEGGER_SYSVIEW_SendModule+0x1e>
 80069b0:	e000      	b.n	80069b4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80069b2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d055      	beq.n	8006a66 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069ba:	f3ef 8311 	mrs	r3, BASEPRI
 80069be:	f04f 0120 	mov.w	r1, #32
 80069c2:	f381 8811 	msr	BASEPRI, r1
 80069c6:	617b      	str	r3, [r7, #20]
 80069c8:	482f      	ldr	r0, [pc, #188]	; (8006a88 <SEGGER_SYSVIEW_SendModule+0x110>)
 80069ca:	f7fe fbef 	bl	80051ac <_PreparePacket>
 80069ce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	e00b      	b.n	80069f6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	6279      	str	r1, [r7, #36]	; 0x24
 80069e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2b7f      	cmp	r3, #127	; 0x7f
 80069fa:	d8f0      	bhi.n	80069de <SEGGER_SYSVIEW_SendModule+0x66>
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	627a      	str	r2, [r7, #36]	; 0x24
 8006a02:	6a3a      	ldr	r2, [r7, #32]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e00b      	b.n	8006a30 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	1c59      	adds	r1, r3, #1
 8006a20:	61f9      	str	r1, [r7, #28]
 8006a22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a26:	b2d2      	uxtb	r2, r2
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	09db      	lsrs	r3, r3, #7
 8006a2e:	61bb      	str	r3, [r7, #24]
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	2b7f      	cmp	r3, #127	; 0x7f
 8006a34:	d8f0      	bhi.n	8006a18 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	61fa      	str	r2, [r7, #28]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2280      	movs	r2, #128	; 0x80
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7fe fb7c 	bl	800514c <_EncodeStr>
 8006a54:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006a56:	2216      	movs	r2, #22
 8006a58:	68f9      	ldr	r1, [r7, #12]
 8006a5a:	6938      	ldr	r0, [r7, #16]
 8006a5c:	f7fe fc92 	bl	8005384 <_SendPacket>
      RECORD_END();
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <SEGGER_SYSVIEW_SendModule+0x102>
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4798      	blx	r3
    }
  }
}
 8006a7a:	bf00      	nop
 8006a7c:	3730      	adds	r7, #48	; 0x30
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	20005fa0 	.word	0x20005fa0
 8006a88:	20005fa8 	.word	0x20005fa8

08006a8c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006a92:	4b0c      	ldr	r3, [pc, #48]	; (8006ac4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00f      	beq.n	8006aba <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1f2      	bne.n	8006aa0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006aba:	bf00      	nop
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	20005fa0 	.word	0x20005fa0

08006ac8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006ace:	f3ef 8311 	mrs	r3, BASEPRI
 8006ad2:	f04f 0120 	mov.w	r1, #32
 8006ad6:	f381 8811 	msr	BASEPRI, r1
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	4817      	ldr	r0, [pc, #92]	; (8006b3c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006ade:	f7fe fb65 	bl	80051ac <_PreparePacket>
 8006ae2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	e00b      	b.n	8006b0c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	b2da      	uxtb	r2, r3
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1c59      	adds	r1, r3, #1
 8006afc:	6179      	str	r1, [r7, #20]
 8006afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b02:	b2d2      	uxtb	r2, r2
 8006b04:	701a      	strb	r2, [r3, #0]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	09db      	lsrs	r3, r3, #7
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8006b10:	d8f0      	bhi.n	8006af4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	617a      	str	r2, [r7, #20]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006b22:	221b      	movs	r2, #27
 8006b24:	6879      	ldr	r1, [r7, #4]
 8006b26:	68b8      	ldr	r0, [r7, #8]
 8006b28:	f7fe fc2c 	bl	8005384 <_SendPacket>
  RECORD_END();
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f383 8811 	msr	BASEPRI, r3
}
 8006b32:	bf00      	nop
 8006b34:	3718      	adds	r7, #24
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	20005fa8 	.word	0x20005fa8
 8006b40:	20005fa4 	.word	0x20005fa4

08006b44 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006b44:	b40f      	push	{r0, r1, r2, r3}
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006b4c:	f107 0314 	add.w	r3, r7, #20
 8006b50:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006b52:	1d3b      	adds	r3, r7, #4
 8006b54:	461a      	mov	r2, r3
 8006b56:	2100      	movs	r1, #0
 8006b58:	6938      	ldr	r0, [r7, #16]
 8006b5a:	f7fe ff23 	bl	80059a4 <_VPrintTarget>
  va_end(ParamList);
}
 8006b5e:	bf00      	nop
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b68:	b004      	add	sp, #16
 8006b6a:	4770      	bx	lr

08006b6c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08a      	sub	sp, #40	; 0x28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b74:	f3ef 8311 	mrs	r3, BASEPRI
 8006b78:	f04f 0120 	mov.w	r1, #32
 8006b7c:	f381 8811 	msr	BASEPRI, r1
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	4827      	ldr	r0, [pc, #156]	; (8006c20 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006b84:	f7fe fb12 	bl	80051ac <_PreparePacket>
 8006b88:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b8a:	2280      	movs	r2, #128	; 0x80
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	6938      	ldr	r0, [r7, #16]
 8006b90:	f7fe fadc 	bl	800514c <_EncodeStr>
 8006b94:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	623b      	str	r3, [r7, #32]
 8006b9e:	e00b      	b.n	8006bb8 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	6279      	str	r1, [r7, #36]	; 0x24
 8006baa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bae:	b2d2      	uxtb	r2, r2
 8006bb0:	701a      	strb	r2, [r3, #0]
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	09db      	lsrs	r3, r3, #7
 8006bb6:	623b      	str	r3, [r7, #32]
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	2b7f      	cmp	r3, #127	; 0x7f
 8006bbc:	d8f0      	bhi.n	8006ba0 <SEGGER_SYSVIEW_Warn+0x34>
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	627a      	str	r2, [r7, #36]	; 0x24
 8006bc4:	6a3a      	ldr	r2, [r7, #32]
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	61fb      	str	r3, [r7, #28]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	e00b      	b.n	8006bf0 <SEGGER_SYSVIEW_Warn+0x84>
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	1c59      	adds	r1, r3, #1
 8006be0:	61f9      	str	r1, [r7, #28]
 8006be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	09db      	lsrs	r3, r3, #7
 8006bee:	61bb      	str	r3, [r7, #24]
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bf4:	d8f0      	bhi.n	8006bd8 <SEGGER_SYSVIEW_Warn+0x6c>
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	61fa      	str	r2, [r7, #28]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006c06:	221a      	movs	r2, #26
 8006c08:	68f9      	ldr	r1, [r7, #12]
 8006c0a:	6938      	ldr	r0, [r7, #16]
 8006c0c:	f7fe fbba 	bl	8005384 <_SendPacket>
  RECORD_END();
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f383 8811 	msr	BASEPRI, r3
}
 8006c16:	bf00      	nop
 8006c18:	3728      	adds	r7, #40	; 0x28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20005fa8 	.word	0x20005fa8

08006c24 <sniprintf>:
 8006c24:	b40c      	push	{r2, r3}
 8006c26:	b530      	push	{r4, r5, lr}
 8006c28:	4b17      	ldr	r3, [pc, #92]	; (8006c88 <sniprintf+0x64>)
 8006c2a:	1e0c      	subs	r4, r1, #0
 8006c2c:	681d      	ldr	r5, [r3, #0]
 8006c2e:	b09d      	sub	sp, #116	; 0x74
 8006c30:	da08      	bge.n	8006c44 <sniprintf+0x20>
 8006c32:	238b      	movs	r3, #139	; 0x8b
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3a:	b01d      	add	sp, #116	; 0x74
 8006c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c40:	b002      	add	sp, #8
 8006c42:	4770      	bx	lr
 8006c44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006c48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c4c:	bf14      	ite	ne
 8006c4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c52:	4623      	moveq	r3, r4
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	9307      	str	r3, [sp, #28]
 8006c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	9006      	str	r0, [sp, #24]
 8006c60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c66:	ab21      	add	r3, sp, #132	; 0x84
 8006c68:	a902      	add	r1, sp, #8
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	f000 f9ab 	bl	8006fc8 <_svfiprintf_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	bfbc      	itt	lt
 8006c76:	238b      	movlt	r3, #139	; 0x8b
 8006c78:	602b      	strlt	r3, [r5, #0]
 8006c7a:	2c00      	cmp	r4, #0
 8006c7c:	d0dd      	beq.n	8006c3a <sniprintf+0x16>
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e7d9      	b.n	8006c3a <sniprintf+0x16>
 8006c86:	bf00      	nop
 8006c88:	2000005c 	.word	0x2000005c

08006c8c <memcmp>:
 8006c8c:	b510      	push	{r4, lr}
 8006c8e:	3901      	subs	r1, #1
 8006c90:	4402      	add	r2, r0
 8006c92:	4290      	cmp	r0, r2
 8006c94:	d101      	bne.n	8006c9a <memcmp+0xe>
 8006c96:	2000      	movs	r0, #0
 8006c98:	e005      	b.n	8006ca6 <memcmp+0x1a>
 8006c9a:	7803      	ldrb	r3, [r0, #0]
 8006c9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d001      	beq.n	8006ca8 <memcmp+0x1c>
 8006ca4:	1b18      	subs	r0, r3, r4
 8006ca6:	bd10      	pop	{r4, pc}
 8006ca8:	3001      	adds	r0, #1
 8006caa:	e7f2      	b.n	8006c92 <memcmp+0x6>

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <__libc_init_array>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	4d0d      	ldr	r5, [pc, #52]	; (8006cf4 <__libc_init_array+0x38>)
 8006cc0:	4c0d      	ldr	r4, [pc, #52]	; (8006cf8 <__libc_init_array+0x3c>)
 8006cc2:	1b64      	subs	r4, r4, r5
 8006cc4:	10a4      	asrs	r4, r4, #2
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	42a6      	cmp	r6, r4
 8006cca:	d109      	bne.n	8006ce0 <__libc_init_array+0x24>
 8006ccc:	4d0b      	ldr	r5, [pc, #44]	; (8006cfc <__libc_init_array+0x40>)
 8006cce:	4c0c      	ldr	r4, [pc, #48]	; (8006d00 <__libc_init_array+0x44>)
 8006cd0:	f000 fc78 	bl	80075c4 <_init>
 8006cd4:	1b64      	subs	r4, r4, r5
 8006cd6:	10a4      	asrs	r4, r4, #2
 8006cd8:	2600      	movs	r6, #0
 8006cda:	42a6      	cmp	r6, r4
 8006cdc:	d105      	bne.n	8006cea <__libc_init_array+0x2e>
 8006cde:	bd70      	pop	{r4, r5, r6, pc}
 8006ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce4:	4798      	blx	r3
 8006ce6:	3601      	adds	r6, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__libc_init_array+0xc>
 8006cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cee:	4798      	blx	r3
 8006cf0:	3601      	adds	r6, #1
 8006cf2:	e7f2      	b.n	8006cda <__libc_init_array+0x1e>
 8006cf4:	08007788 	.word	0x08007788
 8006cf8:	08007788 	.word	0x08007788
 8006cfc:	08007788 	.word	0x08007788
 8006d00:	0800778c 	.word	0x0800778c

08006d04 <__retarget_lock_acquire_recursive>:
 8006d04:	4770      	bx	lr

08006d06 <__retarget_lock_release_recursive>:
 8006d06:	4770      	bx	lr

08006d08 <memcpy>:
 8006d08:	440a      	add	r2, r1
 8006d0a:	4291      	cmp	r1, r2
 8006d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d10:	d100      	bne.n	8006d14 <memcpy+0xc>
 8006d12:	4770      	bx	lr
 8006d14:	b510      	push	{r4, lr}
 8006d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	d1f9      	bne.n	8006d16 <memcpy+0xe>
 8006d22:	bd10      	pop	{r4, pc}

08006d24 <_free_r>:
 8006d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d26:	2900      	cmp	r1, #0
 8006d28:	d044      	beq.n	8006db4 <_free_r+0x90>
 8006d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d2e:	9001      	str	r0, [sp, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f1a1 0404 	sub.w	r4, r1, #4
 8006d36:	bfb8      	it	lt
 8006d38:	18e4      	addlt	r4, r4, r3
 8006d3a:	f000 f8df 	bl	8006efc <__malloc_lock>
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	; (8006db8 <_free_r+0x94>)
 8006d40:	9801      	ldr	r0, [sp, #4]
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	b933      	cbnz	r3, 8006d54 <_free_r+0x30>
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	6014      	str	r4, [r2, #0]
 8006d4a:	b003      	add	sp, #12
 8006d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d50:	f000 b8da 	b.w	8006f08 <__malloc_unlock>
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d908      	bls.n	8006d6a <_free_r+0x46>
 8006d58:	6825      	ldr	r5, [r4, #0]
 8006d5a:	1961      	adds	r1, r4, r5
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	bf01      	itttt	eq
 8006d60:	6819      	ldreq	r1, [r3, #0]
 8006d62:	685b      	ldreq	r3, [r3, #4]
 8006d64:	1949      	addeq	r1, r1, r5
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	e7ed      	b.n	8006d46 <_free_r+0x22>
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b10b      	cbz	r3, 8006d74 <_free_r+0x50>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d9fa      	bls.n	8006d6a <_free_r+0x46>
 8006d74:	6811      	ldr	r1, [r2, #0]
 8006d76:	1855      	adds	r5, r2, r1
 8006d78:	42a5      	cmp	r5, r4
 8006d7a:	d10b      	bne.n	8006d94 <_free_r+0x70>
 8006d7c:	6824      	ldr	r4, [r4, #0]
 8006d7e:	4421      	add	r1, r4
 8006d80:	1854      	adds	r4, r2, r1
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	d1e0      	bne.n	8006d4a <_free_r+0x26>
 8006d88:	681c      	ldr	r4, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	6053      	str	r3, [r2, #4]
 8006d8e:	440c      	add	r4, r1
 8006d90:	6014      	str	r4, [r2, #0]
 8006d92:	e7da      	b.n	8006d4a <_free_r+0x26>
 8006d94:	d902      	bls.n	8006d9c <_free_r+0x78>
 8006d96:	230c      	movs	r3, #12
 8006d98:	6003      	str	r3, [r0, #0]
 8006d9a:	e7d6      	b.n	8006d4a <_free_r+0x26>
 8006d9c:	6825      	ldr	r5, [r4, #0]
 8006d9e:	1961      	adds	r1, r4, r5
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf04      	itt	eq
 8006da4:	6819      	ldreq	r1, [r3, #0]
 8006da6:	685b      	ldreq	r3, [r3, #4]
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	bf04      	itt	eq
 8006dac:	1949      	addeq	r1, r1, r5
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	6054      	str	r4, [r2, #4]
 8006db2:	e7ca      	b.n	8006d4a <_free_r+0x26>
 8006db4:	b003      	add	sp, #12
 8006db6:	bd30      	pop	{r4, r5, pc}
 8006db8:	200061cc 	.word	0x200061cc

08006dbc <sbrk_aligned>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	4e0e      	ldr	r6, [pc, #56]	; (8006df8 <sbrk_aligned+0x3c>)
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	6831      	ldr	r1, [r6, #0]
 8006dc4:	4605      	mov	r5, r0
 8006dc6:	b911      	cbnz	r1, 8006dce <sbrk_aligned+0x12>
 8006dc8:	f000 fba6 	bl	8007518 <_sbrk_r>
 8006dcc:	6030      	str	r0, [r6, #0]
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	f000 fba1 	bl	8007518 <_sbrk_r>
 8006dd6:	1c43      	adds	r3, r0, #1
 8006dd8:	d00a      	beq.n	8006df0 <sbrk_aligned+0x34>
 8006dda:	1cc4      	adds	r4, r0, #3
 8006ddc:	f024 0403 	bic.w	r4, r4, #3
 8006de0:	42a0      	cmp	r0, r4
 8006de2:	d007      	beq.n	8006df4 <sbrk_aligned+0x38>
 8006de4:	1a21      	subs	r1, r4, r0
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fb96 	bl	8007518 <_sbrk_r>
 8006dec:	3001      	adds	r0, #1
 8006dee:	d101      	bne.n	8006df4 <sbrk_aligned+0x38>
 8006df0:	f04f 34ff 	mov.w	r4, #4294967295
 8006df4:	4620      	mov	r0, r4
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	200061d0 	.word	0x200061d0

08006dfc <_malloc_r>:
 8006dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e00:	1ccd      	adds	r5, r1, #3
 8006e02:	f025 0503 	bic.w	r5, r5, #3
 8006e06:	3508      	adds	r5, #8
 8006e08:	2d0c      	cmp	r5, #12
 8006e0a:	bf38      	it	cc
 8006e0c:	250c      	movcc	r5, #12
 8006e0e:	2d00      	cmp	r5, #0
 8006e10:	4607      	mov	r7, r0
 8006e12:	db01      	blt.n	8006e18 <_malloc_r+0x1c>
 8006e14:	42a9      	cmp	r1, r5
 8006e16:	d905      	bls.n	8006e24 <_malloc_r+0x28>
 8006e18:	230c      	movs	r3, #12
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	2600      	movs	r6, #0
 8006e1e:	4630      	mov	r0, r6
 8006e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ef8 <_malloc_r+0xfc>
 8006e28:	f000 f868 	bl	8006efc <__malloc_lock>
 8006e2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006e30:	461c      	mov	r4, r3
 8006e32:	bb5c      	cbnz	r4, 8006e8c <_malloc_r+0x90>
 8006e34:	4629      	mov	r1, r5
 8006e36:	4638      	mov	r0, r7
 8006e38:	f7ff ffc0 	bl	8006dbc <sbrk_aligned>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	4604      	mov	r4, r0
 8006e40:	d155      	bne.n	8006eee <_malloc_r+0xf2>
 8006e42:	f8d8 4000 	ldr.w	r4, [r8]
 8006e46:	4626      	mov	r6, r4
 8006e48:	2e00      	cmp	r6, #0
 8006e4a:	d145      	bne.n	8006ed8 <_malloc_r+0xdc>
 8006e4c:	2c00      	cmp	r4, #0
 8006e4e:	d048      	beq.n	8006ee2 <_malloc_r+0xe6>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	4631      	mov	r1, r6
 8006e54:	4638      	mov	r0, r7
 8006e56:	eb04 0903 	add.w	r9, r4, r3
 8006e5a:	f000 fb5d 	bl	8007518 <_sbrk_r>
 8006e5e:	4581      	cmp	r9, r0
 8006e60:	d13f      	bne.n	8006ee2 <_malloc_r+0xe6>
 8006e62:	6821      	ldr	r1, [r4, #0]
 8006e64:	1a6d      	subs	r5, r5, r1
 8006e66:	4629      	mov	r1, r5
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f7ff ffa7 	bl	8006dbc <sbrk_aligned>
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d037      	beq.n	8006ee2 <_malloc_r+0xe6>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	442b      	add	r3, r5
 8006e76:	6023      	str	r3, [r4, #0]
 8006e78:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d038      	beq.n	8006ef2 <_malloc_r+0xf6>
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	42a2      	cmp	r2, r4
 8006e84:	d12b      	bne.n	8006ede <_malloc_r+0xe2>
 8006e86:	2200      	movs	r2, #0
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	e00f      	b.n	8006eac <_malloc_r+0xb0>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	1b52      	subs	r2, r2, r5
 8006e90:	d41f      	bmi.n	8006ed2 <_malloc_r+0xd6>
 8006e92:	2a0b      	cmp	r2, #11
 8006e94:	d917      	bls.n	8006ec6 <_malloc_r+0xca>
 8006e96:	1961      	adds	r1, r4, r5
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	6025      	str	r5, [r4, #0]
 8006e9c:	bf18      	it	ne
 8006e9e:	6059      	strne	r1, [r3, #4]
 8006ea0:	6863      	ldr	r3, [r4, #4]
 8006ea2:	bf08      	it	eq
 8006ea4:	f8c8 1000 	streq.w	r1, [r8]
 8006ea8:	5162      	str	r2, [r4, r5]
 8006eaa:	604b      	str	r3, [r1, #4]
 8006eac:	4638      	mov	r0, r7
 8006eae:	f104 060b 	add.w	r6, r4, #11
 8006eb2:	f000 f829 	bl	8006f08 <__malloc_unlock>
 8006eb6:	f026 0607 	bic.w	r6, r6, #7
 8006eba:	1d23      	adds	r3, r4, #4
 8006ebc:	1af2      	subs	r2, r6, r3
 8006ebe:	d0ae      	beq.n	8006e1e <_malloc_r+0x22>
 8006ec0:	1b9b      	subs	r3, r3, r6
 8006ec2:	50a3      	str	r3, [r4, r2]
 8006ec4:	e7ab      	b.n	8006e1e <_malloc_r+0x22>
 8006ec6:	42a3      	cmp	r3, r4
 8006ec8:	6862      	ldr	r2, [r4, #4]
 8006eca:	d1dd      	bne.n	8006e88 <_malloc_r+0x8c>
 8006ecc:	f8c8 2000 	str.w	r2, [r8]
 8006ed0:	e7ec      	b.n	8006eac <_malloc_r+0xb0>
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	6864      	ldr	r4, [r4, #4]
 8006ed6:	e7ac      	b.n	8006e32 <_malloc_r+0x36>
 8006ed8:	4634      	mov	r4, r6
 8006eda:	6876      	ldr	r6, [r6, #4]
 8006edc:	e7b4      	b.n	8006e48 <_malloc_r+0x4c>
 8006ede:	4613      	mov	r3, r2
 8006ee0:	e7cc      	b.n	8006e7c <_malloc_r+0x80>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	603b      	str	r3, [r7, #0]
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f000 f80e 	bl	8006f08 <__malloc_unlock>
 8006eec:	e797      	b.n	8006e1e <_malloc_r+0x22>
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	e7dc      	b.n	8006eac <_malloc_r+0xb0>
 8006ef2:	605b      	str	r3, [r3, #4]
 8006ef4:	deff      	udf	#255	; 0xff
 8006ef6:	bf00      	nop
 8006ef8:	200061cc 	.word	0x200061cc

08006efc <__malloc_lock>:
 8006efc:	4801      	ldr	r0, [pc, #4]	; (8006f04 <__malloc_lock+0x8>)
 8006efe:	f7ff bf01 	b.w	8006d04 <__retarget_lock_acquire_recursive>
 8006f02:	bf00      	nop
 8006f04:	200061c8 	.word	0x200061c8

08006f08 <__malloc_unlock>:
 8006f08:	4801      	ldr	r0, [pc, #4]	; (8006f10 <__malloc_unlock+0x8>)
 8006f0a:	f7ff befc 	b.w	8006d06 <__retarget_lock_release_recursive>
 8006f0e:	bf00      	nop
 8006f10:	200061c8 	.word	0x200061c8

08006f14 <__ssputs_r>:
 8006f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f18:	688e      	ldr	r6, [r1, #8]
 8006f1a:	461f      	mov	r7, r3
 8006f1c:	42be      	cmp	r6, r7
 8006f1e:	680b      	ldr	r3, [r1, #0]
 8006f20:	4682      	mov	sl, r0
 8006f22:	460c      	mov	r4, r1
 8006f24:	4690      	mov	r8, r2
 8006f26:	d82c      	bhi.n	8006f82 <__ssputs_r+0x6e>
 8006f28:	898a      	ldrh	r2, [r1, #12]
 8006f2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f2e:	d026      	beq.n	8006f7e <__ssputs_r+0x6a>
 8006f30:	6965      	ldr	r5, [r4, #20]
 8006f32:	6909      	ldr	r1, [r1, #16]
 8006f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f38:	eba3 0901 	sub.w	r9, r3, r1
 8006f3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f40:	1c7b      	adds	r3, r7, #1
 8006f42:	444b      	add	r3, r9
 8006f44:	106d      	asrs	r5, r5, #1
 8006f46:	429d      	cmp	r5, r3
 8006f48:	bf38      	it	cc
 8006f4a:	461d      	movcc	r5, r3
 8006f4c:	0553      	lsls	r3, r2, #21
 8006f4e:	d527      	bpl.n	8006fa0 <__ssputs_r+0x8c>
 8006f50:	4629      	mov	r1, r5
 8006f52:	f7ff ff53 	bl	8006dfc <_malloc_r>
 8006f56:	4606      	mov	r6, r0
 8006f58:	b360      	cbz	r0, 8006fb4 <__ssputs_r+0xa0>
 8006f5a:	6921      	ldr	r1, [r4, #16]
 8006f5c:	464a      	mov	r2, r9
 8006f5e:	f7ff fed3 	bl	8006d08 <memcpy>
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f6c:	81a3      	strh	r3, [r4, #12]
 8006f6e:	6126      	str	r6, [r4, #16]
 8006f70:	6165      	str	r5, [r4, #20]
 8006f72:	444e      	add	r6, r9
 8006f74:	eba5 0509 	sub.w	r5, r5, r9
 8006f78:	6026      	str	r6, [r4, #0]
 8006f7a:	60a5      	str	r5, [r4, #8]
 8006f7c:	463e      	mov	r6, r7
 8006f7e:	42be      	cmp	r6, r7
 8006f80:	d900      	bls.n	8006f84 <__ssputs_r+0x70>
 8006f82:	463e      	mov	r6, r7
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	4632      	mov	r2, r6
 8006f88:	4641      	mov	r1, r8
 8006f8a:	f000 faab 	bl	80074e4 <memmove>
 8006f8e:	68a3      	ldr	r3, [r4, #8]
 8006f90:	1b9b      	subs	r3, r3, r6
 8006f92:	60a3      	str	r3, [r4, #8]
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	4433      	add	r3, r6
 8006f98:	6023      	str	r3, [r4, #0]
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	f000 fac9 	bl	8007538 <_realloc_r>
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1e0      	bne.n	8006f6e <__ssputs_r+0x5a>
 8006fac:	6921      	ldr	r1, [r4, #16]
 8006fae:	4650      	mov	r0, sl
 8006fb0:	f7ff feb8 	bl	8006d24 <_free_r>
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	f8ca 3000 	str.w	r3, [sl]
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fc0:	81a3      	strh	r3, [r4, #12]
 8006fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc6:	e7e9      	b.n	8006f9c <__ssputs_r+0x88>

08006fc8 <_svfiprintf_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	4698      	mov	r8, r3
 8006fce:	898b      	ldrh	r3, [r1, #12]
 8006fd0:	061b      	lsls	r3, r3, #24
 8006fd2:	b09d      	sub	sp, #116	; 0x74
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	d50e      	bpl.n	8006ffa <_svfiprintf_r+0x32>
 8006fdc:	690b      	ldr	r3, [r1, #16]
 8006fde:	b963      	cbnz	r3, 8006ffa <_svfiprintf_r+0x32>
 8006fe0:	2140      	movs	r1, #64	; 0x40
 8006fe2:	f7ff ff0b 	bl	8006dfc <_malloc_r>
 8006fe6:	6028      	str	r0, [r5, #0]
 8006fe8:	6128      	str	r0, [r5, #16]
 8006fea:	b920      	cbnz	r0, 8006ff6 <_svfiprintf_r+0x2e>
 8006fec:	230c      	movs	r3, #12
 8006fee:	603b      	str	r3, [r7, #0]
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	e0d0      	b.n	8007198 <_svfiprintf_r+0x1d0>
 8006ff6:	2340      	movs	r3, #64	; 0x40
 8006ff8:	616b      	str	r3, [r5, #20]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffe:	2320      	movs	r3, #32
 8007000:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007004:	f8cd 800c 	str.w	r8, [sp, #12]
 8007008:	2330      	movs	r3, #48	; 0x30
 800700a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071b0 <_svfiprintf_r+0x1e8>
 800700e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007012:	f04f 0901 	mov.w	r9, #1
 8007016:	4623      	mov	r3, r4
 8007018:	469a      	mov	sl, r3
 800701a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701e:	b10a      	cbz	r2, 8007024 <_svfiprintf_r+0x5c>
 8007020:	2a25      	cmp	r2, #37	; 0x25
 8007022:	d1f9      	bne.n	8007018 <_svfiprintf_r+0x50>
 8007024:	ebba 0b04 	subs.w	fp, sl, r4
 8007028:	d00b      	beq.n	8007042 <_svfiprintf_r+0x7a>
 800702a:	465b      	mov	r3, fp
 800702c:	4622      	mov	r2, r4
 800702e:	4629      	mov	r1, r5
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff ff6f 	bl	8006f14 <__ssputs_r>
 8007036:	3001      	adds	r0, #1
 8007038:	f000 80a9 	beq.w	800718e <_svfiprintf_r+0x1c6>
 800703c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800703e:	445a      	add	r2, fp
 8007040:	9209      	str	r2, [sp, #36]	; 0x24
 8007042:	f89a 3000 	ldrb.w	r3, [sl]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 80a1 	beq.w	800718e <_svfiprintf_r+0x1c6>
 800704c:	2300      	movs	r3, #0
 800704e:	f04f 32ff 	mov.w	r2, #4294967295
 8007052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007056:	f10a 0a01 	add.w	sl, sl, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	9307      	str	r3, [sp, #28]
 800705e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007062:	931a      	str	r3, [sp, #104]	; 0x68
 8007064:	4654      	mov	r4, sl
 8007066:	2205      	movs	r2, #5
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	4850      	ldr	r0, [pc, #320]	; (80071b0 <_svfiprintf_r+0x1e8>)
 800706e:	f7f9 f8ff 	bl	8000270 <memchr>
 8007072:	9a04      	ldr	r2, [sp, #16]
 8007074:	b9d8      	cbnz	r0, 80070ae <_svfiprintf_r+0xe6>
 8007076:	06d0      	lsls	r0, r2, #27
 8007078:	bf44      	itt	mi
 800707a:	2320      	movmi	r3, #32
 800707c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007080:	0711      	lsls	r1, r2, #28
 8007082:	bf44      	itt	mi
 8007084:	232b      	movmi	r3, #43	; 0x2b
 8007086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800708a:	f89a 3000 	ldrb.w	r3, [sl]
 800708e:	2b2a      	cmp	r3, #42	; 0x2a
 8007090:	d015      	beq.n	80070be <_svfiprintf_r+0xf6>
 8007092:	9a07      	ldr	r2, [sp, #28]
 8007094:	4654      	mov	r4, sl
 8007096:	2000      	movs	r0, #0
 8007098:	f04f 0c0a 	mov.w	ip, #10
 800709c:	4621      	mov	r1, r4
 800709e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a2:	3b30      	subs	r3, #48	; 0x30
 80070a4:	2b09      	cmp	r3, #9
 80070a6:	d94d      	bls.n	8007144 <_svfiprintf_r+0x17c>
 80070a8:	b1b0      	cbz	r0, 80070d8 <_svfiprintf_r+0x110>
 80070aa:	9207      	str	r2, [sp, #28]
 80070ac:	e014      	b.n	80070d8 <_svfiprintf_r+0x110>
 80070ae:	eba0 0308 	sub.w	r3, r0, r8
 80070b2:	fa09 f303 	lsl.w	r3, r9, r3
 80070b6:	4313      	orrs	r3, r2
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	46a2      	mov	sl, r4
 80070bc:	e7d2      	b.n	8007064 <_svfiprintf_r+0x9c>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	9103      	str	r1, [sp, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfbb      	ittet	lt
 80070ca:	425b      	neglt	r3, r3
 80070cc:	f042 0202 	orrlt.w	r2, r2, #2
 80070d0:	9307      	strge	r3, [sp, #28]
 80070d2:	9307      	strlt	r3, [sp, #28]
 80070d4:	bfb8      	it	lt
 80070d6:	9204      	strlt	r2, [sp, #16]
 80070d8:	7823      	ldrb	r3, [r4, #0]
 80070da:	2b2e      	cmp	r3, #46	; 0x2e
 80070dc:	d10c      	bne.n	80070f8 <_svfiprintf_r+0x130>
 80070de:	7863      	ldrb	r3, [r4, #1]
 80070e0:	2b2a      	cmp	r3, #42	; 0x2a
 80070e2:	d134      	bne.n	800714e <_svfiprintf_r+0x186>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	9203      	str	r2, [sp, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	bfb8      	it	lt
 80070f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80070f4:	3402      	adds	r4, #2
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071c0 <_svfiprintf_r+0x1f8>
 80070fc:	7821      	ldrb	r1, [r4, #0]
 80070fe:	2203      	movs	r2, #3
 8007100:	4650      	mov	r0, sl
 8007102:	f7f9 f8b5 	bl	8000270 <memchr>
 8007106:	b138      	cbz	r0, 8007118 <_svfiprintf_r+0x150>
 8007108:	9b04      	ldr	r3, [sp, #16]
 800710a:	eba0 000a 	sub.w	r0, r0, sl
 800710e:	2240      	movs	r2, #64	; 0x40
 8007110:	4082      	lsls	r2, r0
 8007112:	4313      	orrs	r3, r2
 8007114:	3401      	adds	r4, #1
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800711c:	4825      	ldr	r0, [pc, #148]	; (80071b4 <_svfiprintf_r+0x1ec>)
 800711e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007122:	2206      	movs	r2, #6
 8007124:	f7f9 f8a4 	bl	8000270 <memchr>
 8007128:	2800      	cmp	r0, #0
 800712a:	d038      	beq.n	800719e <_svfiprintf_r+0x1d6>
 800712c:	4b22      	ldr	r3, [pc, #136]	; (80071b8 <_svfiprintf_r+0x1f0>)
 800712e:	bb1b      	cbnz	r3, 8007178 <_svfiprintf_r+0x1b0>
 8007130:	9b03      	ldr	r3, [sp, #12]
 8007132:	3307      	adds	r3, #7
 8007134:	f023 0307 	bic.w	r3, r3, #7
 8007138:	3308      	adds	r3, #8
 800713a:	9303      	str	r3, [sp, #12]
 800713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713e:	4433      	add	r3, r6
 8007140:	9309      	str	r3, [sp, #36]	; 0x24
 8007142:	e768      	b.n	8007016 <_svfiprintf_r+0x4e>
 8007144:	fb0c 3202 	mla	r2, ip, r2, r3
 8007148:	460c      	mov	r4, r1
 800714a:	2001      	movs	r0, #1
 800714c:	e7a6      	b.n	800709c <_svfiprintf_r+0xd4>
 800714e:	2300      	movs	r3, #0
 8007150:	3401      	adds	r4, #1
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	4619      	mov	r1, r3
 8007156:	f04f 0c0a 	mov.w	ip, #10
 800715a:	4620      	mov	r0, r4
 800715c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007160:	3a30      	subs	r2, #48	; 0x30
 8007162:	2a09      	cmp	r2, #9
 8007164:	d903      	bls.n	800716e <_svfiprintf_r+0x1a6>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0c6      	beq.n	80070f8 <_svfiprintf_r+0x130>
 800716a:	9105      	str	r1, [sp, #20]
 800716c:	e7c4      	b.n	80070f8 <_svfiprintf_r+0x130>
 800716e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007172:	4604      	mov	r4, r0
 8007174:	2301      	movs	r3, #1
 8007176:	e7f0      	b.n	800715a <_svfiprintf_r+0x192>
 8007178:	ab03      	add	r3, sp, #12
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	462a      	mov	r2, r5
 800717e:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <_svfiprintf_r+0x1f4>)
 8007180:	a904      	add	r1, sp, #16
 8007182:	4638      	mov	r0, r7
 8007184:	f3af 8000 	nop.w
 8007188:	1c42      	adds	r2, r0, #1
 800718a:	4606      	mov	r6, r0
 800718c:	d1d6      	bne.n	800713c <_svfiprintf_r+0x174>
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	065b      	lsls	r3, r3, #25
 8007192:	f53f af2d 	bmi.w	8006ff0 <_svfiprintf_r+0x28>
 8007196:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007198:	b01d      	add	sp, #116	; 0x74
 800719a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800719e:	ab03      	add	r3, sp, #12
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	462a      	mov	r2, r5
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <_svfiprintf_r+0x1f4>)
 80071a6:	a904      	add	r1, sp, #16
 80071a8:	4638      	mov	r0, r7
 80071aa:	f000 f879 	bl	80072a0 <_printf_i>
 80071ae:	e7eb      	b.n	8007188 <_svfiprintf_r+0x1c0>
 80071b0:	0800774c 	.word	0x0800774c
 80071b4:	08007756 	.word	0x08007756
 80071b8:	00000000 	.word	0x00000000
 80071bc:	08006f15 	.word	0x08006f15
 80071c0:	08007752 	.word	0x08007752

080071c4 <_printf_common>:
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	4616      	mov	r6, r2
 80071ca:	4699      	mov	r9, r3
 80071cc:	688a      	ldr	r2, [r1, #8]
 80071ce:	690b      	ldr	r3, [r1, #16]
 80071d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071d4:	4293      	cmp	r3, r2
 80071d6:	bfb8      	it	lt
 80071d8:	4613      	movlt	r3, r2
 80071da:	6033      	str	r3, [r6, #0]
 80071dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071e0:	4607      	mov	r7, r0
 80071e2:	460c      	mov	r4, r1
 80071e4:	b10a      	cbz	r2, 80071ea <_printf_common+0x26>
 80071e6:	3301      	adds	r3, #1
 80071e8:	6033      	str	r3, [r6, #0]
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	0699      	lsls	r1, r3, #26
 80071ee:	bf42      	ittt	mi
 80071f0:	6833      	ldrmi	r3, [r6, #0]
 80071f2:	3302      	addmi	r3, #2
 80071f4:	6033      	strmi	r3, [r6, #0]
 80071f6:	6825      	ldr	r5, [r4, #0]
 80071f8:	f015 0506 	ands.w	r5, r5, #6
 80071fc:	d106      	bne.n	800720c <_printf_common+0x48>
 80071fe:	f104 0a19 	add.w	sl, r4, #25
 8007202:	68e3      	ldr	r3, [r4, #12]
 8007204:	6832      	ldr	r2, [r6, #0]
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	42ab      	cmp	r3, r5
 800720a:	dc26      	bgt.n	800725a <_printf_common+0x96>
 800720c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007210:	1e13      	subs	r3, r2, #0
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	bf18      	it	ne
 8007216:	2301      	movne	r3, #1
 8007218:	0692      	lsls	r2, r2, #26
 800721a:	d42b      	bmi.n	8007274 <_printf_common+0xb0>
 800721c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007220:	4649      	mov	r1, r9
 8007222:	4638      	mov	r0, r7
 8007224:	47c0      	blx	r8
 8007226:	3001      	adds	r0, #1
 8007228:	d01e      	beq.n	8007268 <_printf_common+0xa4>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	6922      	ldr	r2, [r4, #16]
 800722e:	f003 0306 	and.w	r3, r3, #6
 8007232:	2b04      	cmp	r3, #4
 8007234:	bf02      	ittt	eq
 8007236:	68e5      	ldreq	r5, [r4, #12]
 8007238:	6833      	ldreq	r3, [r6, #0]
 800723a:	1aed      	subeq	r5, r5, r3
 800723c:	68a3      	ldr	r3, [r4, #8]
 800723e:	bf0c      	ite	eq
 8007240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007244:	2500      	movne	r5, #0
 8007246:	4293      	cmp	r3, r2
 8007248:	bfc4      	itt	gt
 800724a:	1a9b      	subgt	r3, r3, r2
 800724c:	18ed      	addgt	r5, r5, r3
 800724e:	2600      	movs	r6, #0
 8007250:	341a      	adds	r4, #26
 8007252:	42b5      	cmp	r5, r6
 8007254:	d11a      	bne.n	800728c <_printf_common+0xc8>
 8007256:	2000      	movs	r0, #0
 8007258:	e008      	b.n	800726c <_printf_common+0xa8>
 800725a:	2301      	movs	r3, #1
 800725c:	4652      	mov	r2, sl
 800725e:	4649      	mov	r1, r9
 8007260:	4638      	mov	r0, r7
 8007262:	47c0      	blx	r8
 8007264:	3001      	adds	r0, #1
 8007266:	d103      	bne.n	8007270 <_printf_common+0xac>
 8007268:	f04f 30ff 	mov.w	r0, #4294967295
 800726c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007270:	3501      	adds	r5, #1
 8007272:	e7c6      	b.n	8007202 <_printf_common+0x3e>
 8007274:	18e1      	adds	r1, r4, r3
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	2030      	movs	r0, #48	; 0x30
 800727a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800727e:	4422      	add	r2, r4
 8007280:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007284:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007288:	3302      	adds	r3, #2
 800728a:	e7c7      	b.n	800721c <_printf_common+0x58>
 800728c:	2301      	movs	r3, #1
 800728e:	4622      	mov	r2, r4
 8007290:	4649      	mov	r1, r9
 8007292:	4638      	mov	r0, r7
 8007294:	47c0      	blx	r8
 8007296:	3001      	adds	r0, #1
 8007298:	d0e6      	beq.n	8007268 <_printf_common+0xa4>
 800729a:	3601      	adds	r6, #1
 800729c:	e7d9      	b.n	8007252 <_printf_common+0x8e>
	...

080072a0 <_printf_i>:
 80072a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	7e0f      	ldrb	r7, [r1, #24]
 80072a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072a8:	2f78      	cmp	r7, #120	; 0x78
 80072aa:	4691      	mov	r9, r2
 80072ac:	4680      	mov	r8, r0
 80072ae:	460c      	mov	r4, r1
 80072b0:	469a      	mov	sl, r3
 80072b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072b6:	d807      	bhi.n	80072c8 <_printf_i+0x28>
 80072b8:	2f62      	cmp	r7, #98	; 0x62
 80072ba:	d80a      	bhi.n	80072d2 <_printf_i+0x32>
 80072bc:	2f00      	cmp	r7, #0
 80072be:	f000 80d4 	beq.w	800746a <_printf_i+0x1ca>
 80072c2:	2f58      	cmp	r7, #88	; 0x58
 80072c4:	f000 80c0 	beq.w	8007448 <_printf_i+0x1a8>
 80072c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80072d0:	e03a      	b.n	8007348 <_printf_i+0xa8>
 80072d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80072d6:	2b15      	cmp	r3, #21
 80072d8:	d8f6      	bhi.n	80072c8 <_printf_i+0x28>
 80072da:	a101      	add	r1, pc, #4	; (adr r1, 80072e0 <_printf_i+0x40>)
 80072dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80072e0:	08007339 	.word	0x08007339
 80072e4:	0800734d 	.word	0x0800734d
 80072e8:	080072c9 	.word	0x080072c9
 80072ec:	080072c9 	.word	0x080072c9
 80072f0:	080072c9 	.word	0x080072c9
 80072f4:	080072c9 	.word	0x080072c9
 80072f8:	0800734d 	.word	0x0800734d
 80072fc:	080072c9 	.word	0x080072c9
 8007300:	080072c9 	.word	0x080072c9
 8007304:	080072c9 	.word	0x080072c9
 8007308:	080072c9 	.word	0x080072c9
 800730c:	08007451 	.word	0x08007451
 8007310:	08007379 	.word	0x08007379
 8007314:	0800740b 	.word	0x0800740b
 8007318:	080072c9 	.word	0x080072c9
 800731c:	080072c9 	.word	0x080072c9
 8007320:	08007473 	.word	0x08007473
 8007324:	080072c9 	.word	0x080072c9
 8007328:	08007379 	.word	0x08007379
 800732c:	080072c9 	.word	0x080072c9
 8007330:	080072c9 	.word	0x080072c9
 8007334:	08007413 	.word	0x08007413
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	1d1a      	adds	r2, r3, #4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	602a      	str	r2, [r5, #0]
 8007340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007348:	2301      	movs	r3, #1
 800734a:	e09f      	b.n	800748c <_printf_i+0x1ec>
 800734c:	6820      	ldr	r0, [r4, #0]
 800734e:	682b      	ldr	r3, [r5, #0]
 8007350:	0607      	lsls	r7, r0, #24
 8007352:	f103 0104 	add.w	r1, r3, #4
 8007356:	6029      	str	r1, [r5, #0]
 8007358:	d501      	bpl.n	800735e <_printf_i+0xbe>
 800735a:	681e      	ldr	r6, [r3, #0]
 800735c:	e003      	b.n	8007366 <_printf_i+0xc6>
 800735e:	0646      	lsls	r6, r0, #25
 8007360:	d5fb      	bpl.n	800735a <_printf_i+0xba>
 8007362:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007366:	2e00      	cmp	r6, #0
 8007368:	da03      	bge.n	8007372 <_printf_i+0xd2>
 800736a:	232d      	movs	r3, #45	; 0x2d
 800736c:	4276      	negs	r6, r6
 800736e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007372:	485a      	ldr	r0, [pc, #360]	; (80074dc <_printf_i+0x23c>)
 8007374:	230a      	movs	r3, #10
 8007376:	e012      	b.n	800739e <_printf_i+0xfe>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	6820      	ldr	r0, [r4, #0]
 800737c:	1d19      	adds	r1, r3, #4
 800737e:	6029      	str	r1, [r5, #0]
 8007380:	0605      	lsls	r5, r0, #24
 8007382:	d501      	bpl.n	8007388 <_printf_i+0xe8>
 8007384:	681e      	ldr	r6, [r3, #0]
 8007386:	e002      	b.n	800738e <_printf_i+0xee>
 8007388:	0641      	lsls	r1, r0, #25
 800738a:	d5fb      	bpl.n	8007384 <_printf_i+0xe4>
 800738c:	881e      	ldrh	r6, [r3, #0]
 800738e:	4853      	ldr	r0, [pc, #332]	; (80074dc <_printf_i+0x23c>)
 8007390:	2f6f      	cmp	r7, #111	; 0x6f
 8007392:	bf0c      	ite	eq
 8007394:	2308      	moveq	r3, #8
 8007396:	230a      	movne	r3, #10
 8007398:	2100      	movs	r1, #0
 800739a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800739e:	6865      	ldr	r5, [r4, #4]
 80073a0:	60a5      	str	r5, [r4, #8]
 80073a2:	2d00      	cmp	r5, #0
 80073a4:	bfa2      	ittt	ge
 80073a6:	6821      	ldrge	r1, [r4, #0]
 80073a8:	f021 0104 	bicge.w	r1, r1, #4
 80073ac:	6021      	strge	r1, [r4, #0]
 80073ae:	b90e      	cbnz	r6, 80073b4 <_printf_i+0x114>
 80073b0:	2d00      	cmp	r5, #0
 80073b2:	d04b      	beq.n	800744c <_printf_i+0x1ac>
 80073b4:	4615      	mov	r5, r2
 80073b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80073ba:	fb03 6711 	mls	r7, r3, r1, r6
 80073be:	5dc7      	ldrb	r7, [r0, r7]
 80073c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80073c4:	4637      	mov	r7, r6
 80073c6:	42bb      	cmp	r3, r7
 80073c8:	460e      	mov	r6, r1
 80073ca:	d9f4      	bls.n	80073b6 <_printf_i+0x116>
 80073cc:	2b08      	cmp	r3, #8
 80073ce:	d10b      	bne.n	80073e8 <_printf_i+0x148>
 80073d0:	6823      	ldr	r3, [r4, #0]
 80073d2:	07de      	lsls	r6, r3, #31
 80073d4:	d508      	bpl.n	80073e8 <_printf_i+0x148>
 80073d6:	6923      	ldr	r3, [r4, #16]
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	4299      	cmp	r1, r3
 80073dc:	bfde      	ittt	le
 80073de:	2330      	movle	r3, #48	; 0x30
 80073e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80073e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80073e8:	1b52      	subs	r2, r2, r5
 80073ea:	6122      	str	r2, [r4, #16]
 80073ec:	f8cd a000 	str.w	sl, [sp]
 80073f0:	464b      	mov	r3, r9
 80073f2:	aa03      	add	r2, sp, #12
 80073f4:	4621      	mov	r1, r4
 80073f6:	4640      	mov	r0, r8
 80073f8:	f7ff fee4 	bl	80071c4 <_printf_common>
 80073fc:	3001      	adds	r0, #1
 80073fe:	d14a      	bne.n	8007496 <_printf_i+0x1f6>
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	b004      	add	sp, #16
 8007406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	f043 0320 	orr.w	r3, r3, #32
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	4833      	ldr	r0, [pc, #204]	; (80074e0 <_printf_i+0x240>)
 8007414:	2778      	movs	r7, #120	; 0x78
 8007416:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	6829      	ldr	r1, [r5, #0]
 800741e:	061f      	lsls	r7, r3, #24
 8007420:	f851 6b04 	ldr.w	r6, [r1], #4
 8007424:	d402      	bmi.n	800742c <_printf_i+0x18c>
 8007426:	065f      	lsls	r7, r3, #25
 8007428:	bf48      	it	mi
 800742a:	b2b6      	uxthmi	r6, r6
 800742c:	07df      	lsls	r7, r3, #31
 800742e:	bf48      	it	mi
 8007430:	f043 0320 	orrmi.w	r3, r3, #32
 8007434:	6029      	str	r1, [r5, #0]
 8007436:	bf48      	it	mi
 8007438:	6023      	strmi	r3, [r4, #0]
 800743a:	b91e      	cbnz	r6, 8007444 <_printf_i+0x1a4>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	f023 0320 	bic.w	r3, r3, #32
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	2310      	movs	r3, #16
 8007446:	e7a7      	b.n	8007398 <_printf_i+0xf8>
 8007448:	4824      	ldr	r0, [pc, #144]	; (80074dc <_printf_i+0x23c>)
 800744a:	e7e4      	b.n	8007416 <_printf_i+0x176>
 800744c:	4615      	mov	r5, r2
 800744e:	e7bd      	b.n	80073cc <_printf_i+0x12c>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	6826      	ldr	r6, [r4, #0]
 8007454:	6961      	ldr	r1, [r4, #20]
 8007456:	1d18      	adds	r0, r3, #4
 8007458:	6028      	str	r0, [r5, #0]
 800745a:	0635      	lsls	r5, r6, #24
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	d501      	bpl.n	8007464 <_printf_i+0x1c4>
 8007460:	6019      	str	r1, [r3, #0]
 8007462:	e002      	b.n	800746a <_printf_i+0x1ca>
 8007464:	0670      	lsls	r0, r6, #25
 8007466:	d5fb      	bpl.n	8007460 <_printf_i+0x1c0>
 8007468:	8019      	strh	r1, [r3, #0]
 800746a:	2300      	movs	r3, #0
 800746c:	6123      	str	r3, [r4, #16]
 800746e:	4615      	mov	r5, r2
 8007470:	e7bc      	b.n	80073ec <_printf_i+0x14c>
 8007472:	682b      	ldr	r3, [r5, #0]
 8007474:	1d1a      	adds	r2, r3, #4
 8007476:	602a      	str	r2, [r5, #0]
 8007478:	681d      	ldr	r5, [r3, #0]
 800747a:	6862      	ldr	r2, [r4, #4]
 800747c:	2100      	movs	r1, #0
 800747e:	4628      	mov	r0, r5
 8007480:	f7f8 fef6 	bl	8000270 <memchr>
 8007484:	b108      	cbz	r0, 800748a <_printf_i+0x1ea>
 8007486:	1b40      	subs	r0, r0, r5
 8007488:	6060      	str	r0, [r4, #4]
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	2300      	movs	r3, #0
 8007490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007494:	e7aa      	b.n	80073ec <_printf_i+0x14c>
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	462a      	mov	r2, r5
 800749a:	4649      	mov	r1, r9
 800749c:	4640      	mov	r0, r8
 800749e:	47d0      	blx	sl
 80074a0:	3001      	adds	r0, #1
 80074a2:	d0ad      	beq.n	8007400 <_printf_i+0x160>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	079b      	lsls	r3, r3, #30
 80074a8:	d413      	bmi.n	80074d2 <_printf_i+0x232>
 80074aa:	68e0      	ldr	r0, [r4, #12]
 80074ac:	9b03      	ldr	r3, [sp, #12]
 80074ae:	4298      	cmp	r0, r3
 80074b0:	bfb8      	it	lt
 80074b2:	4618      	movlt	r0, r3
 80074b4:	e7a6      	b.n	8007404 <_printf_i+0x164>
 80074b6:	2301      	movs	r3, #1
 80074b8:	4632      	mov	r2, r6
 80074ba:	4649      	mov	r1, r9
 80074bc:	4640      	mov	r0, r8
 80074be:	47d0      	blx	sl
 80074c0:	3001      	adds	r0, #1
 80074c2:	d09d      	beq.n	8007400 <_printf_i+0x160>
 80074c4:	3501      	adds	r5, #1
 80074c6:	68e3      	ldr	r3, [r4, #12]
 80074c8:	9903      	ldr	r1, [sp, #12]
 80074ca:	1a5b      	subs	r3, r3, r1
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dcf2      	bgt.n	80074b6 <_printf_i+0x216>
 80074d0:	e7eb      	b.n	80074aa <_printf_i+0x20a>
 80074d2:	2500      	movs	r5, #0
 80074d4:	f104 0619 	add.w	r6, r4, #25
 80074d8:	e7f5      	b.n	80074c6 <_printf_i+0x226>
 80074da:	bf00      	nop
 80074dc:	0800775d 	.word	0x0800775d
 80074e0:	0800776e 	.word	0x0800776e

080074e4 <memmove>:
 80074e4:	4288      	cmp	r0, r1
 80074e6:	b510      	push	{r4, lr}
 80074e8:	eb01 0402 	add.w	r4, r1, r2
 80074ec:	d902      	bls.n	80074f4 <memmove+0x10>
 80074ee:	4284      	cmp	r4, r0
 80074f0:	4623      	mov	r3, r4
 80074f2:	d807      	bhi.n	8007504 <memmove+0x20>
 80074f4:	1e43      	subs	r3, r0, #1
 80074f6:	42a1      	cmp	r1, r4
 80074f8:	d008      	beq.n	800750c <memmove+0x28>
 80074fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007502:	e7f8      	b.n	80074f6 <memmove+0x12>
 8007504:	4402      	add	r2, r0
 8007506:	4601      	mov	r1, r0
 8007508:	428a      	cmp	r2, r1
 800750a:	d100      	bne.n	800750e <memmove+0x2a>
 800750c:	bd10      	pop	{r4, pc}
 800750e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007516:	e7f7      	b.n	8007508 <memmove+0x24>

08007518 <_sbrk_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d06      	ldr	r5, [pc, #24]	; (8007534 <_sbrk_r+0x1c>)
 800751c:	2300      	movs	r3, #0
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	f000 f840 	bl	80075a8 <_sbrk>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_sbrk_r+0x1a>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_sbrk_r+0x1a>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	200061c4 	.word	0x200061c4

08007538 <_realloc_r>:
 8007538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800753c:	4680      	mov	r8, r0
 800753e:	4614      	mov	r4, r2
 8007540:	460e      	mov	r6, r1
 8007542:	b921      	cbnz	r1, 800754e <_realloc_r+0x16>
 8007544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007548:	4611      	mov	r1, r2
 800754a:	f7ff bc57 	b.w	8006dfc <_malloc_r>
 800754e:	b92a      	cbnz	r2, 800755c <_realloc_r+0x24>
 8007550:	f7ff fbe8 	bl	8006d24 <_free_r>
 8007554:	4625      	mov	r5, r4
 8007556:	4628      	mov	r0, r5
 8007558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800755c:	f000 f81b 	bl	8007596 <_malloc_usable_size_r>
 8007560:	4284      	cmp	r4, r0
 8007562:	4607      	mov	r7, r0
 8007564:	d802      	bhi.n	800756c <_realloc_r+0x34>
 8007566:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800756a:	d812      	bhi.n	8007592 <_realloc_r+0x5a>
 800756c:	4621      	mov	r1, r4
 800756e:	4640      	mov	r0, r8
 8007570:	f7ff fc44 	bl	8006dfc <_malloc_r>
 8007574:	4605      	mov	r5, r0
 8007576:	2800      	cmp	r0, #0
 8007578:	d0ed      	beq.n	8007556 <_realloc_r+0x1e>
 800757a:	42bc      	cmp	r4, r7
 800757c:	4622      	mov	r2, r4
 800757e:	4631      	mov	r1, r6
 8007580:	bf28      	it	cs
 8007582:	463a      	movcs	r2, r7
 8007584:	f7ff fbc0 	bl	8006d08 <memcpy>
 8007588:	4631      	mov	r1, r6
 800758a:	4640      	mov	r0, r8
 800758c:	f7ff fbca 	bl	8006d24 <_free_r>
 8007590:	e7e1      	b.n	8007556 <_realloc_r+0x1e>
 8007592:	4635      	mov	r5, r6
 8007594:	e7df      	b.n	8007556 <_realloc_r+0x1e>

08007596 <_malloc_usable_size_r>:
 8007596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800759a:	1f18      	subs	r0, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	bfbc      	itt	lt
 80075a0:	580b      	ldrlt	r3, [r1, r0]
 80075a2:	18c0      	addlt	r0, r0, r3
 80075a4:	4770      	bx	lr
	...

080075a8 <_sbrk>:
 80075a8:	4a04      	ldr	r2, [pc, #16]	; (80075bc <_sbrk+0x14>)
 80075aa:	6811      	ldr	r1, [r2, #0]
 80075ac:	4603      	mov	r3, r0
 80075ae:	b909      	cbnz	r1, 80075b4 <_sbrk+0xc>
 80075b0:	4903      	ldr	r1, [pc, #12]	; (80075c0 <_sbrk+0x18>)
 80075b2:	6011      	str	r1, [r2, #0]
 80075b4:	6810      	ldr	r0, [r2, #0]
 80075b6:	4403      	add	r3, r0
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	4770      	bx	lr
 80075bc:	200061d4 	.word	0x200061d4
 80075c0:	200061d8 	.word	0x200061d8

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
